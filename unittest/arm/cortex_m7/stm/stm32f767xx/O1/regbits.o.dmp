
O1/regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       2:	2200      	movs	r2, #0
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	200226c0 	.word	0x200226c0

0000000c <zero_array()>:
       c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
       e:	2200      	movs	r2, #0
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	20022500 	.word	0x20022500

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	200226c0 	.word	0x200226c0

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	200226c0 	.word	0x200226c0

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	200226c0 	.word	0x200226c0

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	200226c0 	.word	0x200226c0

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	200226c0 	.word	0x200226c0

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	200226c0 	.word	0x200226c0

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	200226c0 	.word	0x200226c0

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	200226c0 	.word	0x200226c0

00000098 <equ_singl_bits_operator()>:
      98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9a:	2240      	movs	r2, #64	; 0x40
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	200226c0 	.word	0x200226c0

000000a4 <equ_singl_bits_method()>:
      a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a6:	2240      	movs	r2, #64	; 0x40
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	200226c0 	.word	0x200226c0

000000b0 <equ_singl_mskd_operator()>:
      b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b2:	2202      	movs	r2, #2
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	200226c0 	.word	0x200226c0

000000bc <equ_singl_mskd_method()>:
      bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      be:	2202      	movs	r2, #2
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	200226c0 	.word	0x200226c0

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	200226c0 	.word	0x200226c0

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	200226c0 	.word	0x200226c0

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	200226c0 	.word	0x200226c0

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	200226c0 	.word	0x200226c0

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	200226c0 	.word	0x200226c0

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	200226c0 	.word	0x200226c0

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	200226c0 	.word	0x200226c0

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	200226c0 	.word	0x200226c0

00000150 <ins_multi_mskd_operator()>:
     150:	4a03      	ldr	r2, [pc, #12]	; (160 <ins_multi_mskd_operator()+0x10>)
     152:	6851      	ldr	r1, [r2, #4]
     154:	4b03      	ldr	r3, [pc, #12]	; (164 <ins_multi_mskd_operator()+0x14>)
     156:	400b      	ands	r3, r1
     158:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     15c:	6053      	str	r3, [r2, #4]
     15e:	4770      	bx	lr
     160:	200226c0 	.word	0x200226c0
     164:	fffff079 	.word	0xfffff079

00000168 <ins_multi_mskd_method()>:
     168:	4a03      	ldr	r2, [pc, #12]	; (178 <ins_multi_mskd_method()+0x10>)
     16a:	6851      	ldr	r1, [r2, #4]
     16c:	4b03      	ldr	r3, [pc, #12]	; (17c <ins_multi_mskd_method()+0x14>)
     16e:	400b      	ands	r3, r1
     170:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     174:	6053      	str	r3, [r2, #4]
     176:	4770      	bx	lr
     178:	200226c0 	.word	0x200226c0
     17c:	fffff079 	.word	0xfffff079

00000180 <equ_multi_bits_operator()>:
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     182:	2260      	movs	r2, #96	; 0x60
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	200226c0 	.word	0x200226c0

0000018c <equ_multi_bits_method()>:
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     18e:	2260      	movs	r2, #96	; 0x60
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	200226c0 	.word	0x200226c0

00000198 <equ_multi_mskd_operator()>:
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19a:	f44f 7242 	mov.w	r2, #776	; 0x308
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	200226c0 	.word	0x200226c0

000001a8 <equ_multi_mskd_method()>:
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	200226c0 	.word	0x200226c0

000001b8 <equ_bits_mskd_operator()>:
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1ba:	2222      	movs	r2, #34	; 0x22
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	200226c0 	.word	0x200226c0

000001c4 <equ_bits_mskd_method()>:
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c6:	2222      	movs	r2, #34	; 0x22
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	200226c0 	.word	0x200226c0

000001d0 <equ_mskd_bits_operator()>:
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d2:	2244      	movs	r2, #68	; 0x44
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	200226c0 	.word	0x200226c0

000001dc <equ_mskd_bits_method()>:
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1de:	2244      	movs	r2, #68	; 0x44
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	200226c0 	.word	0x200226c0

000001e8 <equ_bits_var()>:
     1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
     1ea:	2240      	movs	r2, #64	; 0x40
     1ec:	605a      	str	r2, [r3, #4]
     1ee:	2201      	movs	r2, #1
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	200226c0 	.word	0x200226c0

000001f8 <equ_mskd_var()>:
     1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
     1fa:	2202      	movs	r2, #2
     1fc:	605a      	str	r2, [r3, #4]
     1fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	200226c0 	.word	0x200226c0

0000020c <cmp_equ_zero()>:
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     20e:	2200      	movs	r2, #0
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
     218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
     222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	200226c0 	.word	0x200226c0
     230:	20022620 	.word	0x20022620

00000234 <cmp_neq_zero()>:
     234:	4b06      	ldr	r3, [pc, #24]	; (250 <cmp_neq_zero()+0x1c>)
     236:	2200      	movs	r2, #0
     238:	605a      	str	r2, [r3, #4]
     23a:	685b      	ldr	r3, [r3, #4]
     23c:	b11b      	cbz	r3, 246 <cmp_neq_zero()+0x12>
     23e:	4b04      	ldr	r3, [pc, #16]	; (250 <cmp_neq_zero()+0x1c>)
     240:	2204      	movs	r2, #4
     242:	605a      	str	r2, [r3, #4]
     244:	4770      	bx	lr
     246:	4b02      	ldr	r3, [pc, #8]	; (250 <cmp_neq_zero()+0x1c>)
     248:	2220      	movs	r2, #32
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	bf00      	nop
     250:	200226c0 	.word	0x200226c0

00000254 <cmp_equ_bits()>:
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <cmp_equ_bits()+0x1c>)
     256:	2240      	movs	r2, #64	; 0x40
     258:	605a      	str	r2, [r3, #4]
     25a:	685b      	ldr	r3, [r3, #4]
     25c:	f013 0f40 	tst.w	r3, #64	; 0x40
     260:	4b04      	ldr	r3, [pc, #16]	; (274 <cmp_equ_bits()+0x20>)
     262:	bf14      	ite	ne
     264:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
     268:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
     26c:	605a      	str	r2, [r3, #4]
     26e:	4770      	bx	lr
     270:	200226c0 	.word	0x200226c0
     274:	20022620 	.word	0x20022620

00000278 <cmp_neq_bits()>:
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <cmp_neq_bits()+0x18>)
     27a:	2240      	movs	r2, #64	; 0x40
     27c:	605a      	str	r2, [r3, #4]
     27e:	685b      	ldr	r3, [r3, #4]
     280:	f013 0f40 	tst.w	r3, #64	; 0x40
     284:	4b02      	ldr	r3, [pc, #8]	; (290 <cmp_neq_bits()+0x18>)
     286:	bf0c      	ite	eq
     288:	2202      	moveq	r2, #2
     28a:	2220      	movne	r2, #32
     28c:	605a      	str	r2, [r3, #4]
     28e:	4770      	bx	lr
     290:	200226c0 	.word	0x200226c0

00000294 <cmp_equ_multi_bits()>:
     294:	4b06      	ldr	r3, [pc, #24]	; (2b0 <cmp_equ_multi_bits()+0x1c>)
     296:	2260      	movs	r2, #96	; 0x60
     298:	605a      	str	r2, [r3, #4]
     29a:	685b      	ldr	r3, [r3, #4]
     29c:	4013      	ands	r3, r2
     29e:	4293      	cmp	r3, r2
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <cmp_equ_multi_bits()+0x20>)
     2a2:	bf0c      	ite	eq
     2a4:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     2a8:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2ac:	605a      	str	r2, [r3, #4]
     2ae:	4770      	bx	lr
     2b0:	200226c0 	.word	0x200226c0
     2b4:	20022620 	.word	0x20022620

000002b8 <cmp_neq_multi_bits()>:
     2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <cmp_neq_multi_bits()+0x1c>)
     2ba:	2260      	movs	r2, #96	; 0x60
     2bc:	605a      	str	r2, [r3, #4]
     2be:	685b      	ldr	r3, [r3, #4]
     2c0:	4013      	ands	r3, r2
     2c2:	4293      	cmp	r3, r2
     2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <cmp_neq_multi_bits()+0x20>)
     2c6:	bf14      	ite	ne
     2c8:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2cc:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2d0:	605a      	str	r2, [r3, #4]
     2d2:	4770      	bx	lr
     2d4:	200226c0 	.word	0x200226c0
     2d8:	20022620 	.word	0x20022620

000002dc <cmp_equ_mskd()>:
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <cmp_equ_mskd()+0x28>)
     2de:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2e2:	605a      	str	r2, [r3, #4]
     2e4:	685b      	ldr	r3, [r3, #4]
     2e6:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2ea:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2ee:	4a06      	ldr	r2, [pc, #24]	; (308 <cmp_equ_mskd()+0x2c>)
     2f0:	6853      	ldr	r3, [r2, #4]
     2f2:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2f6:	bf0c      	ite	eq
     2f8:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2fc:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     300:	6053      	str	r3, [r2, #4]
     302:	4770      	bx	lr
     304:	200226c0 	.word	0x200226c0
     308:	20022620 	.word	0x20022620

0000030c <cmp_neq_mskd()>:
     30c:	4b0b      	ldr	r3, [pc, #44]	; (33c <cmp_neq_mskd()+0x30>)
     30e:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     312:	605a      	str	r2, [r3, #4]
     314:	685b      	ldr	r3, [r3, #4]
     316:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     31a:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     31e:	d007      	beq.n	330 <cmp_neq_mskd()+0x24>
     320:	4a06      	ldr	r2, [pc, #24]	; (33c <cmp_neq_mskd()+0x30>)
     322:	6853      	ldr	r3, [r2, #4]
     324:	f023 0306 	bic.w	r3, r3, #6
     328:	f043 0304 	orr.w	r3, r3, #4
     32c:	6053      	str	r3, [r2, #4]
     32e:	4770      	bx	lr
     330:	4a02      	ldr	r2, [pc, #8]	; (33c <cmp_neq_mskd()+0x30>)
     332:	6853      	ldr	r3, [r2, #4]
     334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     338:	6053      	str	r3, [r2, #4]
     33a:	4770      	bx	lr
     33c:	200226c0 	.word	0x200226c0

00000340 <cmp_equ_reg()>:
     340:	4b06      	ldr	r3, [pc, #24]	; (35c <cmp_equ_reg()+0x1c>)
     342:	2222      	movs	r2, #34	; 0x22
     344:	605a      	str	r2, [r3, #4]
     346:	685b      	ldr	r3, [r3, #4]
     348:	4293      	cmp	r3, r2
     34a:	4b05      	ldr	r3, [pc, #20]	; (360 <cmp_equ_reg()+0x20>)
     34c:	bf0c      	ite	eq
     34e:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     352:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     356:	605a      	str	r2, [r3, #4]
     358:	4770      	bx	lr
     35a:	bf00      	nop
     35c:	200226c0 	.word	0x200226c0
     360:	20022620 	.word	0x20022620

00000364 <cmp_neq_reg()>:
     364:	4b05      	ldr	r3, [pc, #20]	; (37c <cmp_neq_reg()+0x18>)
     366:	2222      	movs	r2, #34	; 0x22
     368:	605a      	str	r2, [r3, #4]
     36a:	685b      	ldr	r3, [r3, #4]
     36c:	4293      	cmp	r3, r2
     36e:	4b03      	ldr	r3, [pc, #12]	; (37c <cmp_neq_reg()+0x18>)
     370:	bf14      	ite	ne
     372:	2202      	movne	r2, #2
     374:	2220      	moveq	r2, #32
     376:	605a      	str	r2, [r3, #4]
     378:	4770      	bx	lr
     37a:	bf00      	nop
     37c:	200226c0 	.word	0x200226c0

00000380 <constexpr_bits_array()>:
     380:	4b03      	ldr	r3, [pc, #12]	; (390 <constexpr_bits_array()+0x10>)
     382:	2206      	movs	r2, #6
     384:	62da      	str	r2, [r3, #44]	; 0x2c
     386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     38a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     38e:	4770      	bx	lr
     390:	20022500 	.word	0x20022500

00000394 <runtime_bits_array()>:
     394:	b081      	sub	sp, #4
     396:	2303      	movs	r3, #3
     398:	9300      	str	r3, [sp, #0]
     39a:	9a00      	ldr	r2, [sp, #0]
     39c:	0092      	lsls	r2, r2, #2
     39e:	4b03      	ldr	r3, [pc, #12]	; (3ac <runtime_bits_array()+0x18>)
     3a0:	4413      	add	r3, r2
     3a2:	2221      	movs	r2, #33	; 0x21
     3a4:	621a      	str	r2, [r3, #32]
     3a6:	b001      	add	sp, #4
     3a8:	4770      	bx	lr
     3aa:	bf00      	nop
     3ac:	20022500 	.word	0x20022500

000003b0 <prescaler_low()>:
     3b0:	4b04      	ldr	r3, [pc, #16]	; (3c4 <prescaler_low()+0x14>)
     3b2:	2277      	movs	r2, #119	; 0x77
     3b4:	605a      	str	r2, [r3, #4]
     3b6:	685b      	ldr	r3, [r3, #4]
     3b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3bc:	4a02      	ldr	r2, [pc, #8]	; (3c8 <prescaler_low()+0x18>)
     3be:	62d3      	str	r3, [r2, #44]	; 0x2c
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	20022620 	.word	0x20022620
     3c8:	20022500 	.word	0x20022500

000003cc <prescaler_high()>:
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <prescaler_high()+0x14>)
     3ce:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     3d2:	605a      	str	r2, [r3, #4]
     3d4:	685b      	ldr	r3, [r3, #4]
     3d6:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3da:	4a02      	ldr	r2, [pc, #8]	; (3e4 <prescaler_high()+0x18>)
     3dc:	62d3      	str	r3, [r2, #44]	; 0x2c
     3de:	4770      	bx	lr
     3e0:	20022620 	.word	0x20022620
     3e4:	20022500 	.word	0x20022500

000003e8 <reg_mskd_lss()>:
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <reg_mskd_lss()+0x20>)
     3ea:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3ee:	605a      	str	r2, [r3, #4]
     3f0:	685b      	ldr	r3, [r3, #4]
     3f2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3f6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3fa:	4b04      	ldr	r3, [pc, #16]	; (40c <reg_mskd_lss()+0x24>)
     3fc:	bf34      	ite	cc
     3fe:	2202      	movcc	r2, #2
     400:	2204      	movcs	r2, #4
     402:	605a      	str	r2, [r3, #4]
     404:	4770      	bx	lr
     406:	bf00      	nop
     408:	20022620 	.word	0x20022620
     40c:	200226c0 	.word	0x200226c0

00000410 <reg_mskd_leq()>:
     410:	4b0b      	ldr	r3, [pc, #44]	; (440 <reg_mskd_leq()+0x30>)
     412:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     416:	605a      	str	r2, [r3, #4]
     418:	685b      	ldr	r3, [r3, #4]
     41a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41e:	4293      	cmp	r3, r2
     420:	d80a      	bhi.n	438 <reg_mskd_leq()+0x28>
     422:	4b07      	ldr	r3, [pc, #28]	; (440 <reg_mskd_leq()+0x30>)
     424:	685b      	ldr	r3, [r3, #4]
     426:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     42a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     42e:	d803      	bhi.n	438 <reg_mskd_leq()+0x28>
     430:	4b04      	ldr	r3, [pc, #16]	; (444 <reg_mskd_leq()+0x34>)
     432:	2202      	movs	r2, #2
     434:	605a      	str	r2, [r3, #4]
     436:	4770      	bx	lr
     438:	4b02      	ldr	r3, [pc, #8]	; (444 <reg_mskd_leq()+0x34>)
     43a:	2204      	movs	r2, #4
     43c:	605a      	str	r2, [r3, #4]
     43e:	4770      	bx	lr
     440:	20022620 	.word	0x20022620
     444:	200226c0 	.word	0x200226c0

00000448 <reg_mskd_gtr()>:
     448:	4b07      	ldr	r3, [pc, #28]	; (468 <reg_mskd_gtr()+0x20>)
     44a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     44e:	605a      	str	r2, [r3, #4]
     450:	685b      	ldr	r3, [r3, #4]
     452:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     456:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     45a:	4b04      	ldr	r3, [pc, #16]	; (46c <reg_mskd_gtr()+0x24>)
     45c:	bf8c      	ite	hi
     45e:	2202      	movhi	r2, #2
     460:	2204      	movls	r2, #4
     462:	605a      	str	r2, [r3, #4]
     464:	4770      	bx	lr
     466:	bf00      	nop
     468:	20022620 	.word	0x20022620
     46c:	200226c0 	.word	0x200226c0

00000470 <reg_mskd_geq()>:
     470:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <reg_mskd_geq()+0x30>)
     472:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     476:	605a      	str	r2, [r3, #4]
     478:	685b      	ldr	r3, [r3, #4]
     47a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     47e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     482:	d309      	bcc.n	498 <reg_mskd_geq()+0x28>
     484:	4b06      	ldr	r3, [pc, #24]	; (4a0 <reg_mskd_geq()+0x30>)
     486:	685b      	ldr	r3, [r3, #4]
     488:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     48c:	4293      	cmp	r3, r2
     48e:	d303      	bcc.n	498 <reg_mskd_geq()+0x28>
     490:	4b04      	ldr	r3, [pc, #16]	; (4a4 <reg_mskd_geq()+0x34>)
     492:	2202      	movs	r2, #2
     494:	605a      	str	r2, [r3, #4]
     496:	4770      	bx	lr
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <reg_mskd_geq()+0x34>)
     49a:	2204      	movs	r2, #4
     49c:	605a      	str	r2, [r3, #4]
     49e:	4770      	bx	lr
     4a0:	20022620 	.word	0x20022620
     4a4:	200226c0 	.word	0x200226c0

000004a8 <pos_cmp_eq()>:
     4a8:	4b01      	ldr	r3, [pc, #4]	; (4b0 <pos_cmp_eq()+0x8>)
     4aa:	2202      	movs	r2, #2
     4ac:	605a      	str	r2, [r3, #4]
     4ae:	4770      	bx	lr
     4b0:	200226c0 	.word	0x200226c0

000004b4 <pos_cmp_ne()>:
     4b4:	4b01      	ldr	r3, [pc, #4]	; (4bc <pos_cmp_ne()+0x8>)
     4b6:	2202      	movs	r2, #2
     4b8:	605a      	str	r2, [r3, #4]
     4ba:	4770      	bx	lr
     4bc:	200226c0 	.word	0x200226c0

000004c0 <bits_extract_eq()>:
     4c0:	4b05      	ldr	r3, [pc, #20]	; (4d8 <bits_extract_eq()+0x18>)
     4c2:	2240      	movs	r2, #64	; 0x40
     4c4:	605a      	str	r2, [r3, #4]
     4c6:	685b      	ldr	r3, [r3, #4]
     4c8:	4293      	cmp	r3, r2
     4ca:	4b03      	ldr	r3, [pc, #12]	; (4d8 <bits_extract_eq()+0x18>)
     4cc:	bf0c      	ite	eq
     4ce:	2202      	moveq	r2, #2
     4d0:	2204      	movne	r2, #4
     4d2:	605a      	str	r2, [r3, #4]
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop
     4d8:	200226c0 	.word	0x200226c0

000004dc <mskd_extract_eq()>:
     4dc:	4b05      	ldr	r3, [pc, #20]	; (4f4 <mskd_extract_eq()+0x18>)
     4de:	2202      	movs	r2, #2
     4e0:	605a      	str	r2, [r3, #4]
     4e2:	685b      	ldr	r3, [r3, #4]
     4e4:	4293      	cmp	r3, r2
     4e6:	4b03      	ldr	r3, [pc, #12]	; (4f4 <mskd_extract_eq()+0x18>)
     4e8:	bf0c      	ite	eq
     4ea:	2220      	moveq	r2, #32
     4ec:	2240      	movne	r2, #64	; 0x40
     4ee:	605a      	str	r2, [r3, #4]
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	200226c0 	.word	0x200226c0

000004f8 <mskd_extract_ne()>:
     4f8:	4b05      	ldr	r3, [pc, #20]	; (510 <mskd_extract_ne()+0x18>)
     4fa:	2204      	movs	r2, #4
     4fc:	605a      	str	r2, [r3, #4]
     4fe:	685b      	ldr	r3, [r3, #4]
     500:	4293      	cmp	r3, r2
     502:	4b03      	ldr	r3, [pc, #12]	; (510 <mskd_extract_ne()+0x18>)
     504:	bf0c      	ite	eq
     506:	2240      	moveq	r2, #64	; 0x40
     508:	2220      	movne	r2, #32
     50a:	605a      	str	r2, [r3, #4]
     50c:	4770      	bx	lr
     50e:	bf00      	nop
     510:	200226c0 	.word	0x200226c0

00000514 <mskd_extract_lss()>:
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <mskd_extract_lss()+0x1c>)
     516:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     51a:	605a      	str	r2, [r3, #4]
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     522:	4b04      	ldr	r3, [pc, #16]	; (534 <mskd_extract_lss()+0x20>)
     524:	bf34      	ite	cc
     526:	2220      	movcc	r2, #32
     528:	2240      	movcs	r2, #64	; 0x40
     52a:	605a      	str	r2, [r3, #4]
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	20022620 	.word	0x20022620
     534:	200226c0 	.word	0x200226c0

00000538 <mskd_extract_leq()>:
     538:	4b05      	ldr	r3, [pc, #20]	; (550 <mskd_extract_leq()+0x18>)
     53a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     53e:	605a      	str	r2, [r3, #4]
     540:	685b      	ldr	r3, [r3, #4]
     542:	4293      	cmp	r3, r2
     544:	4b03      	ldr	r3, [pc, #12]	; (554 <mskd_extract_leq()+0x1c>)
     546:	bf94      	ite	ls
     548:	2220      	movls	r2, #32
     54a:	2240      	movhi	r2, #64	; 0x40
     54c:	605a      	str	r2, [r3, #4]
     54e:	4770      	bx	lr
     550:	20022620 	.word	0x20022620
     554:	200226c0 	.word	0x200226c0

00000558 <mskd_extract_gtr()>:
     558:	4b06      	ldr	r3, [pc, #24]	; (574 <mskd_extract_gtr()+0x1c>)
     55a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     55e:	605a      	str	r2, [r3, #4]
     560:	685b      	ldr	r3, [r3, #4]
     562:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <mskd_extract_gtr()+0x20>)
     568:	bf8c      	ite	hi
     56a:	2220      	movhi	r2, #32
     56c:	2240      	movls	r2, #64	; 0x40
     56e:	605a      	str	r2, [r3, #4]
     570:	4770      	bx	lr
     572:	bf00      	nop
     574:	20022620 	.word	0x20022620
     578:	200226c0 	.word	0x200226c0

0000057c <set_bits_global()>:
     57c:	4a02      	ldr	r2, [pc, #8]	; (588 <set_bits_global()+0xc>)
     57e:	6853      	ldr	r3, [r2, #4]
     580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     584:	6053      	str	r3, [r2, #4]
     586:	4770      	bx	lr
     588:	200226c0 	.word	0x200226c0

0000058c <ins_mskd_global()>:
     58c:	4a03      	ldr	r2, [pc, #12]	; (59c <ins_mskd_global()+0x10>)
     58e:	6853      	ldr	r3, [r2, #4]
     590:	f023 0306 	bic.w	r3, r3, #6
     594:	f043 0302 	orr.w	r3, r3, #2
     598:	6053      	str	r3, [r2, #4]
     59a:	4770      	bx	lr
     59c:	200226c0 	.word	0x200226c0

000005a0 <assign_array_global()>:
     5a0:	4b01      	ldr	r3, [pc, #4]	; (5a8 <assign_array_global()+0x8>)
     5a2:	22bd      	movs	r2, #189	; 0xbd
     5a4:	601a      	str	r2, [r3, #0]
     5a6:	4770      	bx	lr
     5a8:	2002252c 	.word	0x2002252c

000005ac <shifted_global()>:
     5ac:	4b04      	ldr	r3, [pc, #16]	; (5c0 <shifted_global()+0x14>)
     5ae:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     5b2:	605a      	str	r2, [r3, #4]
     5b4:	685b      	ldr	r3, [r3, #4]
     5b6:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5ba:	4a02      	ldr	r2, [pc, #8]	; (5c4 <shifted_global()+0x18>)
     5bc:	62d3      	str	r3, [r2, #44]	; 0x2c
     5be:	4770      	bx	lr
     5c0:	20022620 	.word	0x20022620
     5c4:	20022500 	.word	0x20022500

000005c8 <assign_register_global()>:
     5c8:	4b01      	ldr	r3, [pc, #4]	; (5d0 <assign_register_global()+0x8>)
     5ca:	2204      	movs	r2, #4
     5cc:	605a      	str	r2, [r3, #4]
     5ce:	4770      	bx	lr
     5d0:	200226c0 	.word	0x200226c0

000005d4 <copy_bits_equ()>:
     5d4:	4b05      	ldr	r3, [pc, #20]	; (5ec <copy_bits_equ()+0x18>)
     5d6:	2240      	movs	r2, #64	; 0x40
     5d8:	605a      	str	r2, [r3, #4]
     5da:	685b      	ldr	r3, [r3, #4]
     5dc:	f013 0f40 	tst.w	r3, #64	; 0x40
     5e0:	4b02      	ldr	r3, [pc, #8]	; (5ec <copy_bits_equ()+0x18>)
     5e2:	bf14      	ite	ne
     5e4:	2202      	movne	r2, #2
     5e6:	2204      	moveq	r2, #4
     5e8:	605a      	str	r2, [r3, #4]
     5ea:	4770      	bx	lr
     5ec:	200226c0 	.word	0x200226c0

000005f0 <copy_bits_neq()>:
     5f0:	4b05      	ldr	r3, [pc, #20]	; (608 <copy_bits_neq()+0x18>)
     5f2:	2240      	movs	r2, #64	; 0x40
     5f4:	605a      	str	r2, [r3, #4]
     5f6:	685b      	ldr	r3, [r3, #4]
     5f8:	f013 0f40 	tst.w	r3, #64	; 0x40
     5fc:	4b02      	ldr	r3, [pc, #8]	; (608 <copy_bits_neq()+0x18>)
     5fe:	bf0c      	ite	eq
     600:	2202      	moveq	r2, #2
     602:	2204      	movne	r2, #4
     604:	605a      	str	r2, [r3, #4]
     606:	4770      	bx	lr
     608:	200226c0 	.word	0x200226c0

0000060c <copy_mskd_equ()>:
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <copy_mskd_equ()+0x1c>)
     60e:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     612:	605a      	str	r2, [r3, #4]
     614:	685b      	ldr	r3, [r3, #4]
     616:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     61a:	4293      	cmp	r3, r2
     61c:	4b03      	ldr	r3, [pc, #12]	; (62c <copy_mskd_equ()+0x20>)
     61e:	bf0c      	ite	eq
     620:	2202      	moveq	r2, #2
     622:	2204      	movne	r2, #4
     624:	605a      	str	r2, [r3, #4]
     626:	4770      	bx	lr
     628:	20022620 	.word	0x20022620
     62c:	200226c0 	.word	0x200226c0

00000630 <copy_mskd_neq()>:
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <copy_mskd_neq()+0x1c>)
     632:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     636:	605a      	str	r2, [r3, #4]
     638:	685b      	ldr	r3, [r3, #4]
     63a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     63e:	4293      	cmp	r3, r2
     640:	4b03      	ldr	r3, [pc, #12]	; (650 <copy_mskd_neq()+0x20>)
     642:	bf14      	ite	ne
     644:	2202      	movne	r2, #2
     646:	2204      	moveq	r2, #4
     648:	605a      	str	r2, [r3, #4]
     64a:	4770      	bx	lr
     64c:	20022620 	.word	0x20022620
     650:	200226c0 	.word	0x200226c0

00000654 <copy_mskd_lss()>:
     654:	4b07      	ldr	r3, [pc, #28]	; (674 <copy_mskd_lss()+0x20>)
     656:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     65a:	605a      	str	r2, [r3, #4]
     65c:	685b      	ldr	r3, [r3, #4]
     65e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     662:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     666:	4b04      	ldr	r3, [pc, #16]	; (678 <copy_mskd_lss()+0x24>)
     668:	bf34      	ite	cc
     66a:	2202      	movcc	r2, #2
     66c:	2204      	movcs	r2, #4
     66e:	605a      	str	r2, [r3, #4]
     670:	4770      	bx	lr
     672:	bf00      	nop
     674:	20022620 	.word	0x20022620
     678:	200226c0 	.word	0x200226c0

0000067c <copy_mskd_leq()>:
     67c:	4b06      	ldr	r3, [pc, #24]	; (698 <copy_mskd_leq()+0x1c>)
     67e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     682:	605a      	str	r2, [r3, #4]
     684:	685b      	ldr	r3, [r3, #4]
     686:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     68a:	4293      	cmp	r3, r2
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <copy_mskd_leq()+0x20>)
     68e:	bf94      	ite	ls
     690:	2202      	movls	r2, #2
     692:	2204      	movhi	r2, #4
     694:	605a      	str	r2, [r3, #4]
     696:	4770      	bx	lr
     698:	20022620 	.word	0x20022620
     69c:	200226c0 	.word	0x200226c0

000006a0 <copy_mskd_gtr()>:
     6a0:	4b07      	ldr	r3, [pc, #28]	; (6c0 <copy_mskd_gtr()+0x20>)
     6a2:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     6a6:	605a      	str	r2, [r3, #4]
     6a8:	685b      	ldr	r3, [r3, #4]
     6aa:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6ae:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     6b2:	4b04      	ldr	r3, [pc, #16]	; (6c4 <copy_mskd_gtr()+0x24>)
     6b4:	bf8c      	ite	hi
     6b6:	2202      	movhi	r2, #2
     6b8:	2204      	movls	r2, #4
     6ba:	605a      	str	r2, [r3, #4]
     6bc:	4770      	bx	lr
     6be:	bf00      	nop
     6c0:	20022620 	.word	0x20022620
     6c4:	200226c0 	.word	0x200226c0

000006c8 <copy_mskd_geq()>:
     6c8:	4b06      	ldr	r3, [pc, #24]	; (6e4 <copy_mskd_geq()+0x1c>)
     6ca:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6ce:	605a      	str	r2, [r3, #4]
     6d0:	685b      	ldr	r3, [r3, #4]
     6d2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6d6:	4293      	cmp	r3, r2
     6d8:	4b03      	ldr	r3, [pc, #12]	; (6e8 <copy_mskd_geq()+0x20>)
     6da:	bf2c      	ite	cs
     6dc:	2202      	movcs	r2, #2
     6de:	2204      	movcc	r2, #4
     6e0:	605a      	str	r2, [r3, #4]
     6e2:	4770      	bx	lr
     6e4:	20022620 	.word	0x20022620
     6e8:	200226c0 	.word	0x200226c0

000006ec <copy_shifted()>:
     6ec:	4b06      	ldr	r3, [pc, #24]	; (708 <copy_shifted()+0x1c>)
     6ee:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6f2:	605a      	str	r2, [r3, #4]
     6f4:	685b      	ldr	r3, [r3, #4]
     6f6:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6fa:	2b0b      	cmp	r3, #11
     6fc:	4b03      	ldr	r3, [pc, #12]	; (70c <copy_shifted()+0x20>)
     6fe:	bf0c      	ite	eq
     700:	2202      	moveq	r2, #2
     702:	2204      	movne	r2, #4
     704:	605a      	str	r2, [r3, #4]
     706:	4770      	bx	lr
     708:	20022620 	.word	0x20022620
     70c:	200226c0 	.word	0x200226c0

00000710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     710:	4b01      	ldr	r3, [pc, #4]	; (718 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0x8>)
     712:	6058      	str	r0, [r3, #4]
     714:	4770      	bx	lr
     716:	bf00      	nop
     718:	200226c0 	.word	0x200226c0

0000071c <call_bits_val_var()>:
     71c:	b500      	push	{lr}
     71e:	2040      	movs	r0, #64	; 0x40
     720:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     724:	f85d fb04 	ldr.w	pc, [sp], #4

00000728 <call_bits_val_zero()>:
     728:	b500      	push	{lr}
     72a:	2000      	movs	r0, #0
     72c:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     730:	f85d fb04 	ldr.w	pc, [sp], #4

00000734 <call_bits_val_const()>:
     734:	b500      	push	{lr}
     736:	2040      	movs	r0, #64	; 0x40
     738:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     73c:	f85d fb04 	ldr.w	pc, [sp], #4

00000740 <call_bits_val_global()>:
     740:	b500      	push	{lr}
     742:	2040      	movs	r0, #64	; 0x40
     744:	f7ff fffe 	bl	710 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     748:	f85d fb04 	ldr.w	pc, [sp], #4

0000074c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     74c:	6802      	ldr	r2, [r0, #0]
     74e:	4b01      	ldr	r3, [pc, #4]	; (754 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0x8>)
     750:	605a      	str	r2, [r3, #4]
     752:	4770      	bx	lr
     754:	200226c0 	.word	0x200226c0

00000758 <call_bits_ref_var()>:
     758:	b500      	push	{lr}
     75a:	b081      	sub	sp, #4
     75c:	2301      	movs	r3, #1
     75e:	9300      	str	r3, [sp, #0]
     760:	4668      	mov	r0, sp
     762:	f7ff fffe 	bl	74c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     766:	b001      	add	sp, #4
     768:	f85d fb04 	ldr.w	pc, [sp], #4

0000076c <call_bits_ref_zero()>:
     76c:	b500      	push	{lr}
     76e:	b081      	sub	sp, #4
     770:	2300      	movs	r3, #0
     772:	9300      	str	r3, [sp, #0]
     774:	4668      	mov	r0, sp
     776:	f7ff fffe 	bl	74c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     77a:	b001      	add	sp, #4
     77c:	f85d fb04 	ldr.w	pc, [sp], #4

00000780 <call_bits_ref_const()>:
     780:	b500      	push	{lr}
     782:	b081      	sub	sp, #4
     784:	2301      	movs	r3, #1
     786:	9300      	str	r3, [sp, #0]
     788:	4668      	mov	r0, sp
     78a:	f7ff fffe 	bl	74c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     78e:	b001      	add	sp, #4
     790:	f85d fb04 	ldr.w	pc, [sp], #4

00000794 <call_bits_ref_global()>:
     794:	b500      	push	{lr}
     796:	b081      	sub	sp, #4
     798:	2340      	movs	r3, #64	; 0x40
     79a:	9300      	str	r3, [sp, #0]
     79c:	4668      	mov	r0, sp
     79e:	f7ff fffe 	bl	74c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     7a2:	b001      	add	sp, #4
     7a4:	f85d fb04 	ldr.w	pc, [sp], #4

000007a8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     7a8:	4a03      	ldr	r2, [pc, #12]	; (7b8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     7aa:	6853      	ldr	r3, [r2, #4]
     7ac:	ea23 0000 	bic.w	r0, r3, r0
     7b0:	4308      	orrs	r0, r1
     7b2:	6050      	str	r0, [r2, #4]
     7b4:	4770      	bx	lr
     7b6:	bf00      	nop
     7b8:	200226c0 	.word	0x200226c0

000007bc <call_mskd_val_var()>:
     7bc:	b500      	push	{lr}
     7be:	2006      	movs	r0, #6
     7c0:	2102      	movs	r1, #2
     7c2:	f7ff fffe 	bl	7a8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7c6:	f85d fb04 	ldr.w	pc, [sp], #4

000007ca <call_mskd_val_const()>:
     7ca:	b500      	push	{lr}
     7cc:	2006      	movs	r0, #6
     7ce:	2102      	movs	r1, #2
     7d0:	f7ff fffe 	bl	7a8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7d4:	f85d fb04 	ldr.w	pc, [sp], #4

000007d8 <call_mskd_val_global()>:
     7d8:	b500      	push	{lr}
     7da:	2006      	movs	r0, #6
     7dc:	2102      	movs	r1, #2
     7de:	f7ff fffe 	bl	7a8 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7e2:	f85d fb04 	ldr.w	pc, [sp], #4

000007e6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     7e6:	4a04      	ldr	r2, [pc, #16]	; (7f8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x12>)
     7e8:	6853      	ldr	r3, [r2, #4]
     7ea:	6801      	ldr	r1, [r0, #0]
     7ec:	ea23 0301 	bic.w	r3, r3, r1
     7f0:	6841      	ldr	r1, [r0, #4]
     7f2:	430b      	orrs	r3, r1
     7f4:	6053      	str	r3, [r2, #4]
     7f6:	4770      	bx	lr
     7f8:	200226c0 	.word	0x200226c0

000007fc <call_mskd_ref_var()>:
     7fc:	b500      	push	{lr}
     7fe:	b082      	sub	sp, #8
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <call_mskd_ref_var()+0x18>)
     802:	cb0c      	ldmia	r3, {r2, r3}
     804:	e88d 000c 	stmia.w	sp, {r2, r3}
     808:	4668      	mov	r0, sp
     80a:	f7ff fffe 	bl	7e6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     80e:	b002      	add	sp, #8
     810:	f85d fb04 	ldr.w	pc, [sp], #4
     814:	00000000 	.word	0x00000000

00000818 <call_mskd_ref_const()>:
     818:	b500      	push	{lr}
     81a:	b082      	sub	sp, #8
     81c:	2306      	movs	r3, #6
     81e:	9300      	str	r3, [sp, #0]
     820:	2304      	movs	r3, #4
     822:	9301      	str	r3, [sp, #4]
     824:	4668      	mov	r0, sp
     826:	f7ff fffe 	bl	7e6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     82a:	b002      	add	sp, #8
     82c:	f85d fb04 	ldr.w	pc, [sp], #4

00000830 <call_mskd_ref_global()>:
     830:	b500      	push	{lr}
     832:	b082      	sub	sp, #8
     834:	2306      	movs	r3, #6
     836:	9300      	str	r3, [sp, #0]
     838:	2302      	movs	r3, #2
     83a:	9301      	str	r3, [sp, #4]
     83c:	4668      	mov	r0, sp
     83e:	f7ff fffe 	bl	7e6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     842:	b002      	add	sp, #8
     844:	f85d fb04 	ldr.w	pc, [sp], #4

00000848 <periph_bits(mcu::Serial volatile*)>:
     848:	6843      	ldr	r3, [r0, #4]
     84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     84e:	6043      	str	r3, [r0, #4]
     850:	4770      	bx	lr

00000852 <call_periph_bits()>:
     852:	b500      	push	{lr}
     854:	4802      	ldr	r0, [pc, #8]	; (860 <call_periph_bits()+0xe>)
     856:	f7ff fffe 	bl	848 <periph_bits(mcu::Serial volatile*)>
     85a:	f85d fb04 	ldr.w	pc, [sp], #4
     85e:	bf00      	nop
     860:	200226c0 	.word	0x200226c0

00000864 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     864:	6843      	ldr	r3, [r0, #4]
     866:	4319      	orrs	r1, r3
     868:	6041      	str	r1, [r0, #4]
     86a:	4770      	bx	lr

0000086c <call_periph_bits_val()>:
     86c:	b500      	push	{lr}
     86e:	2140      	movs	r1, #64	; 0x40
     870:	4802      	ldr	r0, [pc, #8]	; (87c <call_periph_bits_val()+0x10>)
     872:	f7ff fffe 	bl	864 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     876:	f85d fb04 	ldr.w	pc, [sp], #4
     87a:	bf00      	nop
     87c:	200226c0 	.word	0x200226c0

00000880 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     880:	6803      	ldr	r3, [r0, #0]
     882:	4319      	orrs	r1, r3
     884:	6001      	str	r1, [r0, #0]
     886:	4770      	bx	lr

00000888 <call_reg_bits_val()>:
     888:	b500      	push	{lr}
     88a:	2140      	movs	r1, #64	; 0x40
     88c:	4802      	ldr	r0, [pc, #8]	; (898 <call_reg_bits_val()+0x10>)
     88e:	f7ff fffe 	bl	880 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     892:	f85d fb04 	ldr.w	pc, [sp], #4
     896:	bf00      	nop
     898:	200226c4 	.word	0x200226c4

0000089c <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     89c:	6843      	ldr	r3, [r0, #4]
     89e:	680a      	ldr	r2, [r1, #0]
     8a0:	4313      	orrs	r3, r2
     8a2:	6043      	str	r3, [r0, #4]
     8a4:	4770      	bx	lr

000008a6 <call_periph_bits_ref()>:
     8a6:	b500      	push	{lr}
     8a8:	b081      	sub	sp, #4
     8aa:	2340      	movs	r3, #64	; 0x40
     8ac:	9300      	str	r3, [sp, #0]
     8ae:	4669      	mov	r1, sp
     8b0:	4802      	ldr	r0, [pc, #8]	; (8bc <call_periph_bits_ref()+0x16>)
     8b2:	f7ff fffe 	bl	89c <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8b6:	b001      	add	sp, #4
     8b8:	f85d fb04 	ldr.w	pc, [sp], #4
     8bc:	200226c0 	.word	0x200226c0

000008c0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8c0:	6803      	ldr	r3, [r0, #0]
     8c2:	680a      	ldr	r2, [r1, #0]
     8c4:	4313      	orrs	r3, r2
     8c6:	6003      	str	r3, [r0, #0]
     8c8:	4770      	bx	lr

000008ca <call_reg_bits_ref()>:
     8ca:	b500      	push	{lr}
     8cc:	b081      	sub	sp, #4
     8ce:	2340      	movs	r3, #64	; 0x40
     8d0:	9300      	str	r3, [sp, #0]
     8d2:	4669      	mov	r1, sp
     8d4:	4802      	ldr	r0, [pc, #8]	; (8e0 <call_reg_bits_ref()+0x16>)
     8d6:	f7ff fffe 	bl	8c0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8da:	b001      	add	sp, #4
     8dc:	f85d fb04 	ldr.w	pc, [sp], #4
     8e0:	200226c4 	.word	0x200226c4

000008e4 <periph_mskd(mcu::Serial volatile*)>:
     8e4:	6843      	ldr	r3, [r0, #4]
     8e6:	f023 0306 	bic.w	r3, r3, #6
     8ea:	f043 0302 	orr.w	r3, r3, #2
     8ee:	6043      	str	r3, [r0, #4]
     8f0:	4770      	bx	lr

000008f2 <call_periph_mskd()>:
     8f2:	b500      	push	{lr}
     8f4:	4802      	ldr	r0, [pc, #8]	; (900 <call_periph_mskd()+0xe>)
     8f6:	f7ff fffe 	bl	8e4 <periph_mskd(mcu::Serial volatile*)>
     8fa:	f85d fb04 	ldr.w	pc, [sp], #4
     8fe:	bf00      	nop
     900:	200226c0 	.word	0x200226c0

00000904 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     904:	6843      	ldr	r3, [r0, #4]
     906:	ea23 0101 	bic.w	r1, r3, r1
     90a:	4311      	orrs	r1, r2
     90c:	6041      	str	r1, [r0, #4]
     90e:	4770      	bx	lr

00000910 <call_periph_mskd_val()>:
     910:	b500      	push	{lr}
     912:	2106      	movs	r1, #6
     914:	2202      	movs	r2, #2
     916:	4802      	ldr	r0, [pc, #8]	; (920 <call_periph_mskd_val()+0x10>)
     918:	f7ff fffe 	bl	904 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     91c:	f85d fb04 	ldr.w	pc, [sp], #4
     920:	200226c0 	.word	0x200226c0

00000924 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     924:	6803      	ldr	r3, [r0, #0]
     926:	ea23 0101 	bic.w	r1, r3, r1
     92a:	4311      	orrs	r1, r2
     92c:	6001      	str	r1, [r0, #0]
     92e:	4770      	bx	lr

00000930 <call_reg_mskd_val()>:
     930:	b500      	push	{lr}
     932:	2106      	movs	r1, #6
     934:	2202      	movs	r2, #2
     936:	4802      	ldr	r0, [pc, #8]	; (940 <call_reg_mskd_val()+0x10>)
     938:	f7ff fffe 	bl	924 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     93c:	f85d fb04 	ldr.w	pc, [sp], #4
     940:	200226c4 	.word	0x200226c4

00000944 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     944:	6843      	ldr	r3, [r0, #4]
     946:	ea23 0101 	bic.w	r1, r3, r1
     94a:	4311      	orrs	r1, r2
     94c:	6041      	str	r1, [r0, #4]
     94e:	4770      	bx	lr

00000950 <call_periph_mskd_ref()>:
     950:	b500      	push	{lr}
     952:	2106      	movs	r1, #6
     954:	2202      	movs	r2, #2
     956:	4802      	ldr	r0, [pc, #8]	; (960 <call_periph_mskd_ref()+0x10>)
     958:	f7ff fffe 	bl	944 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     95c:	f85d fb04 	ldr.w	pc, [sp], #4
     960:	200226c0 	.word	0x200226c0

00000964 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     964:	6803      	ldr	r3, [r0, #0]
     966:	ea23 0101 	bic.w	r1, r3, r1
     96a:	4311      	orrs	r1, r2
     96c:	6001      	str	r1, [r0, #0]
     96e:	4770      	bx	lr

00000970 <call_reg_mskd_ref()>:
     970:	b500      	push	{lr}
     972:	2106      	movs	r1, #6
     974:	2202      	movs	r2, #2
     976:	4802      	ldr	r0, [pc, #8]	; (980 <call_reg_mskd_ref()+0x10>)
     978:	f7ff fffe 	bl	964 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     97c:	f85d fb04 	ldr.w	pc, [sp], #4
     980:	200226c4 	.word	0x200226c4

00000984 <return_bits()>:
     984:	2020      	movs	r0, #32
     986:	4770      	bx	lr

00000988 <call_return_bits()>:
     988:	b500      	push	{lr}
     98a:	f7ff fffe 	bl	984 <return_bits()>
     98e:	2820      	cmp	r0, #32
     990:	4b04      	ldr	r3, [pc, #16]	; (9a4 <call_return_bits()+0x1c>)
     992:	bf0c      	ite	eq
     994:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     998:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     99c:	605a      	str	r2, [r3, #4]
     99e:	f85d fb04 	ldr.w	pc, [sp], #4
     9a2:	bf00      	nop
     9a4:	20022620 	.word	0x20022620

000009a8 <return_mskd()>:
     9a8:	2218      	movs	r2, #24
     9aa:	6002      	str	r2, [r0, #0]
     9ac:	2208      	movs	r2, #8
     9ae:	6042      	str	r2, [r0, #4]
     9b0:	4770      	bx	lr

000009b2 <call_return_mskd()>:
     9b2:	b500      	push	{lr}
     9b4:	b082      	sub	sp, #8
     9b6:	4668      	mov	r0, sp
     9b8:	f7ff fffe 	bl	9a8 <return_mskd()>
     9bc:	9a01      	ldr	r2, [sp, #4]
     9be:	9b00      	ldr	r3, [sp, #0]
     9c0:	2b18      	cmp	r3, #24
     9c2:	d006      	beq.n	9d2 <call_return_mskd()+0x20>
     9c4:	4b06      	ldr	r3, [pc, #24]	; (9e0 <call_return_mskd()+0x2e>)
     9c6:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9ca:	605a      	str	r2, [r3, #4]
     9cc:	b002      	add	sp, #8
     9ce:	f85d fb04 	ldr.w	pc, [sp], #4
     9d2:	2a08      	cmp	r2, #8
     9d4:	d1f6      	bne.n	9c4 <call_return_mskd()+0x12>
     9d6:	4b02      	ldr	r3, [pc, #8]	; (9e0 <call_return_mskd()+0x2e>)
     9d8:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9dc:	605a      	str	r2, [r3, #4]
     9de:	e7f5      	b.n	9cc <call_return_mskd()+0x1a>
     9e0:	20022620 	.word	0x20022620

000009e4 <return_reg()>:
     9e4:	4b02      	ldr	r3, [pc, #8]	; (9f0 <return_reg()+0xc>)
     9e6:	2240      	movs	r2, #64	; 0x40
     9e8:	605a      	str	r2, [r3, #4]
     9ea:	4802      	ldr	r0, [pc, #8]	; (9f4 <return_reg()+0x10>)
     9ec:	4770      	bx	lr
     9ee:	bf00      	nop
     9f0:	200226c0 	.word	0x200226c0
     9f4:	200226c4 	.word	0x200226c4

000009f8 <call_return_reg()>:
     9f8:	b500      	push	{lr}
     9fa:	f7ff fffe 	bl	9e4 <return_reg()>
     9fe:	6803      	ldr	r3, [r0, #0]
     a00:	2b40      	cmp	r3, #64	; 0x40
     a02:	4b04      	ldr	r3, [pc, #16]	; (a14 <call_return_reg()+0x1c>)
     a04:	bf0c      	ite	eq
     a06:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     a0a:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     a0e:	605a      	str	r2, [r3, #4]
     a10:	f85d fb04 	ldr.w	pc, [sp], #4
     a14:	20022620 	.word	0x20022620

00000a18 <return_periph()>:
     a18:	4801      	ldr	r0, [pc, #4]	; (a20 <return_periph()+0x8>)
     a1a:	2340      	movs	r3, #64	; 0x40
     a1c:	6043      	str	r3, [r0, #4]
     a1e:	4770      	bx	lr
     a20:	200226c0 	.word	0x200226c0

00000a24 <call_return_periph()>:
     a24:	b500      	push	{lr}
     a26:	f7ff fffe 	bl	a18 <return_periph()>
     a2a:	6843      	ldr	r3, [r0, #4]
     a2c:	2b40      	cmp	r3, #64	; 0x40
     a2e:	4b04      	ldr	r3, [pc, #16]	; (a40 <call_return_periph()+0x1c>)
     a30:	bf0c      	ite	eq
     a32:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     a36:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     a3a:	605a      	str	r2, [r3, #4]
     a3c:	f85d fb04 	ldr.w	pc, [sp], #4
     a40:	20022620 	.word	0x20022620

00000a44 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a44:	2805      	cmp	r0, #5
     a46:	d006      	beq.n	a56 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a48:	2806      	cmp	r0, #6
     a4a:	4b05      	ldr	r3, [pc, #20]	; (a60 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a4c:	bf0c      	ite	eq
     a4e:	2244      	moveq	r2, #68	; 0x44
     a50:	2255      	movne	r2, #85	; 0x55
     a52:	62da      	str	r2, [r3, #44]	; 0x2c
     a54:	4770      	bx	lr
     a56:	4b02      	ldr	r3, [pc, #8]	; (a60 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a58:	2233      	movs	r2, #51	; 0x33
     a5a:	62da      	str	r2, [r3, #44]	; 0x2c
     a5c:	4770      	bx	lr
     a5e:	bf00      	nop
     a60:	20022500 	.word	0x20022500

00000a64 <call_pos_val()>:
     a64:	b500      	push	{lr}
     a66:	2005      	movs	r0, #5
     a68:	f7ff fffe 	bl	a44 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a6c:	2006      	movs	r0, #6
     a6e:	f7ff fffe 	bl	a44 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a72:	f85d fb04 	ldr.w	pc, [sp], #4

00000a76 <call_pos_val_global()>:
     a76:	b500      	push	{lr}
     a78:	2006      	movs	r0, #6
     a7a:	f7ff fffe 	bl	a44 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00000a82 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a82:	6803      	ldr	r3, [r0, #0]
     a84:	2b05      	cmp	r3, #5
     a86:	d006      	beq.n	a96 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a88:	2b06      	cmp	r3, #6
     a8a:	4b05      	ldr	r3, [pc, #20]	; (aa0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a8c:	bf0c      	ite	eq
     a8e:	2277      	moveq	r2, #119	; 0x77
     a90:	2288      	movne	r2, #136	; 0x88
     a92:	62da      	str	r2, [r3, #44]	; 0x2c
     a94:	4770      	bx	lr
     a96:	4b02      	ldr	r3, [pc, #8]	; (aa0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a98:	2266      	movs	r2, #102	; 0x66
     a9a:	62da      	str	r2, [r3, #44]	; 0x2c
     a9c:	4770      	bx	lr
     a9e:	bf00      	nop
     aa0:	20022500 	.word	0x20022500

00000aa4 <call_pos_ref()>:
     aa4:	b510      	push	{r4, lr}
     aa6:	b082      	sub	sp, #8
     aa8:	2405      	movs	r4, #5
     aaa:	9401      	str	r4, [sp, #4]
     aac:	a801      	add	r0, sp, #4
     aae:	f7ff fffe 	bl	a82 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     ab2:	9400      	str	r4, [sp, #0]
     ab4:	4668      	mov	r0, sp
     ab6:	f7ff fffe 	bl	a82 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     aba:	b002      	add	sp, #8
     abc:	bd10      	pop	{r4, pc}

00000abe <call_pos_ref_global()>:
     abe:	b500      	push	{lr}
     ac0:	b081      	sub	sp, #4
     ac2:	2306      	movs	r3, #6
     ac4:	9300      	str	r3, [sp, #0]
     ac6:	4668      	mov	r0, sp
     ac8:	f7ff fffe 	bl	a82 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     acc:	b001      	add	sp, #4
     ace:	f85d fb04 	ldr.w	pc, [sp], #4

00000ad2 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ad2:	4a03      	ldr	r2, [pc, #12]	; (ae0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
     ad4:	6853      	ldr	r3, [r2, #4]
     ad6:	ea23 0000 	bic.w	r0, r3, r0
     ada:	4308      	orrs	r0, r1
     adc:	6050      	str	r0, [r2, #4]
     ade:	4770      	bx	lr
     ae0:	200226c0 	.word	0x200226c0

00000ae4 <call_range_val(unsigned int)>:
     ae4:	b500      	push	{lr}
     ae6:	0301      	lsls	r1, r0, #12
     ae8:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     aec:	f7ff fffe 	bl	ad2 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     af0:	f85d fb04 	ldr.w	pc, [sp], #4

00000af4 <call_range_val_port()>:
     af4:	b500      	push	{lr}
     af6:	201f      	movs	r0, #31
     af8:	f7ff fffe 	bl	ae4 <call_range_val(unsigned int)>
     afc:	f85d fb04 	ldr.w	pc, [sp], #4

00000b00 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     b00:	4a03      	ldr	r2, [pc, #12]	; (b10 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     b02:	6853      	ldr	r3, [r2, #4]
     b04:	ea23 0000 	bic.w	r0, r3, r0
     b08:	4308      	orrs	r0, r1
     b0a:	6050      	str	r0, [r2, #4]
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	200226c0 	.word	0x200226c0

00000b14 <call_range_ref(unsigned int)>:
     b14:	b500      	push	{lr}
     b16:	0301      	lsls	r1, r0, #12
     b18:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     b1c:	f7ff fffe 	bl	b00 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     b20:	f85d fb04 	ldr.w	pc, [sp], #4

00000b24 <call_range_ref_port()>:
     b24:	b500      	push	{lr}
     b26:	200c      	movs	r0, #12
     b28:	f7ff fffe 	bl	b14 <call_range_ref(unsigned int)>
     b2c:	f85d fb04 	ldr.w	pc, [sp], #4

00000b30 <check_array_range_pass(unsigned int)>:
     b30:	2816      	cmp	r0, #22
     b32:	4b03      	ldr	r3, [pc, #12]	; (b40 <check_array_range_pass(unsigned int)+0x10>)
     b34:	bf94      	ite	ls
     b36:	227f      	movls	r2, #127	; 0x7f
     b38:	2283      	movhi	r2, #131	; 0x83
     b3a:	62da      	str	r2, [r3, #44]	; 0x2c
     b3c:	4770      	bx	lr
     b3e:	bf00      	nop
     b40:	20022500 	.word	0x20022500

00000b44 <check_array_range_fail(unsigned int)>:
     b44:	2816      	cmp	r0, #22
     b46:	4b03      	ldr	r3, [pc, #12]	; (b54 <check_array_range_fail(unsigned int)+0x10>)
     b48:	bf94      	ite	ls
     b4a:	2295      	movls	r2, #149	; 0x95
     b4c:	2297      	movhi	r2, #151	; 0x97
     b4e:	62da      	str	r2, [r3, #44]	; 0x2c
     b50:	4770      	bx	lr
     b52:	bf00      	nop
     b54:	20022500 	.word	0x20022500

00000b58 <check_bits_range_pass(unsigned int)>:
     b58:	280f      	cmp	r0, #15
     b5a:	4b03      	ldr	r3, [pc, #12]	; (b68 <check_bits_range_pass(unsigned int)+0x10>)
     b5c:	bf94      	ite	ls
     b5e:	229d      	movls	r2, #157	; 0x9d
     b60:	22a3      	movhi	r2, #163	; 0xa3
     b62:	62da      	str	r2, [r3, #44]	; 0x2c
     b64:	4770      	bx	lr
     b66:	bf00      	nop
     b68:	20022500 	.word	0x20022500

00000b6c <check_bits_range_fail(unsigned int)>:
     b6c:	280f      	cmp	r0, #15
     b6e:	4b03      	ldr	r3, [pc, #12]	; (b7c <check_bits_range_fail(unsigned int)+0x10>)
     b70:	bf94      	ite	ls
     b72:	22a7      	movls	r2, #167	; 0xa7
     b74:	22ad      	movhi	r2, #173	; 0xad
     b76:	62da      	str	r2, [r3, #44]	; 0x2c
     b78:	4770      	bx	lr
     b7a:	bf00      	nop
     b7c:	20022500 	.word	0x20022500

00000b80 <check_mskd_range_pass(unsigned int)>:
     b80:	281f      	cmp	r0, #31
     b82:	4b03      	ldr	r3, [pc, #12]	; (b90 <check_mskd_range_pass(unsigned int)+0x10>)
     b84:	bf94      	ite	ls
     b86:	22b3      	movls	r2, #179	; 0xb3
     b88:	22b5      	movhi	r2, #181	; 0xb5
     b8a:	62da      	str	r2, [r3, #44]	; 0x2c
     b8c:	4770      	bx	lr
     b8e:	bf00      	nop
     b90:	20022500 	.word	0x20022500

00000b94 <check_mskd_range_fail(unsigned int)>:
     b94:	281f      	cmp	r0, #31
     b96:	4b03      	ldr	r3, [pc, #12]	; (ba4 <check_mskd_range_fail(unsigned int)+0x10>)
     b98:	bf94      	ite	ls
     b9a:	22bf      	movls	r2, #191	; 0xbf
     b9c:	22c1      	movhi	r2, #193	; 0xc1
     b9e:	62da      	str	r2, [r3, #44]	; 0x2c
     ba0:	4770      	bx	lr
     ba2:	bf00      	nop
     ba4:	20022500 	.word	0x20022500

00000ba8 <bits_extract_ne()>:
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <bits_extract_ne()+0x18>)
     baa:	2220      	movs	r2, #32
     bac:	605a      	str	r2, [r3, #4]
     bae:	685b      	ldr	r3, [r3, #4]
     bb0:	4293      	cmp	r3, r2
     bb2:	4b03      	ldr	r3, [pc, #12]	; (bc0 <bits_extract_ne()+0x18>)
     bb4:	bf14      	ite	ne
     bb6:	2202      	movne	r2, #2
     bb8:	2204      	moveq	r2, #4
     bba:	605a      	str	r2, [r3, #4]
     bbc:	4770      	bx	lr
     bbe:	bf00      	nop
     bc0:	200226c0 	.word	0x200226c0

00000bc4 <mskd_extract_geq()>:
     bc4:	4b05      	ldr	r3, [pc, #20]	; (bdc <mskd_extract_geq()+0x18>)
     bc6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     bca:	605a      	str	r2, [r3, #4]
     bcc:	685b      	ldr	r3, [r3, #4]
     bce:	4293      	cmp	r3, r2
     bd0:	4b03      	ldr	r3, [pc, #12]	; (be0 <mskd_extract_geq()+0x1c>)
     bd2:	bf2c      	ite	cs
     bd4:	2220      	movcs	r2, #32
     bd6:	2240      	movcc	r2, #64	; 0x40
     bd8:	605a      	str	r2, [r3, #4]
     bda:	4770      	bx	lr
     bdc:	20022620 	.word	0x20022620
     be0:	200226c0 	.word	0x200226c0

00000be4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     be4:	4b04      	ldr	r3, [pc, #16]	; (bf8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     be6:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     bea:	605a      	str	r2, [r3, #4]
     bec:	685b      	ldr	r3, [r3, #4]
     bee:	4018      	ands	r0, r3
     bf0:	40c8      	lsrs	r0, r1
     bf2:	4b02      	ldr	r3, [pc, #8]	; (bfc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     bf4:	62d8      	str	r0, [r3, #44]	; 0x2c
     bf6:	4770      	bx	lr
     bf8:	20022620 	.word	0x20022620
     bfc:	20022500 	.word	0x20022500

00000c00 <call_shifted_const_val()>:
     c00:	b500      	push	{lr}
     c02:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c06:	2119      	movs	r1, #25
     c08:	f7ff fffe 	bl	be4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c0c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c10 <call_shifted_var_val()>:
     c10:	b500      	push	{lr}
     c12:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c16:	2119      	movs	r1, #25
     c18:	f7ff fffe 	bl	be4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c20 <call_shifted_global_val()>:
     c20:	b500      	push	{lr}
     c22:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c26:	2119      	movs	r1, #25
     c28:	f7ff fffe 	bl	be4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c2c:	f85d fb04 	ldr.w	pc, [sp], #4

00000c30 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     c30:	4b05      	ldr	r3, [pc, #20]	; (c48 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     c32:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     c36:	605a      	str	r2, [r3, #4]
     c38:	685b      	ldr	r3, [r3, #4]
     c3a:	6802      	ldr	r2, [r0, #0]
     c3c:	4013      	ands	r3, r2
     c3e:	6842      	ldr	r2, [r0, #4]
     c40:	40d3      	lsrs	r3, r2
     c42:	4a02      	ldr	r2, [pc, #8]	; (c4c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     c44:	62d3      	str	r3, [r2, #44]	; 0x2c
     c46:	4770      	bx	lr
     c48:	20022620 	.word	0x20022620
     c4c:	20022500 	.word	0x20022500

00000c50 <call_shifted_const_ref()>:
     c50:	b500      	push	{lr}
     c52:	b082      	sub	sp, #8
     c54:	4b05      	ldr	r3, [pc, #20]	; (c6c <call_shifted_const_ref()+0x1c>)
     c56:	f103 0308 	add.w	r3, r3, #8
     c5a:	cb0c      	ldmia	r3, {r2, r3}
     c5c:	e88d 000c 	stmia.w	sp, {r2, r3}
     c60:	4668      	mov	r0, sp
     c62:	f7ff fffe 	bl	c30 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c66:	b002      	add	sp, #8
     c68:	f85d fb04 	ldr.w	pc, [sp], #4
     c6c:	00000000 	.word	0x00000000

00000c70 <call_shifted_var_ref()>:
     c70:	b500      	push	{lr}
     c72:	b082      	sub	sp, #8
     c74:	4b05      	ldr	r3, [pc, #20]	; (c8c <call_shifted_var_ref()+0x1c>)
     c76:	f103 0310 	add.w	r3, r3, #16
     c7a:	cb0c      	ldmia	r3, {r2, r3}
     c7c:	e88d 000c 	stmia.w	sp, {r2, r3}
     c80:	4668      	mov	r0, sp
     c82:	f7ff fffe 	bl	c30 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c86:	b002      	add	sp, #8
     c88:	f85d fb04 	ldr.w	pc, [sp], #4
     c8c:	00000000 	.word	0x00000000

00000c90 <call_shifted_global_ref()>:
     c90:	b500      	push	{lr}
     c92:	b082      	sub	sp, #8
     c94:	4b05      	ldr	r3, [pc, #20]	; (cac <call_shifted_global_ref()+0x1c>)
     c96:	f103 0308 	add.w	r3, r3, #8
     c9a:	cb0c      	ldmia	r3, {r2, r3}
     c9c:	e88d 000c 	stmia.w	sp, {r2, r3}
     ca0:	4668      	mov	r0, sp
     ca2:	f7ff fffe 	bl	c30 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     ca6:	b002      	add	sp, #8
     ca8:	f85d fb04 	ldr.w	pc, [sp], #4
     cac:	00000000 	.word	0x00000000

00000cb0 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     cb0:	f010 0f40 	tst.w	r0, #64	; 0x40
     cb4:	4b02      	ldr	r3, [pc, #8]	; (cc0 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     cb6:	bf14      	ite	ne
     cb8:	2202      	movne	r2, #2
     cba:	2204      	moveq	r2, #4
     cbc:	605a      	str	r2, [r3, #4]
     cbe:	4770      	bx	lr
     cc0:	200226c0 	.word	0x200226c0

00000cc4 <call_copy_bits_val()>:
     cc4:	b500      	push	{lr}
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <call_copy_bits_val()+0x14>)
     cc8:	2240      	movs	r2, #64	; 0x40
     cca:	605a      	str	r2, [r3, #4]
     ccc:	6858      	ldr	r0, [r3, #4]
     cce:	f7ff fffe 	bl	cb0 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     cd2:	f85d fb04 	ldr.w	pc, [sp], #4
     cd6:	bf00      	nop
     cd8:	200226c0 	.word	0x200226c0

00000cdc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     cdc:	6803      	ldr	r3, [r0, #0]
     cde:	f013 0f40 	tst.w	r3, #64	; 0x40
     ce2:	4b03      	ldr	r3, [pc, #12]	; (cf0 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
     ce4:	bf14      	ite	ne
     ce6:	2202      	movne	r2, #2
     ce8:	2204      	moveq	r2, #4
     cea:	605a      	str	r2, [r3, #4]
     cec:	4770      	bx	lr
     cee:	bf00      	nop
     cf0:	200226c0 	.word	0x200226c0

00000cf4 <call_copy_bits_ref()>:
     cf4:	b500      	push	{lr}
     cf6:	b081      	sub	sp, #4
     cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <call_copy_bits_ref()+0x1c>)
     cfa:	2240      	movs	r2, #64	; 0x40
     cfc:	605a      	str	r2, [r3, #4]
     cfe:	685b      	ldr	r3, [r3, #4]
     d00:	9300      	str	r3, [sp, #0]
     d02:	4668      	mov	r0, sp
     d04:	f7ff fffe 	bl	cdc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     d08:	b001      	add	sp, #4
     d0a:	f85d fb04 	ldr.w	pc, [sp], #4
     d0e:	bf00      	nop
     d10:	200226c0 	.word	0x200226c0

00000d14 <run>:
     d14:	b530      	push	{r4, r5, lr}
     d16:	4bb0      	ldr	r3, [pc, #704]	; (fd8 <run+0x2c4>)
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	b923      	cbnz	r3, d26 <run+0x12>
     d1c:	4bae      	ldr	r3, [pc, #696]	; (fd8 <run+0x2c4>)
     d1e:	4aaf      	ldr	r2, [pc, #700]	; (fdc <run+0x2c8>)
     d20:	609a      	str	r2, [r3, #8]
     d22:	2201      	movs	r2, #1
     d24:	701a      	strb	r2, [r3, #0]
     d26:	4bac      	ldr	r3, [pc, #688]	; (fd8 <run+0x2c4>)
     d28:	7b1b      	ldrb	r3, [r3, #12]
     d2a:	b923      	cbnz	r3, d36 <run+0x22>
     d2c:	4baa      	ldr	r3, [pc, #680]	; (fd8 <run+0x2c4>)
     d2e:	4aac      	ldr	r2, [pc, #688]	; (fe0 <run+0x2cc>)
     d30:	615a      	str	r2, [r3, #20]
     d32:	2201      	movs	r2, #1
     d34:	731a      	strb	r2, [r3, #12]
     d36:	4ba8      	ldr	r3, [pc, #672]	; (fd8 <run+0x2c4>)
     d38:	7e1b      	ldrb	r3, [r3, #24]
     d3a:	b923      	cbnz	r3, d46 <run+0x32>
     d3c:	4ba6      	ldr	r3, [pc, #664]	; (fd8 <run+0x2c4>)
     d3e:	4aa9      	ldr	r2, [pc, #676]	; (fe4 <run+0x2d0>)
     d40:	621a      	str	r2, [r3, #32]
     d42:	2201      	movs	r2, #1
     d44:	761a      	strb	r2, [r3, #24]
     d46:	4ca4      	ldr	r4, [pc, #656]	; (fd8 <run+0x2c4>)
     d48:	2200      	movs	r2, #0
     d4a:	68a1      	ldr	r1, [r4, #8]
     d4c:	48a6      	ldr	r0, [pc, #664]	; (fe8 <run+0x2d4>)
     d4e:	f7ff fffe 	bl	0 <do_test>
     d52:	2201      	movs	r2, #1
     d54:	68a1      	ldr	r1, [r4, #8]
     d56:	48a5      	ldr	r0, [pc, #660]	; (fec <run+0x2d8>)
     d58:	f7ff fffe 	bl	0 <do_test>
     d5c:	2202      	movs	r2, #2
     d5e:	68a1      	ldr	r1, [r4, #8]
     d60:	48a3      	ldr	r0, [pc, #652]	; (ff0 <run+0x2dc>)
     d62:	f7ff fffe 	bl	0 <do_test>
     d66:	2203      	movs	r2, #3
     d68:	68a1      	ldr	r1, [r4, #8]
     d6a:	48a2      	ldr	r0, [pc, #648]	; (ff4 <run+0x2e0>)
     d6c:	f7ff fffe 	bl	0 <do_test>
     d70:	2204      	movs	r2, #4
     d72:	68a1      	ldr	r1, [r4, #8]
     d74:	48a0      	ldr	r0, [pc, #640]	; (ff8 <run+0x2e4>)
     d76:	f7ff fffe 	bl	0 <do_test>
     d7a:	2205      	movs	r2, #5
     d7c:	68a1      	ldr	r1, [r4, #8]
     d7e:	489f      	ldr	r0, [pc, #636]	; (ffc <run+0x2e8>)
     d80:	f7ff fffe 	bl	0 <do_test>
     d84:	2206      	movs	r2, #6
     d86:	68a1      	ldr	r1, [r4, #8]
     d88:	489d      	ldr	r0, [pc, #628]	; (1000 <run+0x2ec>)
     d8a:	f7ff fffe 	bl	0 <do_test>
     d8e:	2207      	movs	r2, #7
     d90:	68a1      	ldr	r1, [r4, #8]
     d92:	489c      	ldr	r0, [pc, #624]	; (1004 <run+0x2f0>)
     d94:	f7ff fffe 	bl	0 <do_test>
     d98:	2208      	movs	r2, #8
     d9a:	68a1      	ldr	r1, [r4, #8]
     d9c:	489a      	ldr	r0, [pc, #616]	; (1008 <run+0x2f4>)
     d9e:	f7ff fffe 	bl	0 <do_test>
     da2:	2209      	movs	r2, #9
     da4:	68a1      	ldr	r1, [r4, #8]
     da6:	4899      	ldr	r0, [pc, #612]	; (100c <run+0x2f8>)
     da8:	f7ff fffe 	bl	0 <do_test>
     dac:	220a      	movs	r2, #10
     dae:	68a1      	ldr	r1, [r4, #8]
     db0:	4897      	ldr	r0, [pc, #604]	; (1010 <run+0x2fc>)
     db2:	f7ff fffe 	bl	0 <do_test>
     db6:	220b      	movs	r2, #11
     db8:	68a1      	ldr	r1, [r4, #8]
     dba:	4896      	ldr	r0, [pc, #600]	; (1014 <run+0x300>)
     dbc:	f7ff fffe 	bl	0 <do_test>
     dc0:	220c      	movs	r2, #12
     dc2:	68a1      	ldr	r1, [r4, #8]
     dc4:	4894      	ldr	r0, [pc, #592]	; (1018 <run+0x304>)
     dc6:	f7ff fffe 	bl	0 <do_test>
     dca:	220d      	movs	r2, #13
     dcc:	68a1      	ldr	r1, [r4, #8]
     dce:	4893      	ldr	r0, [pc, #588]	; (101c <run+0x308>)
     dd0:	f7ff fffe 	bl	0 <do_test>
     dd4:	220e      	movs	r2, #14
     dd6:	68a1      	ldr	r1, [r4, #8]
     dd8:	4891      	ldr	r0, [pc, #580]	; (1020 <run+0x30c>)
     dda:	f7ff fffe 	bl	0 <do_test>
     dde:	220f      	movs	r2, #15
     de0:	68a1      	ldr	r1, [r4, #8]
     de2:	4890      	ldr	r0, [pc, #576]	; (1024 <run+0x310>)
     de4:	f7ff fffe 	bl	0 <do_test>
     de8:	2210      	movs	r2, #16
     dea:	68a1      	ldr	r1, [r4, #8]
     dec:	488e      	ldr	r0, [pc, #568]	; (1028 <run+0x314>)
     dee:	f7ff fffe 	bl	0 <do_test>
     df2:	2211      	movs	r2, #17
     df4:	68a1      	ldr	r1, [r4, #8]
     df6:	488d      	ldr	r0, [pc, #564]	; (102c <run+0x318>)
     df8:	f7ff fffe 	bl	0 <do_test>
     dfc:	2212      	movs	r2, #18
     dfe:	68a1      	ldr	r1, [r4, #8]
     e00:	488b      	ldr	r0, [pc, #556]	; (1030 <run+0x31c>)
     e02:	f7ff fffe 	bl	0 <do_test>
     e06:	2213      	movs	r2, #19
     e08:	68a1      	ldr	r1, [r4, #8]
     e0a:	488a      	ldr	r0, [pc, #552]	; (1034 <run+0x320>)
     e0c:	f7ff fffe 	bl	0 <do_test>
     e10:	2214      	movs	r2, #20
     e12:	68a1      	ldr	r1, [r4, #8]
     e14:	4888      	ldr	r0, [pc, #544]	; (1038 <run+0x324>)
     e16:	f7ff fffe 	bl	0 <do_test>
     e1a:	2215      	movs	r2, #21
     e1c:	68a1      	ldr	r1, [r4, #8]
     e1e:	4887      	ldr	r0, [pc, #540]	; (103c <run+0x328>)
     e20:	f7ff fffe 	bl	0 <do_test>
     e24:	2216      	movs	r2, #22
     e26:	68a1      	ldr	r1, [r4, #8]
     e28:	4885      	ldr	r0, [pc, #532]	; (1040 <run+0x32c>)
     e2a:	f7ff fffe 	bl	0 <do_test>
     e2e:	2217      	movs	r2, #23
     e30:	68a1      	ldr	r1, [r4, #8]
     e32:	4884      	ldr	r0, [pc, #528]	; (1044 <run+0x330>)
     e34:	f7ff fffe 	bl	0 <do_test>
     e38:	2218      	movs	r2, #24
     e3a:	68a1      	ldr	r1, [r4, #8]
     e3c:	4882      	ldr	r0, [pc, #520]	; (1048 <run+0x334>)
     e3e:	f7ff fffe 	bl	0 <do_test>
     e42:	2219      	movs	r2, #25
     e44:	68a1      	ldr	r1, [r4, #8]
     e46:	4881      	ldr	r0, [pc, #516]	; (104c <run+0x338>)
     e48:	f7ff fffe 	bl	0 <do_test>
     e4c:	221a      	movs	r2, #26
     e4e:	68a1      	ldr	r1, [r4, #8]
     e50:	487f      	ldr	r0, [pc, #508]	; (1050 <run+0x33c>)
     e52:	f7ff fffe 	bl	0 <do_test>
     e56:	221b      	movs	r2, #27
     e58:	68a1      	ldr	r1, [r4, #8]
     e5a:	487e      	ldr	r0, [pc, #504]	; (1054 <run+0x340>)
     e5c:	f7ff fffe 	bl	0 <do_test>
     e60:	221c      	movs	r2, #28
     e62:	68a1      	ldr	r1, [r4, #8]
     e64:	487c      	ldr	r0, [pc, #496]	; (1058 <run+0x344>)
     e66:	f7ff fffe 	bl	0 <do_test>
     e6a:	221d      	movs	r2, #29
     e6c:	68a1      	ldr	r1, [r4, #8]
     e6e:	487b      	ldr	r0, [pc, #492]	; (105c <run+0x348>)
     e70:	f7ff fffe 	bl	0 <do_test>
     e74:	221e      	movs	r2, #30
     e76:	68a1      	ldr	r1, [r4, #8]
     e78:	4879      	ldr	r0, [pc, #484]	; (1060 <run+0x34c>)
     e7a:	f7ff fffe 	bl	0 <do_test>
     e7e:	221f      	movs	r2, #31
     e80:	68a1      	ldr	r1, [r4, #8]
     e82:	4878      	ldr	r0, [pc, #480]	; (1064 <run+0x350>)
     e84:	f7ff fffe 	bl	0 <do_test>
     e88:	2220      	movs	r2, #32
     e8a:	68a1      	ldr	r1, [r4, #8]
     e8c:	4876      	ldr	r0, [pc, #472]	; (1068 <run+0x354>)
     e8e:	f7ff fffe 	bl	0 <do_test>
     e92:	2221      	movs	r2, #33	; 0x21
     e94:	68a1      	ldr	r1, [r4, #8]
     e96:	4875      	ldr	r0, [pc, #468]	; (106c <run+0x358>)
     e98:	f7ff fffe 	bl	0 <do_test>
     e9c:	2222      	movs	r2, #34	; 0x22
     e9e:	68a1      	ldr	r1, [r4, #8]
     ea0:	4873      	ldr	r0, [pc, #460]	; (1070 <run+0x35c>)
     ea2:	f7ff fffe 	bl	0 <do_test>
     ea6:	2223      	movs	r2, #35	; 0x23
     ea8:	68a1      	ldr	r1, [r4, #8]
     eaa:	4872      	ldr	r0, [pc, #456]	; (1074 <run+0x360>)
     eac:	f7ff fffe 	bl	0 <do_test>
     eb0:	2224      	movs	r2, #36	; 0x24
     eb2:	68a1      	ldr	r1, [r4, #8]
     eb4:	4870      	ldr	r0, [pc, #448]	; (1078 <run+0x364>)
     eb6:	f7ff fffe 	bl	0 <do_test>
     eba:	2225      	movs	r2, #37	; 0x25
     ebc:	6961      	ldr	r1, [r4, #20]
     ebe:	486f      	ldr	r0, [pc, #444]	; (107c <run+0x368>)
     ec0:	f7ff fffe 	bl	0 <do_test>
     ec4:	2226      	movs	r2, #38	; 0x26
     ec6:	6961      	ldr	r1, [r4, #20]
     ec8:	486d      	ldr	r0, [pc, #436]	; (1080 <run+0x36c>)
     eca:	f7ff fffe 	bl	0 <do_test>
     ece:	2227      	movs	r2, #39	; 0x27
     ed0:	6961      	ldr	r1, [r4, #20]
     ed2:	486c      	ldr	r0, [pc, #432]	; (1084 <run+0x370>)
     ed4:	f7ff fffe 	bl	0 <do_test>
     ed8:	2228      	movs	r2, #40	; 0x28
     eda:	68a1      	ldr	r1, [r4, #8]
     edc:	486a      	ldr	r0, [pc, #424]	; (1088 <run+0x374>)
     ede:	f7ff fffe 	bl	0 <do_test>
     ee2:	2229      	movs	r2, #41	; 0x29
     ee4:	68a1      	ldr	r1, [r4, #8]
     ee6:	4869      	ldr	r0, [pc, #420]	; (108c <run+0x378>)
     ee8:	f7ff fffe 	bl	0 <do_test>
     eec:	222a      	movs	r2, #42	; 0x2a
     eee:	68a1      	ldr	r1, [r4, #8]
     ef0:	4867      	ldr	r0, [pc, #412]	; (1090 <run+0x37c>)
     ef2:	f7ff fffe 	bl	0 <do_test>
     ef6:	222b      	movs	r2, #43	; 0x2b
     ef8:	68a1      	ldr	r1, [r4, #8]
     efa:	4866      	ldr	r0, [pc, #408]	; (1094 <run+0x380>)
     efc:	f7ff fffe 	bl	0 <do_test>
     f00:	222c      	movs	r2, #44	; 0x2c
     f02:	68a1      	ldr	r1, [r4, #8]
     f04:	4864      	ldr	r0, [pc, #400]	; (1098 <run+0x384>)
     f06:	f7ff fffe 	bl	0 <do_test>
     f0a:	222d      	movs	r2, #45	; 0x2d
     f0c:	6a21      	ldr	r1, [r4, #32]
     f0e:	4863      	ldr	r0, [pc, #396]	; (109c <run+0x388>)
     f10:	f7ff fffe 	bl	0 <do_test>
     f14:	222e      	movs	r2, #46	; 0x2e
     f16:	68a1      	ldr	r1, [r4, #8]
     f18:	4861      	ldr	r0, [pc, #388]	; (10a0 <run+0x38c>)
     f1a:	f7ff fffe 	bl	0 <do_test>
     f1e:	222f      	movs	r2, #47	; 0x2f
     f20:	68a1      	ldr	r1, [r4, #8]
     f22:	4860      	ldr	r0, [pc, #384]	; (10a4 <run+0x390>)
     f24:	f7ff fffe 	bl	0 <do_test>
     f28:	2230      	movs	r2, #48	; 0x30
     f2a:	68a1      	ldr	r1, [r4, #8]
     f2c:	485e      	ldr	r0, [pc, #376]	; (10a8 <run+0x394>)
     f2e:	f7ff fffe 	bl	0 <do_test>
     f32:	2231      	movs	r2, #49	; 0x31
     f34:	68a1      	ldr	r1, [r4, #8]
     f36:	485d      	ldr	r0, [pc, #372]	; (10ac <run+0x398>)
     f38:	f7ff fffe 	bl	0 <do_test>
     f3c:	2232      	movs	r2, #50	; 0x32
     f3e:	68a1      	ldr	r1, [r4, #8]
     f40:	485b      	ldr	r0, [pc, #364]	; (10b0 <run+0x39c>)
     f42:	f7ff fffe 	bl	0 <do_test>
     f46:	2233      	movs	r2, #51	; 0x33
     f48:	68a1      	ldr	r1, [r4, #8]
     f4a:	485a      	ldr	r0, [pc, #360]	; (10b4 <run+0x3a0>)
     f4c:	f7ff fffe 	bl	0 <do_test>
     f50:	2234      	movs	r2, #52	; 0x34
     f52:	68a1      	ldr	r1, [r4, #8]
     f54:	4858      	ldr	r0, [pc, #352]	; (10b8 <run+0x3a4>)
     f56:	f7ff fffe 	bl	0 <do_test>
     f5a:	2235      	movs	r2, #53	; 0x35
     f5c:	68a1      	ldr	r1, [r4, #8]
     f5e:	4857      	ldr	r0, [pc, #348]	; (10bc <run+0x3a8>)
     f60:	f7ff fffe 	bl	0 <do_test>
     f64:	2236      	movs	r2, #54	; 0x36
     f66:	68a1      	ldr	r1, [r4, #8]
     f68:	4855      	ldr	r0, [pc, #340]	; (10c0 <run+0x3ac>)
     f6a:	f7ff fffe 	bl	0 <do_test>
     f6e:	2237      	movs	r2, #55	; 0x37
     f70:	68a1      	ldr	r1, [r4, #8]
     f72:	4854      	ldr	r0, [pc, #336]	; (10c4 <run+0x3b0>)
     f74:	f7ff fffe 	bl	0 <do_test>
     f78:	2238      	movs	r2, #56	; 0x38
     f7a:	68a1      	ldr	r1, [r4, #8]
     f7c:	4852      	ldr	r0, [pc, #328]	; (10c8 <run+0x3b4>)
     f7e:	f7ff fffe 	bl	0 <do_test>
     f82:	2239      	movs	r2, #57	; 0x39
     f84:	68a1      	ldr	r1, [r4, #8]
     f86:	4851      	ldr	r0, [pc, #324]	; (10cc <run+0x3b8>)
     f88:	f7ff fffe 	bl	0 <do_test>
     f8c:	223a      	movs	r2, #58	; 0x3a
     f8e:	68a1      	ldr	r1, [r4, #8]
     f90:	484f      	ldr	r0, [pc, #316]	; (10d0 <run+0x3bc>)
     f92:	f7ff fffe 	bl	0 <do_test>
     f96:	223b      	movs	r2, #59	; 0x3b
     f98:	68a1      	ldr	r1, [r4, #8]
     f9a:	484e      	ldr	r0, [pc, #312]	; (10d4 <run+0x3c0>)
     f9c:	f7ff fffe 	bl	0 <do_test>
     fa0:	223c      	movs	r2, #60	; 0x3c
     fa2:	68a1      	ldr	r1, [r4, #8]
     fa4:	484c      	ldr	r0, [pc, #304]	; (10d8 <run+0x3c4>)
     fa6:	f7ff fffe 	bl	0 <do_test>
     faa:	223d      	movs	r2, #61	; 0x3d
     fac:	68a1      	ldr	r1, [r4, #8]
     fae:	484b      	ldr	r0, [pc, #300]	; (10dc <run+0x3c8>)
     fb0:	f7ff fffe 	bl	0 <do_test>
     fb4:	223e      	movs	r2, #62	; 0x3e
     fb6:	68a1      	ldr	r1, [r4, #8]
     fb8:	4849      	ldr	r0, [pc, #292]	; (10e0 <run+0x3cc>)
     fba:	f7ff fffe 	bl	0 <do_test>
     fbe:	223f      	movs	r2, #63	; 0x3f
     fc0:	68a1      	ldr	r1, [r4, #8]
     fc2:	4848      	ldr	r0, [pc, #288]	; (10e4 <run+0x3d0>)
     fc4:	f7ff fffe 	bl	0 <do_test>
     fc8:	2240      	movs	r2, #64	; 0x40
     fca:	68a1      	ldr	r1, [r4, #8]
     fcc:	4846      	ldr	r0, [pc, #280]	; (10e8 <run+0x3d4>)
     fce:	f7ff fffe 	bl	0 <do_test>
     fd2:	2241      	movs	r2, #65	; 0x41
     fd4:	68a1      	ldr	r1, [r4, #8]
     fd6:	e089      	b.n	10ec <run+0x3d8>
     fd8:	00000000 	.word	0x00000000
     fdc:	200226c4 	.word	0x200226c4
     fe0:	20022624 	.word	0x20022624
     fe4:	2002252c 	.word	0x2002252c
	...
    10ec:	4884      	ldr	r0, [pc, #528]	; (214 <do_test+0x214>)
    10ee:	f7ff fffe 	bl	0 <do_test>
    10f2:	2242      	movs	r2, #66	; 0x42
    10f4:	6961      	ldr	r1, [r4, #20]
    10f6:	4883      	ldr	r0, [pc, #524]	; (1304 <run+0x5f0>)
    10f8:	f7ff fffe 	bl	0 <do_test>
    10fc:	2243      	movs	r2, #67	; 0x43
    10fe:	6961      	ldr	r1, [r4, #20]
    1100:	4881      	ldr	r0, [pc, #516]	; (1308 <run+0x5f4>)
    1102:	f7ff fffe 	bl	0 <do_test>
    1106:	2244      	movs	r2, #68	; 0x44
    1108:	6961      	ldr	r1, [r4, #20]
    110a:	4880      	ldr	r0, [pc, #512]	; (130c <run+0x5f8>)
    110c:	f7ff fffe 	bl	0 <do_test>
    1110:	2245      	movs	r2, #69	; 0x45
    1112:	68a1      	ldr	r1, [r4, #8]
    1114:	487e      	ldr	r0, [pc, #504]	; (1310 <run+0x5fc>)
    1116:	f7ff fffe 	bl	0 <do_test>
    111a:	2246      	movs	r2, #70	; 0x46
    111c:	6a21      	ldr	r1, [r4, #32]
    111e:	487d      	ldr	r0, [pc, #500]	; (1314 <run+0x600>)
    1120:	f7ff fffe 	bl	0 <do_test>
    1124:	2247      	movs	r2, #71	; 0x47
    1126:	6a21      	ldr	r1, [r4, #32]
    1128:	487b      	ldr	r0, [pc, #492]	; (1318 <run+0x604>)
    112a:	f7ff fffe 	bl	0 <do_test>
    112e:	2248      	movs	r2, #72	; 0x48
    1130:	68a1      	ldr	r1, [r4, #8]
    1132:	487a      	ldr	r0, [pc, #488]	; (131c <run+0x608>)
    1134:	f7ff fffe 	bl	0 <do_test>
    1138:	2249      	movs	r2, #73	; 0x49
    113a:	68a1      	ldr	r1, [r4, #8]
    113c:	4878      	ldr	r0, [pc, #480]	; (1320 <run+0x60c>)
    113e:	f7ff fffe 	bl	0 <do_test>
    1142:	224a      	movs	r2, #74	; 0x4a
    1144:	6a21      	ldr	r1, [r4, #32]
    1146:	4877      	ldr	r0, [pc, #476]	; (1324 <run+0x610>)
    1148:	f7ff fffe 	bl	0 <do_test>
    114c:	224b      	movs	r2, #75	; 0x4b
    114e:	6a21      	ldr	r1, [r4, #32]
    1150:	4875      	ldr	r0, [pc, #468]	; (1328 <run+0x614>)
    1152:	f7ff fffe 	bl	0 <do_test>
    1156:	224c      	movs	r2, #76	; 0x4c
    1158:	68a1      	ldr	r1, [r4, #8]
    115a:	4874      	ldr	r0, [pc, #464]	; (132c <run+0x618>)
    115c:	f7ff fffe 	bl	0 <do_test>
    1160:	224d      	movs	r2, #77	; 0x4d
    1162:	68a1      	ldr	r1, [r4, #8]
    1164:	4872      	ldr	r0, [pc, #456]	; (1330 <run+0x61c>)
    1166:	f7ff fffe 	bl	0 <do_test>
    116a:	224e      	movs	r2, #78	; 0x4e
    116c:	68a1      	ldr	r1, [r4, #8]
    116e:	4871      	ldr	r0, [pc, #452]	; (1334 <run+0x620>)
    1170:	f7ff fffe 	bl	0 <do_test>
    1174:	224f      	movs	r2, #79	; 0x4f
    1176:	68a1      	ldr	r1, [r4, #8]
    1178:	486f      	ldr	r0, [pc, #444]	; (1338 <run+0x624>)
    117a:	f7ff fffe 	bl	0 <do_test>
    117e:	2250      	movs	r2, #80	; 0x50
    1180:	68a1      	ldr	r1, [r4, #8]
    1182:	486e      	ldr	r0, [pc, #440]	; (133c <run+0x628>)
    1184:	f7ff fffe 	bl	0 <do_test>
    1188:	2251      	movs	r2, #81	; 0x51
    118a:	68a1      	ldr	r1, [r4, #8]
    118c:	486c      	ldr	r0, [pc, #432]	; (1340 <run+0x62c>)
    118e:	f7ff fffe 	bl	0 <do_test>
    1192:	4d6c      	ldr	r5, [pc, #432]	; (1344 <run+0x630>)
    1194:	2252      	movs	r2, #82	; 0x52
    1196:	68a1      	ldr	r1, [r4, #8]
    1198:	4628      	mov	r0, r5
    119a:	f7ff fffe 	bl	0 <do_test>
    119e:	2253      	movs	r2, #83	; 0x53
    11a0:	68a1      	ldr	r1, [r4, #8]
    11a2:	4628      	mov	r0, r5
    11a4:	f7ff fffe 	bl	0 <do_test>
    11a8:	2254      	movs	r2, #84	; 0x54
    11aa:	68a1      	ldr	r1, [r4, #8]
    11ac:	4866      	ldr	r0, [pc, #408]	; (1348 <run+0x634>)
    11ae:	f7ff fffe 	bl	0 <do_test>
    11b2:	2255      	movs	r2, #85	; 0x55
    11b4:	68a1      	ldr	r1, [r4, #8]
    11b6:	4865      	ldr	r0, [pc, #404]	; (134c <run+0x638>)
    11b8:	f7ff fffe 	bl	0 <do_test>
    11bc:	2256      	movs	r2, #86	; 0x56
    11be:	68a1      	ldr	r1, [r4, #8]
    11c0:	4863      	ldr	r0, [pc, #396]	; (1350 <run+0x63c>)
    11c2:	f7ff fffe 	bl	0 <do_test>
    11c6:	4d63      	ldr	r5, [pc, #396]	; (1354 <run+0x640>)
    11c8:	2257      	movs	r2, #87	; 0x57
    11ca:	68a1      	ldr	r1, [r4, #8]
    11cc:	4628      	mov	r0, r5
    11ce:	f7ff fffe 	bl	0 <do_test>
    11d2:	2258      	movs	r2, #88	; 0x58
    11d4:	68a1      	ldr	r1, [r4, #8]
    11d6:	4860      	ldr	r0, [pc, #384]	; (1358 <run+0x644>)
    11d8:	f7ff fffe 	bl	0 <do_test>
    11dc:	2259      	movs	r2, #89	; 0x59
    11de:	68a1      	ldr	r1, [r4, #8]
    11e0:	4628      	mov	r0, r5
    11e2:	f7ff fffe 	bl	0 <do_test>
    11e6:	225a      	movs	r2, #90	; 0x5a
    11e8:	68a1      	ldr	r1, [r4, #8]
    11ea:	485c      	ldr	r0, [pc, #368]	; (135c <run+0x648>)
    11ec:	f7ff fffe 	bl	0 <do_test>
    11f0:	225b      	movs	r2, #91	; 0x5b
    11f2:	68a1      	ldr	r1, [r4, #8]
    11f4:	485a      	ldr	r0, [pc, #360]	; (1360 <run+0x64c>)
    11f6:	f7ff fffe 	bl	0 <do_test>
    11fa:	225c      	movs	r2, #92	; 0x5c
    11fc:	6a21      	ldr	r1, [r4, #32]
    11fe:	4859      	ldr	r0, [pc, #356]	; (1364 <run+0x650>)
    1200:	f7ff fffe 	bl	0 <do_test>
    1204:	225d      	movs	r2, #93	; 0x5d
    1206:	6a21      	ldr	r1, [r4, #32]
    1208:	4857      	ldr	r0, [pc, #348]	; (1368 <run+0x654>)
    120a:	f7ff fffe 	bl	0 <do_test>
    120e:	225e      	movs	r2, #94	; 0x5e
    1210:	68a1      	ldr	r1, [r4, #8]
    1212:	4856      	ldr	r0, [pc, #344]	; (136c <run+0x658>)
    1214:	f7ff fffe 	bl	0 <do_test>
    1218:	225f      	movs	r2, #95	; 0x5f
    121a:	6a21      	ldr	r1, [r4, #32]
    121c:	4854      	ldr	r0, [pc, #336]	; (1370 <run+0x65c>)
    121e:	f7ff fffe 	bl	0 <do_test>
    1222:	2260      	movs	r2, #96	; 0x60
    1224:	6a21      	ldr	r1, [r4, #32]
    1226:	4853      	ldr	r0, [pc, #332]	; (1374 <run+0x660>)
    1228:	f7ff fffe 	bl	0 <do_test>
    122c:	2261      	movs	r2, #97	; 0x61
    122e:	68a1      	ldr	r1, [r4, #8]
    1230:	4851      	ldr	r0, [pc, #324]	; (1378 <run+0x664>)
    1232:	f7ff fffe 	bl	0 <do_test>
    1236:	2262      	movs	r2, #98	; 0x62
    1238:	68a1      	ldr	r1, [r4, #8]
    123a:	4850      	ldr	r0, [pc, #320]	; (137c <run+0x668>)
    123c:	f7ff fffe 	bl	0 <do_test>
    1240:	2263      	movs	r2, #99	; 0x63
    1242:	68a1      	ldr	r1, [r4, #8]
    1244:	484e      	ldr	r0, [pc, #312]	; (1380 <run+0x66c>)
    1246:	f7ff fffe 	bl	0 <do_test>
    124a:	2264      	movs	r2, #100	; 0x64
    124c:	68a1      	ldr	r1, [r4, #8]
    124e:	484d      	ldr	r0, [pc, #308]	; (1384 <run+0x670>)
    1250:	f7ff fffe 	bl	0 <do_test>
    1254:	2265      	movs	r2, #101	; 0x65
    1256:	6a21      	ldr	r1, [r4, #32]
    1258:	484b      	ldr	r0, [pc, #300]	; (1388 <run+0x674>)
    125a:	f7ff fffe 	bl	0 <do_test>
    125e:	2266      	movs	r2, #102	; 0x66
    1260:	6a21      	ldr	r1, [r4, #32]
    1262:	484a      	ldr	r0, [pc, #296]	; (138c <run+0x678>)
    1264:	f7ff fffe 	bl	0 <do_test>
    1268:	2267      	movs	r2, #103	; 0x67
    126a:	6a21      	ldr	r1, [r4, #32]
    126c:	4848      	ldr	r0, [pc, #288]	; (1390 <run+0x67c>)
    126e:	f7ff fffe 	bl	0 <do_test>
    1272:	2268      	movs	r2, #104	; 0x68
    1274:	6a21      	ldr	r1, [r4, #32]
    1276:	4847      	ldr	r0, [pc, #284]	; (1394 <run+0x680>)
    1278:	f7ff fffe 	bl	0 <do_test>
    127c:	2269      	movs	r2, #105	; 0x69
    127e:	6a21      	ldr	r1, [r4, #32]
    1280:	4845      	ldr	r0, [pc, #276]	; (1398 <run+0x684>)
    1282:	f7ff fffe 	bl	0 <do_test>
    1286:	226a      	movs	r2, #106	; 0x6a
    1288:	6a21      	ldr	r1, [r4, #32]
    128a:	4844      	ldr	r0, [pc, #272]	; (139c <run+0x688>)
    128c:	f7ff fffe 	bl	0 <do_test>
    1290:	226b      	movs	r2, #107	; 0x6b
    1292:	68a1      	ldr	r1, [r4, #8]
    1294:	4842      	ldr	r0, [pc, #264]	; (13a0 <run+0x68c>)
    1296:	f7ff fffe 	bl	0 <do_test>
    129a:	226c      	movs	r2, #108	; 0x6c
    129c:	68a1      	ldr	r1, [r4, #8]
    129e:	4841      	ldr	r0, [pc, #260]	; (13a4 <run+0x690>)
    12a0:	f7ff fffe 	bl	0 <do_test>
    12a4:	226d      	movs	r2, #109	; 0x6d
    12a6:	68a1      	ldr	r1, [r4, #8]
    12a8:	483f      	ldr	r0, [pc, #252]	; (13a8 <run+0x694>)
    12aa:	f7ff fffe 	bl	0 <do_test>
    12ae:	226e      	movs	r2, #110	; 0x6e
    12b0:	68a1      	ldr	r1, [r4, #8]
    12b2:	483e      	ldr	r0, [pc, #248]	; (13ac <run+0x698>)
    12b4:	f7ff fffe 	bl	0 <do_test>
    12b8:	226f      	movs	r2, #111	; 0x6f
    12ba:	68a1      	ldr	r1, [r4, #8]
    12bc:	483c      	ldr	r0, [pc, #240]	; (13b0 <run+0x69c>)
    12be:	f7ff fffe 	bl	0 <do_test>
    12c2:	2270      	movs	r2, #112	; 0x70
    12c4:	68a1      	ldr	r1, [r4, #8]
    12c6:	483b      	ldr	r0, [pc, #236]	; (13b4 <run+0x6a0>)
    12c8:	f7ff fffe 	bl	0 <do_test>
    12cc:	2271      	movs	r2, #113	; 0x71
    12ce:	68a1      	ldr	r1, [r4, #8]
    12d0:	4839      	ldr	r0, [pc, #228]	; (13b8 <run+0x6a4>)
    12d2:	f7ff fffe 	bl	0 <do_test>
    12d6:	2272      	movs	r2, #114	; 0x72
    12d8:	68a1      	ldr	r1, [r4, #8]
    12da:	4838      	ldr	r0, [pc, #224]	; (13bc <run+0x6a8>)
    12dc:	f7ff fffe 	bl	0 <do_test>
    12e0:	2273      	movs	r2, #115	; 0x73
    12e2:	68a1      	ldr	r1, [r4, #8]
    12e4:	4836      	ldr	r0, [pc, #216]	; (13c0 <run+0x6ac>)
    12e6:	f7ff fffe 	bl	0 <do_test>
    12ea:	2274      	movs	r2, #116	; 0x74
    12ec:	68a1      	ldr	r1, [r4, #8]
    12ee:	4835      	ldr	r0, [pc, #212]	; (13c4 <run+0x6b0>)
    12f0:	f7ff fffe 	bl	0 <do_test>
    12f4:	2275      	movs	r2, #117	; 0x75
    12f6:	68a1      	ldr	r1, [r4, #8]
    12f8:	4833      	ldr	r0, [pc, #204]	; (13c8 <run+0x6b4>)
    12fa:	f7ff fffe 	bl	0 <do_test>
    12fe:	bd30      	pop	{r4, r5, pc}
	...

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	0000 0000                                   ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	0000 0000                                   ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	0000 0000                                   ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
