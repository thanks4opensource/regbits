
O2/regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	6853      	ldr	r3, [r2, #4]
     154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     158:	f023 0306 	bic.w	r3, r3, #6
     15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     160:	6053      	str	r3, [r2, #4]
     162:	4770      	bx	lr
     164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16a:	6853      	ldr	r3, [r2, #4]
     16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     170:	f023 0306 	bic.w	r3, r3, #6
     174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     178:	6053      	str	r3, [r2, #4]
     17a:	4770      	bx	lr
     17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
     180:	2260      	movs	r2, #96	; 0x60
     182:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
     18c:	2260      	movs	r2, #96	; 0x60
     18e:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
     198:	f44f 7242 	mov.w	r2, #776	; 0x308
     19c:	4b01      	ldr	r3, [pc, #4]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
     1a8:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ac:	4b01      	ldr	r3, [pc, #4]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
     1b8:	2222      	movs	r2, #34	; 0x22
     1ba:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
     1c4:	2222      	movs	r2, #34	; 0x22
     1c6:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
     1d0:	2244      	movs	r2, #68	; 0x44
     1d2:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
     1dc:	2244      	movs	r2, #68	; 0x44
     1de:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
     1e8:	2140      	movs	r1, #64	; 0x40
     1ea:	2201      	movs	r2, #1
     1ec:	4b01      	ldr	r3, [pc, #4]	; (1f4 <equ_bits_var()+0xc>)
     1ee:	6059      	str	r1, [r3, #4]
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
     1f8:	2102      	movs	r1, #2
     1fa:	f44f 72c0 	mov.w	r2, #384	; 0x180
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <equ_mskd_var()+0x10>)
     200:	6059      	str	r1, [r3, #4]
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
     20c:	2200      	movs	r2, #0
     20e:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21a:	4b05      	ldr	r3, [pc, #20]	; (230 <cmp_equ_zero()+0x24>)
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     224:	4b02      	ldr	r3, [pc, #8]	; (230 <cmp_equ_zero()+0x24>)
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20002480 	.word	0x20002480
     230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
     234:	2200      	movs	r2, #0
     236:	4b05      	ldr	r3, [pc, #20]	; (24c <cmp_neq_zero()+0x18>)
     238:	605a      	str	r2, [r3, #4]
     23a:	685a      	ldr	r2, [r3, #4]
     23c:	b112      	cbz	r2, 244 <cmp_neq_zero()+0x10>
     23e:	2204      	movs	r2, #4
     240:	605a      	str	r2, [r3, #4]
     242:	4770      	bx	lr
     244:	2220      	movs	r2, #32
     246:	605a      	str	r2, [r3, #4]
     248:	4770      	bx	lr
     24a:	bf00      	nop
     24c:	20002480 	.word	0x20002480

00000250 <cmp_equ_bits()>:
     250:	2240      	movs	r2, #64	; 0x40
     252:	4b06      	ldr	r3, [pc, #24]	; (26c <cmp_equ_bits()+0x1c>)
     254:	605a      	str	r2, [r3, #4]
     256:	685b      	ldr	r3, [r3, #4]
     258:	065b      	lsls	r3, r3, #25
     25a:	bf4c      	ite	mi
     25c:	f04f 52b0 	movmi.w	r2, #369098752	; 0x16000000
     260:	f04f 52d0 	movpl.w	r2, #436207616	; 0x1a000000
     264:	4b02      	ldr	r3, [pc, #8]	; (270 <cmp_equ_bits()+0x20>)
     266:	605a      	str	r2, [r3, #4]
     268:	4770      	bx	lr
     26a:	bf00      	nop
     26c:	20002480 	.word	0x20002480
     270:	200023e0 	.word	0x200023e0

00000274 <cmp_neq_bits()>:
     274:	2240      	movs	r2, #64	; 0x40
     276:	4b04      	ldr	r3, [pc, #16]	; (288 <cmp_neq_bits()+0x14>)
     278:	605a      	str	r2, [r3, #4]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	0652      	lsls	r2, r2, #25
     27e:	bf54      	ite	pl
     280:	2202      	movpl	r2, #2
     282:	2220      	movmi	r2, #32
     284:	605a      	str	r2, [r3, #4]
     286:	4770      	bx	lr
     288:	20002480 	.word	0x20002480

0000028c <cmp_equ_multi_bits()>:
     28c:	2260      	movs	r2, #96	; 0x60
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <cmp_equ_multi_bits()+0x1c>)
     290:	605a      	str	r2, [r3, #4]
     292:	685b      	ldr	r3, [r3, #4]
     294:	4013      	ands	r3, r2
     296:	4293      	cmp	r3, r2
     298:	bf0c      	ite	eq
     29a:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     29e:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2a2:	4b02      	ldr	r3, [pc, #8]	; (2ac <cmp_equ_multi_bits()+0x20>)
     2a4:	605a      	str	r2, [r3, #4]
     2a6:	4770      	bx	lr
     2a8:	20002480 	.word	0x20002480
     2ac:	200023e0 	.word	0x200023e0

000002b0 <cmp_neq_multi_bits()>:
     2b0:	2260      	movs	r2, #96	; 0x60
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <cmp_neq_multi_bits()+0x1c>)
     2b4:	605a      	str	r2, [r3, #4]
     2b6:	685b      	ldr	r3, [r3, #4]
     2b8:	4013      	ands	r3, r2
     2ba:	4293      	cmp	r3, r2
     2bc:	bf14      	ite	ne
     2be:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2c2:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2c6:	4b02      	ldr	r3, [pc, #8]	; (2d0 <cmp_neq_multi_bits()+0x20>)
     2c8:	605a      	str	r2, [r3, #4]
     2ca:	4770      	bx	lr
     2cc:	20002480 	.word	0x20002480
     2d0:	200023e0 	.word	0x200023e0

000002d4 <cmp_equ_mskd()>:
     2d4:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2d8:	4b08      	ldr	r3, [pc, #32]	; (2fc <cmp_equ_mskd()+0x28>)
     2da:	605a      	str	r2, [r3, #4]
     2dc:	685b      	ldr	r3, [r3, #4]
     2de:	4a08      	ldr	r2, [pc, #32]	; (300 <cmp_equ_mskd()+0x2c>)
     2e0:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2e4:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2e8:	6853      	ldr	r3, [r2, #4]
     2ea:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2ee:	bf0c      	ite	eq
     2f0:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2f4:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     2f8:	6053      	str	r3, [r2, #4]
     2fa:	4770      	bx	lr
     2fc:	20002480 	.word	0x20002480
     300:	200023e0 	.word	0x200023e0

00000304 <cmp_neq_mskd()>:
     304:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     308:	4b08      	ldr	r3, [pc, #32]	; (32c <cmp_neq_mskd()+0x28>)
     30a:	605a      	str	r2, [r3, #4]
     30c:	685a      	ldr	r2, [r3, #4]
     30e:	f402 32f8 	and.w	r2, r2, #126976	; 0x1f000
     312:	f5b2 3f88 	cmp.w	r2, #69632	; 0x11000
     316:	685a      	ldr	r2, [r3, #4]
     318:	bf1a      	itte	ne
     31a:	f022 0206 	bicne.w	r2, r2, #6
     31e:	f042 0204 	orrne.w	r2, r2, #4
     322:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
     326:	605a      	str	r2, [r3, #4]
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	20002480 	.word	0x20002480

00000330 <cmp_equ_reg()>:
     330:	2222      	movs	r2, #34	; 0x22
     332:	4b06      	ldr	r3, [pc, #24]	; (34c <cmp_equ_reg()+0x1c>)
     334:	605a      	str	r2, [r3, #4]
     336:	685b      	ldr	r3, [r3, #4]
     338:	4293      	cmp	r3, r2
     33a:	bf0c      	ite	eq
     33c:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     340:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     344:	4b02      	ldr	r3, [pc, #8]	; (350 <cmp_equ_reg()+0x20>)
     346:	605a      	str	r2, [r3, #4]
     348:	4770      	bx	lr
     34a:	bf00      	nop
     34c:	20002480 	.word	0x20002480
     350:	200023e0 	.word	0x200023e0

00000354 <cmp_neq_reg()>:
     354:	2222      	movs	r2, #34	; 0x22
     356:	4b04      	ldr	r3, [pc, #16]	; (368 <cmp_neq_reg()+0x14>)
     358:	605a      	str	r2, [r3, #4]
     35a:	685a      	ldr	r2, [r3, #4]
     35c:	2a22      	cmp	r2, #34	; 0x22
     35e:	bf14      	ite	ne
     360:	2202      	movne	r2, #2
     362:	2220      	moveq	r2, #32
     364:	605a      	str	r2, [r3, #4]
     366:	4770      	bx	lr
     368:	20002480 	.word	0x20002480

0000036c <constexpr_bits_array()>:
     36c:	2106      	movs	r1, #6
     36e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     372:	4b02      	ldr	r3, [pc, #8]	; (37c <constexpr_bits_array()+0x10>)
     374:	62d9      	str	r1, [r3, #44]	; 0x2c
     376:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     37a:	4770      	bx	lr
     37c:	200022c0 	.word	0x200022c0

00000380 <runtime_bits_array()>:
     380:	2303      	movs	r3, #3
     382:	2221      	movs	r2, #33	; 0x21
     384:	b081      	sub	sp, #4
     386:	9300      	str	r3, [sp, #0]
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	009b      	lsls	r3, r3, #2
     38c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
     390:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
     394:	621a      	str	r2, [r3, #32]
     396:	b001      	add	sp, #4
     398:	4770      	bx	lr
     39a:	bf00      	nop

0000039c <prescaler_low()>:
     39c:	2177      	movs	r1, #119	; 0x77
     39e:	4b04      	ldr	r3, [pc, #16]	; (3b0 <prescaler_low()+0x14>)
     3a0:	4a04      	ldr	r2, [pc, #16]	; (3b4 <prescaler_low()+0x18>)
     3a2:	6059      	str	r1, [r3, #4]
     3a4:	685b      	ldr	r3, [r3, #4]
     3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3aa:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ac:	4770      	bx	lr
     3ae:	bf00      	nop
     3b0:	200023e0 	.word	0x200023e0
     3b4:	200022c0 	.word	0x200022c0

000003b8 <prescaler_high()>:
     3b8:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
     3bc:	4b03      	ldr	r3, [pc, #12]	; (3cc <prescaler_high()+0x14>)
     3be:	4a04      	ldr	r2, [pc, #16]	; (3d0 <prescaler_high()+0x18>)
     3c0:	6059      	str	r1, [r3, #4]
     3c2:	685b      	ldr	r3, [r3, #4]
     3c4:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3c8:	62d3      	str	r3, [r2, #44]	; 0x2c
     3ca:	4770      	bx	lr
     3cc:	200023e0 	.word	0x200023e0
     3d0:	200022c0 	.word	0x200022c0

000003d4 <reg_mskd_lss()>:
     3d4:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3d8:	4b06      	ldr	r3, [pc, #24]	; (3f4 <reg_mskd_lss()+0x20>)
     3da:	605a      	str	r2, [r3, #4]
     3dc:	685b      	ldr	r3, [r3, #4]
     3de:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3e2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3e6:	bf34      	ite	cc
     3e8:	2202      	movcc	r2, #2
     3ea:	2204      	movcs	r2, #4
     3ec:	4b02      	ldr	r3, [pc, #8]	; (3f8 <reg_mskd_lss()+0x24>)
     3ee:	605a      	str	r2, [r3, #4]
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	200023e0 	.word	0x200023e0
     3f8:	20002480 	.word	0x20002480

000003fc <reg_mskd_leq()>:
     3fc:	f04f 5338 	mov.w	r3, #771751936	; 0x2e000000
     400:	4a0a      	ldr	r2, [pc, #40]	; (42c <reg_mskd_leq()+0x30>)
     402:	6053      	str	r3, [r2, #4]
     404:	6853      	ldr	r3, [r2, #4]
     406:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     40a:	f1b3 5f38 	cmp.w	r3, #771751936	; 0x2e000000
     40e:	d809      	bhi.n	424 <reg_mskd_leq()+0x28>
     410:	6853      	ldr	r3, [r2, #4]
     412:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     41a:	d803      	bhi.n	424 <reg_mskd_leq()+0x28>
     41c:	2202      	movs	r2, #2
     41e:	4b04      	ldr	r3, [pc, #16]	; (430 <reg_mskd_leq()+0x34>)
     420:	605a      	str	r2, [r3, #4]
     422:	4770      	bx	lr
     424:	2204      	movs	r2, #4
     426:	4b02      	ldr	r3, [pc, #8]	; (430 <reg_mskd_leq()+0x34>)
     428:	605a      	str	r2, [r3, #4]
     42a:	4770      	bx	lr
     42c:	200023e0 	.word	0x200023e0
     430:	20002480 	.word	0x20002480

00000434 <reg_mskd_gtr()>:
     434:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     438:	4b06      	ldr	r3, [pc, #24]	; (454 <reg_mskd_gtr()+0x20>)
     43a:	605a      	str	r2, [r3, #4]
     43c:	685b      	ldr	r3, [r3, #4]
     43e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     442:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     446:	bf8c      	ite	hi
     448:	2202      	movhi	r2, #2
     44a:	2204      	movls	r2, #4
     44c:	4b02      	ldr	r3, [pc, #8]	; (458 <reg_mskd_gtr()+0x24>)
     44e:	605a      	str	r2, [r3, #4]
     450:	4770      	bx	lr
     452:	bf00      	nop
     454:	200023e0 	.word	0x200023e0
     458:	20002480 	.word	0x20002480

0000045c <reg_mskd_geq()>:
     45c:	f04f 5308 	mov.w	r3, #570425344	; 0x22000000
     460:	4a0a      	ldr	r2, [pc, #40]	; (48c <reg_mskd_geq()+0x30>)
     462:	6053      	str	r3, [r2, #4]
     464:	6853      	ldr	r3, [r2, #4]
     466:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     46a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     46e:	d309      	bcc.n	484 <reg_mskd_geq()+0x28>
     470:	6853      	ldr	r3, [r2, #4]
     472:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     476:	f1b3 5f08 	cmp.w	r3, #570425344	; 0x22000000
     47a:	d303      	bcc.n	484 <reg_mskd_geq()+0x28>
     47c:	2202      	movs	r2, #2
     47e:	4b04      	ldr	r3, [pc, #16]	; (490 <reg_mskd_geq()+0x34>)
     480:	605a      	str	r2, [r3, #4]
     482:	4770      	bx	lr
     484:	2204      	movs	r2, #4
     486:	4b02      	ldr	r3, [pc, #8]	; (490 <reg_mskd_geq()+0x34>)
     488:	605a      	str	r2, [r3, #4]
     48a:	4770      	bx	lr
     48c:	200023e0 	.word	0x200023e0
     490:	20002480 	.word	0x20002480

00000494 <pos_cmp_eq()>:
     494:	2202      	movs	r2, #2
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <pos_cmp_eq()+0x8>)
     498:	605a      	str	r2, [r3, #4]
     49a:	4770      	bx	lr
     49c:	20002480 	.word	0x20002480

000004a0 <pos_cmp_ne()>:
     4a0:	2202      	movs	r2, #2
     4a2:	4b01      	ldr	r3, [pc, #4]	; (4a8 <pos_cmp_ne()+0x8>)
     4a4:	605a      	str	r2, [r3, #4]
     4a6:	4770      	bx	lr
     4a8:	20002480 	.word	0x20002480

000004ac <bits_extract_eq()>:
     4ac:	2240      	movs	r2, #64	; 0x40
     4ae:	4b04      	ldr	r3, [pc, #16]	; (4c0 <bits_extract_eq()+0x14>)
     4b0:	605a      	str	r2, [r3, #4]
     4b2:	685a      	ldr	r2, [r3, #4]
     4b4:	2a40      	cmp	r2, #64	; 0x40
     4b6:	bf0c      	ite	eq
     4b8:	2202      	moveq	r2, #2
     4ba:	2204      	movne	r2, #4
     4bc:	605a      	str	r2, [r3, #4]
     4be:	4770      	bx	lr
     4c0:	20002480 	.word	0x20002480

000004c4 <mskd_extract_eq()>:
     4c4:	2202      	movs	r2, #2
     4c6:	4b04      	ldr	r3, [pc, #16]	; (4d8 <mskd_extract_eq()+0x14>)
     4c8:	605a      	str	r2, [r3, #4]
     4ca:	685a      	ldr	r2, [r3, #4]
     4cc:	2a02      	cmp	r2, #2
     4ce:	bf0c      	ite	eq
     4d0:	2220      	moveq	r2, #32
     4d2:	2240      	movne	r2, #64	; 0x40
     4d4:	605a      	str	r2, [r3, #4]
     4d6:	4770      	bx	lr
     4d8:	20002480 	.word	0x20002480

000004dc <mskd_extract_ne()>:
     4dc:	2204      	movs	r2, #4
     4de:	4b04      	ldr	r3, [pc, #16]	; (4f0 <mskd_extract_ne()+0x14>)
     4e0:	605a      	str	r2, [r3, #4]
     4e2:	685a      	ldr	r2, [r3, #4]
     4e4:	2a04      	cmp	r2, #4
     4e6:	bf0c      	ite	eq
     4e8:	2240      	moveq	r2, #64	; 0x40
     4ea:	2220      	movne	r2, #32
     4ec:	605a      	str	r2, [r3, #4]
     4ee:	4770      	bx	lr
     4f0:	20002480 	.word	0x20002480

000004f4 <mskd_extract_lss()>:
     4f4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     4f8:	4b05      	ldr	r3, [pc, #20]	; (510 <mskd_extract_lss()+0x1c>)
     4fa:	605a      	str	r2, [r3, #4]
     4fc:	685b      	ldr	r3, [r3, #4]
     4fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     502:	bf34      	ite	cc
     504:	2220      	movcc	r2, #32
     506:	2240      	movcs	r2, #64	; 0x40
     508:	4b02      	ldr	r3, [pc, #8]	; (514 <mskd_extract_lss()+0x20>)
     50a:	605a      	str	r2, [r3, #4]
     50c:	4770      	bx	lr
     50e:	bf00      	nop
     510:	200023e0 	.word	0x200023e0
     514:	20002480 	.word	0x20002480

00000518 <mskd_extract_leq()>:
     518:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     51c:	4b04      	ldr	r3, [pc, #16]	; (530 <mskd_extract_leq()+0x18>)
     51e:	605a      	str	r2, [r3, #4]
     520:	685b      	ldr	r3, [r3, #4]
     522:	4293      	cmp	r3, r2
     524:	bf94      	ite	ls
     526:	2220      	movls	r2, #32
     528:	2240      	movhi	r2, #64	; 0x40
     52a:	4b02      	ldr	r3, [pc, #8]	; (534 <mskd_extract_leq()+0x1c>)
     52c:	605a      	str	r2, [r3, #4]
     52e:	4770      	bx	lr
     530:	200023e0 	.word	0x200023e0
     534:	20002480 	.word	0x20002480

00000538 <mskd_extract_gtr()>:
     538:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     53c:	4b05      	ldr	r3, [pc, #20]	; (554 <mskd_extract_gtr()+0x1c>)
     53e:	605a      	str	r2, [r3, #4]
     540:	685b      	ldr	r3, [r3, #4]
     542:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     546:	bf8c      	ite	hi
     548:	2220      	movhi	r2, #32
     54a:	2240      	movls	r2, #64	; 0x40
     54c:	4b02      	ldr	r3, [pc, #8]	; (558 <mskd_extract_gtr()+0x20>)
     54e:	605a      	str	r2, [r3, #4]
     550:	4770      	bx	lr
     552:	bf00      	nop
     554:	200023e0 	.word	0x200023e0
     558:	20002480 	.word	0x20002480

0000055c <set_bits_global()>:
     55c:	4a02      	ldr	r2, [pc, #8]	; (568 <set_bits_global()+0xc>)
     55e:	6853      	ldr	r3, [r2, #4]
     560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     564:	6053      	str	r3, [r2, #4]
     566:	4770      	bx	lr
     568:	20002480 	.word	0x20002480

0000056c <ins_mskd_global()>:
     56c:	4a03      	ldr	r2, [pc, #12]	; (57c <ins_mskd_global()+0x10>)
     56e:	6853      	ldr	r3, [r2, #4]
     570:	f023 0306 	bic.w	r3, r3, #6
     574:	f043 0302 	orr.w	r3, r3, #2
     578:	6053      	str	r3, [r2, #4]
     57a:	4770      	bx	lr
     57c:	20002480 	.word	0x20002480

00000580 <assign_array_global()>:
     580:	22bd      	movs	r2, #189	; 0xbd
     582:	4b01      	ldr	r3, [pc, #4]	; (588 <assign_array_global()+0x8>)
     584:	601a      	str	r2, [r3, #0]
     586:	4770      	bx	lr
     588:	200022ec 	.word	0x200022ec

0000058c <shifted_global()>:
     58c:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     590:	4b03      	ldr	r3, [pc, #12]	; (5a0 <shifted_global()+0x14>)
     592:	4a04      	ldr	r2, [pc, #16]	; (5a4 <shifted_global()+0x18>)
     594:	6059      	str	r1, [r3, #4]
     596:	685b      	ldr	r3, [r3, #4]
     598:	f3c3 6344 	ubfx	r3, r3, #25, #5
     59c:	62d3      	str	r3, [r2, #44]	; 0x2c
     59e:	4770      	bx	lr
     5a0:	200023e0 	.word	0x200023e0
     5a4:	200022c0 	.word	0x200022c0

000005a8 <assign_register_global()>:
     5a8:	2204      	movs	r2, #4
     5aa:	4b01      	ldr	r3, [pc, #4]	; (5b0 <assign_register_global()+0x8>)
     5ac:	605a      	str	r2, [r3, #4]
     5ae:	4770      	bx	lr
     5b0:	20002480 	.word	0x20002480

000005b4 <copy_bits_equ()>:
     5b4:	2240      	movs	r2, #64	; 0x40
     5b6:	4b04      	ldr	r3, [pc, #16]	; (5c8 <copy_bits_equ()+0x14>)
     5b8:	605a      	str	r2, [r3, #4]
     5ba:	685a      	ldr	r2, [r3, #4]
     5bc:	0652      	lsls	r2, r2, #25
     5be:	bf4c      	ite	mi
     5c0:	2202      	movmi	r2, #2
     5c2:	2204      	movpl	r2, #4
     5c4:	605a      	str	r2, [r3, #4]
     5c6:	4770      	bx	lr
     5c8:	20002480 	.word	0x20002480

000005cc <copy_bits_neq()>:
     5cc:	2240      	movs	r2, #64	; 0x40
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <copy_bits_neq()+0x14>)
     5d0:	605a      	str	r2, [r3, #4]
     5d2:	685a      	ldr	r2, [r3, #4]
     5d4:	0652      	lsls	r2, r2, #25
     5d6:	bf54      	ite	pl
     5d8:	2202      	movpl	r2, #2
     5da:	2204      	movmi	r2, #4
     5dc:	605a      	str	r2, [r3, #4]
     5de:	4770      	bx	lr
     5e0:	20002480 	.word	0x20002480

000005e4 <copy_mskd_equ()>:
     5e4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     5e8:	4b05      	ldr	r3, [pc, #20]	; (600 <copy_mskd_equ()+0x1c>)
     5ea:	605a      	str	r2, [r3, #4]
     5ec:	685b      	ldr	r3, [r3, #4]
     5ee:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     5f2:	4293      	cmp	r3, r2
     5f4:	bf0c      	ite	eq
     5f6:	2202      	moveq	r2, #2
     5f8:	2204      	movne	r2, #4
     5fa:	4b02      	ldr	r3, [pc, #8]	; (604 <copy_mskd_equ()+0x20>)
     5fc:	605a      	str	r2, [r3, #4]
     5fe:	4770      	bx	lr
     600:	200023e0 	.word	0x200023e0
     604:	20002480 	.word	0x20002480

00000608 <copy_mskd_neq()>:
     608:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     60c:	4b05      	ldr	r3, [pc, #20]	; (624 <copy_mskd_neq()+0x1c>)
     60e:	605a      	str	r2, [r3, #4]
     610:	685b      	ldr	r3, [r3, #4]
     612:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     616:	4293      	cmp	r3, r2
     618:	bf14      	ite	ne
     61a:	2202      	movne	r2, #2
     61c:	2204      	moveq	r2, #4
     61e:	4b02      	ldr	r3, [pc, #8]	; (628 <copy_mskd_neq()+0x20>)
     620:	605a      	str	r2, [r3, #4]
     622:	4770      	bx	lr
     624:	200023e0 	.word	0x200023e0
     628:	20002480 	.word	0x20002480

0000062c <copy_mskd_lss()>:
     62c:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     630:	4b06      	ldr	r3, [pc, #24]	; (64c <copy_mskd_lss()+0x20>)
     632:	605a      	str	r2, [r3, #4]
     634:	685b      	ldr	r3, [r3, #4]
     636:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     63a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     63e:	bf34      	ite	cc
     640:	2202      	movcc	r2, #2
     642:	2204      	movcs	r2, #4
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <copy_mskd_lss()+0x24>)
     646:	605a      	str	r2, [r3, #4]
     648:	4770      	bx	lr
     64a:	bf00      	nop
     64c:	200023e0 	.word	0x200023e0
     650:	20002480 	.word	0x20002480

00000654 <copy_mskd_leq()>:
     654:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     658:	4b05      	ldr	r3, [pc, #20]	; (670 <copy_mskd_leq()+0x1c>)
     65a:	605a      	str	r2, [r3, #4]
     65c:	685b      	ldr	r3, [r3, #4]
     65e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     662:	4293      	cmp	r3, r2
     664:	bf94      	ite	ls
     666:	2202      	movls	r2, #2
     668:	2204      	movhi	r2, #4
     66a:	4b02      	ldr	r3, [pc, #8]	; (674 <copy_mskd_leq()+0x20>)
     66c:	605a      	str	r2, [r3, #4]
     66e:	4770      	bx	lr
     670:	200023e0 	.word	0x200023e0
     674:	20002480 	.word	0x20002480

00000678 <copy_mskd_gtr()>:
     678:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     67c:	4b06      	ldr	r3, [pc, #24]	; (698 <copy_mskd_gtr()+0x20>)
     67e:	605a      	str	r2, [r3, #4]
     680:	685b      	ldr	r3, [r3, #4]
     682:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     686:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     68a:	bf8c      	ite	hi
     68c:	2202      	movhi	r2, #2
     68e:	2204      	movls	r2, #4
     690:	4b02      	ldr	r3, [pc, #8]	; (69c <copy_mskd_gtr()+0x24>)
     692:	605a      	str	r2, [r3, #4]
     694:	4770      	bx	lr
     696:	bf00      	nop
     698:	200023e0 	.word	0x200023e0
     69c:	20002480 	.word	0x20002480

000006a0 <copy_mskd_geq()>:
     6a0:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <copy_mskd_geq()+0x1c>)
     6a6:	605a      	str	r2, [r3, #4]
     6a8:	685b      	ldr	r3, [r3, #4]
     6aa:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6ae:	4293      	cmp	r3, r2
     6b0:	bf2c      	ite	cs
     6b2:	2202      	movcs	r2, #2
     6b4:	2204      	movcc	r2, #4
     6b6:	4b02      	ldr	r3, [pc, #8]	; (6c0 <copy_mskd_geq()+0x20>)
     6b8:	605a      	str	r2, [r3, #4]
     6ba:	4770      	bx	lr
     6bc:	200023e0 	.word	0x200023e0
     6c0:	20002480 	.word	0x20002480

000006c4 <copy_shifted()>:
     6c4:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <copy_shifted()+0x1c>)
     6ca:	605a      	str	r2, [r3, #4]
     6cc:	685b      	ldr	r3, [r3, #4]
     6ce:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6d2:	2b0b      	cmp	r3, #11
     6d4:	bf0c      	ite	eq
     6d6:	2202      	moveq	r2, #2
     6d8:	2204      	movne	r2, #4
     6da:	4b02      	ldr	r3, [pc, #8]	; (6e4 <copy_shifted()+0x20>)
     6dc:	605a      	str	r2, [r3, #4]
     6de:	4770      	bx	lr
     6e0:	200023e0 	.word	0x200023e0
     6e4:	20002480 	.word	0x20002480

000006e8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     6e8:	4b01      	ldr	r3, [pc, #4]	; (6f0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0x8>)
     6ea:	6058      	str	r0, [r3, #4]
     6ec:	4770      	bx	lr
     6ee:	bf00      	nop
     6f0:	20002480 	.word	0x20002480

000006f4 <call_bits_val_var()>:
     6f4:	2040      	movs	r0, #64	; 0x40
     6f6:	f7ff bffe 	b.w	6e8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     6fa:	bf00      	nop

000006fc <call_bits_val_zero()>:
     6fc:	2000      	movs	r0, #0
     6fe:	f7ff bffe 	b.w	6e8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     702:	bf00      	nop

00000704 <call_bits_val_const()>:
     704:	2040      	movs	r0, #64	; 0x40
     706:	f7ff bffe 	b.w	6e8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     70a:	bf00      	nop

0000070c <call_bits_val_global()>:
     70c:	2040      	movs	r0, #64	; 0x40
     70e:	f7ff bffe 	b.w	6e8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     712:	bf00      	nop

00000714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     714:	6802      	ldr	r2, [r0, #0]
     716:	4b01      	ldr	r3, [pc, #4]	; (71c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0x8>)
     718:	605a      	str	r2, [r3, #4]
     71a:	4770      	bx	lr
     71c:	20002480 	.word	0x20002480

00000720 <call_bits_ref_var()>:
     720:	2301      	movs	r3, #1
     722:	b500      	push	{lr}
     724:	b081      	sub	sp, #4
     726:	4668      	mov	r0, sp
     728:	9300      	str	r3, [sp, #0]
     72a:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     72e:	b001      	add	sp, #4
     730:	f85d fb04 	ldr.w	pc, [sp], #4

00000734 <call_bits_ref_zero()>:
     734:	2300      	movs	r3, #0
     736:	b500      	push	{lr}
     738:	b081      	sub	sp, #4
     73a:	4668      	mov	r0, sp
     73c:	9300      	str	r3, [sp, #0]
     73e:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     742:	b001      	add	sp, #4
     744:	f85d fb04 	ldr.w	pc, [sp], #4

00000748 <call_bits_ref_const()>:
     748:	2301      	movs	r3, #1
     74a:	b500      	push	{lr}
     74c:	b081      	sub	sp, #4
     74e:	4668      	mov	r0, sp
     750:	9300      	str	r3, [sp, #0]
     752:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     756:	b001      	add	sp, #4
     758:	f85d fb04 	ldr.w	pc, [sp], #4

0000075c <call_bits_ref_global()>:
     75c:	2340      	movs	r3, #64	; 0x40
     75e:	b500      	push	{lr}
     760:	b081      	sub	sp, #4
     762:	4668      	mov	r0, sp
     764:	9300      	str	r3, [sp, #0]
     766:	f7ff fffe 	bl	714 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     76a:	b001      	add	sp, #4
     76c:	f85d fb04 	ldr.w	pc, [sp], #4

00000770 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     770:	4a03      	ldr	r2, [pc, #12]	; (780 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     772:	6853      	ldr	r3, [r2, #4]
     774:	ea23 0000 	bic.w	r0, r3, r0
     778:	4308      	orrs	r0, r1
     77a:	6050      	str	r0, [r2, #4]
     77c:	4770      	bx	lr
     77e:	bf00      	nop
     780:	20002480 	.word	0x20002480

00000784 <call_mskd_val_var()>:
     784:	2006      	movs	r0, #6
     786:	2102      	movs	r1, #2
     788:	f7ff bffe 	b.w	770 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>

0000078c <call_mskd_val_const()>:
     78c:	2006      	movs	r0, #6
     78e:	2102      	movs	r1, #2
     790:	f7ff bffe 	b.w	770 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>

00000794 <call_mskd_val_global()>:
     794:	2006      	movs	r0, #6
     796:	2102      	movs	r1, #2
     798:	f7ff bffe 	b.w	770 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>

0000079c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     79c:	4a05      	ldr	r2, [pc, #20]	; (7b4 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x18>)
     79e:	b410      	push	{r4}
     7a0:	6853      	ldr	r3, [r2, #4]
     7a2:	6804      	ldr	r4, [r0, #0]
     7a4:	6841      	ldr	r1, [r0, #4]
     7a6:	ea23 0304 	bic.w	r3, r3, r4
     7aa:	430b      	orrs	r3, r1
     7ac:	6053      	str	r3, [r2, #4]
     7ae:	bc10      	pop	{r4}
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	20002480 	.word	0x20002480

000007b8 <call_mskd_ref_var()>:
     7b8:	b500      	push	{lr}
     7ba:	4b05      	ldr	r3, [pc, #20]	; (7d0 <call_mskd_ref_var()+0x18>)
     7bc:	b082      	sub	sp, #8
     7be:	4668      	mov	r0, sp
     7c0:	cb0c      	ldmia	r3, {r2, r3}
     7c2:	e88d 000c 	stmia.w	sp, {r2, r3}
     7c6:	f7ff fffe 	bl	79c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7ca:	b002      	add	sp, #8
     7cc:	f85d fb04 	ldr.w	pc, [sp], #4
     7d0:	00000000 	.word	0x00000000

000007d4 <call_mskd_ref_const()>:
     7d4:	2206      	movs	r2, #6
     7d6:	2304      	movs	r3, #4
     7d8:	b500      	push	{lr}
     7da:	b082      	sub	sp, #8
     7dc:	4668      	mov	r0, sp
     7de:	e88d 000c 	stmia.w	sp, {r2, r3}
     7e2:	f7ff fffe 	bl	79c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7e6:	b002      	add	sp, #8
     7e8:	f85d fb04 	ldr.w	pc, [sp], #4

000007ec <call_mskd_ref_global()>:
     7ec:	2206      	movs	r2, #6
     7ee:	2302      	movs	r3, #2
     7f0:	b500      	push	{lr}
     7f2:	b082      	sub	sp, #8
     7f4:	4668      	mov	r0, sp
     7f6:	e88d 000c 	stmia.w	sp, {r2, r3}
     7fa:	f7ff fffe 	bl	79c <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     7fe:	b002      	add	sp, #8
     800:	f85d fb04 	ldr.w	pc, [sp], #4

00000804 <periph_bits(mcu::Serial volatile*)>:
     804:	6843      	ldr	r3, [r0, #4]
     806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     80a:	6043      	str	r3, [r0, #4]
     80c:	4770      	bx	lr
     80e:	bf00      	nop

00000810 <call_periph_bits()>:
     810:	4801      	ldr	r0, [pc, #4]	; (818 <call_periph_bits()+0x8>)
     812:	f7ff bffe 	b.w	804 <periph_bits(mcu::Serial volatile*)>
     816:	bf00      	nop
     818:	20002480 	.word	0x20002480

0000081c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     81c:	6843      	ldr	r3, [r0, #4]
     81e:	4319      	orrs	r1, r3
     820:	6041      	str	r1, [r0, #4]
     822:	4770      	bx	lr

00000824 <call_periph_bits_val()>:
     824:	2140      	movs	r1, #64	; 0x40
     826:	4801      	ldr	r0, [pc, #4]	; (82c <call_periph_bits_val()+0x8>)
     828:	f7ff bffe 	b.w	81c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     82c:	20002480 	.word	0x20002480

00000830 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     830:	6803      	ldr	r3, [r0, #0]
     832:	4319      	orrs	r1, r3
     834:	6001      	str	r1, [r0, #0]
     836:	4770      	bx	lr

00000838 <call_reg_bits_val()>:
     838:	2140      	movs	r1, #64	; 0x40
     83a:	4801      	ldr	r0, [pc, #4]	; (840 <call_reg_bits_val()+0x8>)
     83c:	f7ff bffe 	b.w	830 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     840:	20002484 	.word	0x20002484

00000844 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     844:	680a      	ldr	r2, [r1, #0]
     846:	6843      	ldr	r3, [r0, #4]
     848:	4313      	orrs	r3, r2
     84a:	6043      	str	r3, [r0, #4]
     84c:	4770      	bx	lr
     84e:	bf00      	nop

00000850 <call_periph_bits_ref()>:
     850:	2340      	movs	r3, #64	; 0x40
     852:	b500      	push	{lr}
     854:	b081      	sub	sp, #4
     856:	4669      	mov	r1, sp
     858:	4803      	ldr	r0, [pc, #12]	; (868 <call_periph_bits_ref()+0x18>)
     85a:	9300      	str	r3, [sp, #0]
     85c:	f7ff fffe 	bl	844 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     860:	b001      	add	sp, #4
     862:	f85d fb04 	ldr.w	pc, [sp], #4
     866:	bf00      	nop
     868:	20002480 	.word	0x20002480

0000086c <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     86c:	680a      	ldr	r2, [r1, #0]
     86e:	6803      	ldr	r3, [r0, #0]
     870:	4313      	orrs	r3, r2
     872:	6003      	str	r3, [r0, #0]
     874:	4770      	bx	lr
     876:	bf00      	nop

00000878 <call_reg_bits_ref()>:
     878:	2340      	movs	r3, #64	; 0x40
     87a:	b500      	push	{lr}
     87c:	b081      	sub	sp, #4
     87e:	4669      	mov	r1, sp
     880:	4803      	ldr	r0, [pc, #12]	; (890 <call_reg_bits_ref()+0x18>)
     882:	9300      	str	r3, [sp, #0]
     884:	f7ff fffe 	bl	86c <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     888:	b001      	add	sp, #4
     88a:	f85d fb04 	ldr.w	pc, [sp], #4
     88e:	bf00      	nop
     890:	20002484 	.word	0x20002484

00000894 <periph_mskd(mcu::Serial volatile*)>:
     894:	6843      	ldr	r3, [r0, #4]
     896:	f023 0306 	bic.w	r3, r3, #6
     89a:	f043 0302 	orr.w	r3, r3, #2
     89e:	6043      	str	r3, [r0, #4]
     8a0:	4770      	bx	lr
     8a2:	bf00      	nop

000008a4 <call_periph_mskd()>:
     8a4:	4801      	ldr	r0, [pc, #4]	; (8ac <call_periph_mskd()+0x8>)
     8a6:	f7ff bffe 	b.w	894 <periph_mskd(mcu::Serial volatile*)>
     8aa:	bf00      	nop
     8ac:	20002480 	.word	0x20002480

000008b0 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8b0:	6843      	ldr	r3, [r0, #4]
     8b2:	ea23 0101 	bic.w	r1, r3, r1
     8b6:	4311      	orrs	r1, r2
     8b8:	6041      	str	r1, [r0, #4]
     8ba:	4770      	bx	lr

000008bc <call_periph_mskd_val()>:
     8bc:	2106      	movs	r1, #6
     8be:	2202      	movs	r2, #2
     8c0:	4801      	ldr	r0, [pc, #4]	; (8c8 <call_periph_mskd_val()+0xc>)
     8c2:	f7ff bffe 	b.w	8b0 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8c6:	bf00      	nop
     8c8:	20002480 	.word	0x20002480

000008cc <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8cc:	6803      	ldr	r3, [r0, #0]
     8ce:	ea23 0101 	bic.w	r1, r3, r1
     8d2:	4311      	orrs	r1, r2
     8d4:	6001      	str	r1, [r0, #0]
     8d6:	4770      	bx	lr

000008d8 <call_reg_mskd_val()>:
     8d8:	2106      	movs	r1, #6
     8da:	2202      	movs	r2, #2
     8dc:	4801      	ldr	r0, [pc, #4]	; (8e4 <call_reg_mskd_val()+0xc>)
     8de:	f7ff bffe 	b.w	8cc <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8e2:	bf00      	nop
     8e4:	20002484 	.word	0x20002484

000008e8 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8e8:	6843      	ldr	r3, [r0, #4]
     8ea:	ea23 0101 	bic.w	r1, r3, r1
     8ee:	4311      	orrs	r1, r2
     8f0:	6041      	str	r1, [r0, #4]
     8f2:	4770      	bx	lr

000008f4 <call_periph_mskd_ref()>:
     8f4:	2106      	movs	r1, #6
     8f6:	2202      	movs	r2, #2
     8f8:	4801      	ldr	r0, [pc, #4]	; (900 <call_periph_mskd_ref()+0xc>)
     8fa:	f7ff bffe 	b.w	8e8 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     8fe:	bf00      	nop
     900:	20002480 	.word	0x20002480

00000904 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     904:	6803      	ldr	r3, [r0, #0]
     906:	ea23 0101 	bic.w	r1, r3, r1
     90a:	4311      	orrs	r1, r2
     90c:	6001      	str	r1, [r0, #0]
     90e:	4770      	bx	lr

00000910 <call_reg_mskd_ref()>:
     910:	2106      	movs	r1, #6
     912:	2202      	movs	r2, #2
     914:	4801      	ldr	r0, [pc, #4]	; (91c <call_reg_mskd_ref()+0xc>)
     916:	f7ff bffe 	b.w	904 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     91a:	bf00      	nop
     91c:	20002484 	.word	0x20002484

00000920 <return_bits()>:
     920:	2020      	movs	r0, #32
     922:	4770      	bx	lr

00000924 <call_return_bits()>:
     924:	b500      	push	{lr}
     926:	f7ff fffe 	bl	920 <return_bits()>
     92a:	2820      	cmp	r0, #32
     92c:	bf0c      	ite	eq
     92e:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     932:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     936:	4b02      	ldr	r3, [pc, #8]	; (940 <call_return_bits()+0x1c>)
     938:	605a      	str	r2, [r3, #4]
     93a:	f85d fb04 	ldr.w	pc, [sp], #4
     93e:	bf00      	nop
     940:	200023e0 	.word	0x200023e0

00000944 <return_mskd()>:
     944:	2118      	movs	r1, #24
     946:	2208      	movs	r2, #8
     948:	e880 0006 	stmia.w	r0, {r1, r2}
     94c:	4770      	bx	lr
     94e:	bf00      	nop

00000950 <call_return_mskd()>:
     950:	b500      	push	{lr}
     952:	b082      	sub	sp, #8
     954:	4668      	mov	r0, sp
     956:	f7ff fffe 	bl	944 <return_mskd()>
     95a:	9b00      	ldr	r3, [sp, #0]
     95c:	9a01      	ldr	r2, [sp, #4]
     95e:	2b18      	cmp	r3, #24
     960:	d006      	beq.n	970 <call_return_mskd()+0x20>
     962:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     966:	4b07      	ldr	r3, [pc, #28]	; (984 <call_return_mskd()+0x34>)
     968:	605a      	str	r2, [r3, #4]
     96a:	b002      	add	sp, #8
     96c:	f85d fb04 	ldr.w	pc, [sp], #4
     970:	2a08      	cmp	r2, #8
     972:	d1f6      	bne.n	962 <call_return_mskd()+0x12>
     974:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     978:	4b02      	ldr	r3, [pc, #8]	; (984 <call_return_mskd()+0x34>)
     97a:	605a      	str	r2, [r3, #4]
     97c:	b002      	add	sp, #8
     97e:	f85d fb04 	ldr.w	pc, [sp], #4
     982:	bf00      	nop
     984:	200023e0 	.word	0x200023e0

00000988 <return_reg()>:
     988:	2240      	movs	r2, #64	; 0x40
     98a:	4b02      	ldr	r3, [pc, #8]	; (994 <return_reg()+0xc>)
     98c:	4802      	ldr	r0, [pc, #8]	; (998 <return_reg()+0x10>)
     98e:	605a      	str	r2, [r3, #4]
     990:	4770      	bx	lr
     992:	bf00      	nop
     994:	20002480 	.word	0x20002480
     998:	20002484 	.word	0x20002484

0000099c <call_return_reg()>:
     99c:	b500      	push	{lr}
     99e:	f7ff fffe 	bl	988 <return_reg()>
     9a2:	6803      	ldr	r3, [r0, #0]
     9a4:	2b40      	cmp	r3, #64	; 0x40
     9a6:	bf0c      	ite	eq
     9a8:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     9ac:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     9b0:	4b01      	ldr	r3, [pc, #4]	; (9b8 <call_return_reg()+0x1c>)
     9b2:	605a      	str	r2, [r3, #4]
     9b4:	f85d fb04 	ldr.w	pc, [sp], #4
     9b8:	200023e0 	.word	0x200023e0

000009bc <return_periph()>:
     9bc:	2340      	movs	r3, #64	; 0x40
     9be:	4801      	ldr	r0, [pc, #4]	; (9c4 <return_periph()+0x8>)
     9c0:	6043      	str	r3, [r0, #4]
     9c2:	4770      	bx	lr
     9c4:	20002480 	.word	0x20002480

000009c8 <call_return_periph()>:
     9c8:	b500      	push	{lr}
     9ca:	f7ff fffe 	bl	9bc <return_periph()>
     9ce:	6843      	ldr	r3, [r0, #4]
     9d0:	2b40      	cmp	r3, #64	; 0x40
     9d2:	bf0c      	ite	eq
     9d4:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     9d8:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     9dc:	4b01      	ldr	r3, [pc, #4]	; (9e4 <call_return_periph()+0x1c>)
     9de:	605a      	str	r2, [r3, #4]
     9e0:	f85d fb04 	ldr.w	pc, [sp], #4
     9e4:	200023e0 	.word	0x200023e0

000009e8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     9e8:	2805      	cmp	r0, #5
     9ea:	d006      	beq.n	9fa <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     9ec:	2806      	cmp	r0, #6
     9ee:	bf0c      	ite	eq
     9f0:	2244      	moveq	r2, #68	; 0x44
     9f2:	2255      	movne	r2, #85	; 0x55
     9f4:	4b03      	ldr	r3, [pc, #12]	; (a04 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     9f6:	62da      	str	r2, [r3, #44]	; 0x2c
     9f8:	4770      	bx	lr
     9fa:	2233      	movs	r2, #51	; 0x33
     9fc:	4b01      	ldr	r3, [pc, #4]	; (a04 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     9fe:	62da      	str	r2, [r3, #44]	; 0x2c
     a00:	4770      	bx	lr
     a02:	bf00      	nop
     a04:	200022c0 	.word	0x200022c0

00000a08 <call_pos_val()>:
     a08:	b500      	push	{lr}
     a0a:	2005      	movs	r0, #5
     a0c:	f7ff fffe 	bl	9e8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a10:	2006      	movs	r0, #6
     a12:	f85d eb04 	ldr.w	lr, [sp], #4
     a16:	f7ff bffe 	b.w	9e8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a1a:	bf00      	nop

00000a1c <call_pos_val_global()>:
     a1c:	2006      	movs	r0, #6
     a1e:	f7ff bffe 	b.w	9e8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a22:	bf00      	nop

00000a24 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a24:	6803      	ldr	r3, [r0, #0]
     a26:	2b05      	cmp	r3, #5
     a28:	d006      	beq.n	a38 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a2a:	2b06      	cmp	r3, #6
     a2c:	bf0c      	ite	eq
     a2e:	2277      	moveq	r2, #119	; 0x77
     a30:	2288      	movne	r2, #136	; 0x88
     a32:	4b03      	ldr	r3, [pc, #12]	; (a40 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a34:	62da      	str	r2, [r3, #44]	; 0x2c
     a36:	4770      	bx	lr
     a38:	2266      	movs	r2, #102	; 0x66
     a3a:	4b01      	ldr	r3, [pc, #4]	; (a40 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1c>)
     a3c:	62da      	str	r2, [r3, #44]	; 0x2c
     a3e:	4770      	bx	lr
     a40:	200022c0 	.word	0x200022c0

00000a44 <call_pos_ref()>:
     a44:	2105      	movs	r1, #5
     a46:	b500      	push	{lr}
     a48:	b081      	sub	sp, #4
     a4a:	4668      	mov	r0, sp
     a4c:	9100      	str	r1, [sp, #0]
     a4e:	f7ff fffe 	bl	a24 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a52:	4668      	mov	r0, sp
     a54:	9100      	str	r1, [sp, #0]
     a56:	f7ff fffe 	bl	a24 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a5a:	b001      	add	sp, #4
     a5c:	f85d fb04 	ldr.w	pc, [sp], #4

00000a60 <call_pos_ref_global()>:
     a60:	2306      	movs	r3, #6
     a62:	b500      	push	{lr}
     a64:	b081      	sub	sp, #4
     a66:	4668      	mov	r0, sp
     a68:	9300      	str	r3, [sp, #0]
     a6a:	f7ff fffe 	bl	a24 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     a6e:	b001      	add	sp, #4
     a70:	f85d fb04 	ldr.w	pc, [sp], #4

00000a74 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a74:	4a03      	ldr	r2, [pc, #12]	; (a84 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     a76:	6853      	ldr	r3, [r2, #4]
     a78:	ea23 0000 	bic.w	r0, r3, r0
     a7c:	4308      	orrs	r0, r1
     a7e:	6050      	str	r0, [r2, #4]
     a80:	4770      	bx	lr
     a82:	bf00      	nop
     a84:	20002480 	.word	0x20002480

00000a88 <call_range_val(unsigned int)>:
     a88:	0301      	lsls	r1, r0, #12
     a8a:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     a8e:	f7ff bffe 	b.w	a74 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a92:	bf00      	nop

00000a94 <call_range_val_port()>:
     a94:	201f      	movs	r0, #31
     a96:	f7ff bffe 	b.w	a88 <call_range_val(unsigned int)>
     a9a:	bf00      	nop

00000a9c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a9c:	4a03      	ldr	r2, [pc, #12]	; (aac <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     a9e:	6853      	ldr	r3, [r2, #4]
     aa0:	ea23 0000 	bic.w	r0, r3, r0
     aa4:	4308      	orrs	r0, r1
     aa6:	6050      	str	r0, [r2, #4]
     aa8:	4770      	bx	lr
     aaa:	bf00      	nop
     aac:	20002480 	.word	0x20002480

00000ab0 <call_range_ref(unsigned int)>:
     ab0:	0301      	lsls	r1, r0, #12
     ab2:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     ab6:	f7ff bffe 	b.w	a9c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     aba:	bf00      	nop

00000abc <call_range_ref_port()>:
     abc:	200c      	movs	r0, #12
     abe:	f7ff bffe 	b.w	ab0 <call_range_ref(unsigned int)>
     ac2:	bf00      	nop

00000ac4 <check_array_range_pass(unsigned int)>:
     ac4:	2816      	cmp	r0, #22
     ac6:	bf94      	ite	ls
     ac8:	227f      	movls	r2, #127	; 0x7f
     aca:	2283      	movhi	r2, #131	; 0x83
     acc:	4b01      	ldr	r3, [pc, #4]	; (ad4 <check_array_range_pass(unsigned int)+0x10>)
     ace:	62da      	str	r2, [r3, #44]	; 0x2c
     ad0:	4770      	bx	lr
     ad2:	bf00      	nop
     ad4:	200022c0 	.word	0x200022c0

00000ad8 <check_array_range_fail(unsigned int)>:
     ad8:	2816      	cmp	r0, #22
     ada:	bf94      	ite	ls
     adc:	2295      	movls	r2, #149	; 0x95
     ade:	2297      	movhi	r2, #151	; 0x97
     ae0:	4b01      	ldr	r3, [pc, #4]	; (ae8 <check_array_range_fail(unsigned int)+0x10>)
     ae2:	62da      	str	r2, [r3, #44]	; 0x2c
     ae4:	4770      	bx	lr
     ae6:	bf00      	nop
     ae8:	200022c0 	.word	0x200022c0

00000aec <check_bits_range_pass(unsigned int)>:
     aec:	280f      	cmp	r0, #15
     aee:	bf94      	ite	ls
     af0:	229d      	movls	r2, #157	; 0x9d
     af2:	22a3      	movhi	r2, #163	; 0xa3
     af4:	4b01      	ldr	r3, [pc, #4]	; (afc <check_bits_range_pass(unsigned int)+0x10>)
     af6:	62da      	str	r2, [r3, #44]	; 0x2c
     af8:	4770      	bx	lr
     afa:	bf00      	nop
     afc:	200022c0 	.word	0x200022c0

00000b00 <check_bits_range_fail(unsigned int)>:
     b00:	280f      	cmp	r0, #15
     b02:	bf94      	ite	ls
     b04:	22a7      	movls	r2, #167	; 0xa7
     b06:	22ad      	movhi	r2, #173	; 0xad
     b08:	4b01      	ldr	r3, [pc, #4]	; (b10 <check_bits_range_fail(unsigned int)+0x10>)
     b0a:	62da      	str	r2, [r3, #44]	; 0x2c
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop
     b10:	200022c0 	.word	0x200022c0

00000b14 <check_mskd_range_pass(unsigned int)>:
     b14:	281f      	cmp	r0, #31
     b16:	bf94      	ite	ls
     b18:	22b3      	movls	r2, #179	; 0xb3
     b1a:	22b5      	movhi	r2, #181	; 0xb5
     b1c:	4b01      	ldr	r3, [pc, #4]	; (b24 <check_mskd_range_pass(unsigned int)+0x10>)
     b1e:	62da      	str	r2, [r3, #44]	; 0x2c
     b20:	4770      	bx	lr
     b22:	bf00      	nop
     b24:	200022c0 	.word	0x200022c0

00000b28 <check_mskd_range_fail(unsigned int)>:
     b28:	281f      	cmp	r0, #31
     b2a:	bf94      	ite	ls
     b2c:	22bf      	movls	r2, #191	; 0xbf
     b2e:	22c1      	movhi	r2, #193	; 0xc1
     b30:	4b01      	ldr	r3, [pc, #4]	; (b38 <check_mskd_range_fail(unsigned int)+0x10>)
     b32:	62da      	str	r2, [r3, #44]	; 0x2c
     b34:	4770      	bx	lr
     b36:	bf00      	nop
     b38:	200022c0 	.word	0x200022c0

00000b3c <bits_extract_ne()>:
     b3c:	2220      	movs	r2, #32
     b3e:	4b04      	ldr	r3, [pc, #16]	; (b50 <bits_extract_ne()+0x14>)
     b40:	605a      	str	r2, [r3, #4]
     b42:	685a      	ldr	r2, [r3, #4]
     b44:	2a20      	cmp	r2, #32
     b46:	bf14      	ite	ne
     b48:	2202      	movne	r2, #2
     b4a:	2204      	moveq	r2, #4
     b4c:	605a      	str	r2, [r3, #4]
     b4e:	4770      	bx	lr
     b50:	20002480 	.word	0x20002480

00000b54 <mskd_extract_geq()>:
     b54:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <mskd_extract_geq()+0x18>)
     b5a:	605a      	str	r2, [r3, #4]
     b5c:	685b      	ldr	r3, [r3, #4]
     b5e:	4293      	cmp	r3, r2
     b60:	bf2c      	ite	cs
     b62:	2220      	movcs	r2, #32
     b64:	2240      	movcc	r2, #64	; 0x40
     b66:	4b02      	ldr	r3, [pc, #8]	; (b70 <mskd_extract_geq()+0x1c>)
     b68:	605a      	str	r2, [r3, #4]
     b6a:	4770      	bx	lr
     b6c:	200023e0 	.word	0x200023e0
     b70:	20002480 	.word	0x20002480

00000b74 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     b74:	b410      	push	{r4}
     b76:	f04f 5438 	mov.w	r4, #771751936	; 0x2e000000
     b7a:	4b04      	ldr	r3, [pc, #16]	; (b8c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     b7c:	4a04      	ldr	r2, [pc, #16]	; (b90 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x1c>)
     b7e:	605c      	str	r4, [r3, #4]
     b80:	685b      	ldr	r3, [r3, #4]
     b82:	bc10      	pop	{r4}
     b84:	4018      	ands	r0, r3
     b86:	40c8      	lsrs	r0, r1
     b88:	62d0      	str	r0, [r2, #44]	; 0x2c
     b8a:	4770      	bx	lr
     b8c:	200023e0 	.word	0x200023e0
     b90:	200022c0 	.word	0x200022c0

00000b94 <call_shifted_const_val()>:
     b94:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     b98:	2119      	movs	r1, #25
     b9a:	f7ff bffe 	b.w	b74 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     b9e:	bf00      	nop

00000ba0 <call_shifted_var_val()>:
     ba0:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     ba4:	2119      	movs	r1, #25
     ba6:	f7ff bffe 	b.w	b74 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     baa:	bf00      	nop

00000bac <call_shifted_global_val()>:
     bac:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bb0:	2119      	movs	r1, #25
     bb2:	f7ff bffe 	b.w	b74 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     bb6:	bf00      	nop

00000bb8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     bb8:	f04f 5138 	mov.w	r1, #771751936	; 0x2e000000
     bbc:	4b05      	ldr	r3, [pc, #20]	; (bd4 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     bbe:	b410      	push	{r4}
     bc0:	6059      	str	r1, [r3, #4]
     bc2:	6804      	ldr	r4, [r0, #0]
     bc4:	685b      	ldr	r3, [r3, #4]
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	4023      	ands	r3, r4
     bca:	4a03      	ldr	r2, [pc, #12]	; (bd8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x20>)
     bcc:	40cb      	lsrs	r3, r1
     bce:	62d3      	str	r3, [r2, #44]	; 0x2c
     bd0:	bc10      	pop	{r4}
     bd2:	4770      	bx	lr
     bd4:	200023e0 	.word	0x200023e0
     bd8:	200022c0 	.word	0x200022c0

00000bdc <call_shifted_const_ref()>:
     bdc:	b500      	push	{lr}
     bde:	4b06      	ldr	r3, [pc, #24]	; (bf8 <call_shifted_const_ref()+0x1c>)
     be0:	b082      	sub	sp, #8
     be2:	4668      	mov	r0, sp
     be4:	f103 0308 	add.w	r3, r3, #8
     be8:	cb0c      	ldmia	r3, {r2, r3}
     bea:	e88d 000c 	stmia.w	sp, {r2, r3}
     bee:	f7ff fffe 	bl	bb8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     bf2:	b002      	add	sp, #8
     bf4:	f85d fb04 	ldr.w	pc, [sp], #4
     bf8:	00000000 	.word	0x00000000

00000bfc <call_shifted_var_ref()>:
     bfc:	b500      	push	{lr}
     bfe:	4b06      	ldr	r3, [pc, #24]	; (c18 <call_shifted_var_ref()+0x1c>)
     c00:	b082      	sub	sp, #8
     c02:	4668      	mov	r0, sp
     c04:	f103 0310 	add.w	r3, r3, #16
     c08:	cb0c      	ldmia	r3, {r2, r3}
     c0a:	e88d 000c 	stmia.w	sp, {r2, r3}
     c0e:	f7ff fffe 	bl	bb8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c12:	b002      	add	sp, #8
     c14:	f85d fb04 	ldr.w	pc, [sp], #4
     c18:	00000000 	.word	0x00000000

00000c1c <call_shifted_global_ref()>:
     c1c:	b500      	push	{lr}
     c1e:	4b06      	ldr	r3, [pc, #24]	; (c38 <call_shifted_global_ref()+0x1c>)
     c20:	b082      	sub	sp, #8
     c22:	4668      	mov	r0, sp
     c24:	f103 0308 	add.w	r3, r3, #8
     c28:	cb0c      	ldmia	r3, {r2, r3}
     c2a:	e88d 000c 	stmia.w	sp, {r2, r3}
     c2e:	f7ff fffe 	bl	bb8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c32:	b002      	add	sp, #8
     c34:	f85d fb04 	ldr.w	pc, [sp], #4
     c38:	00000000 	.word	0x00000000

00000c3c <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     c3c:	0643      	lsls	r3, r0, #25
     c3e:	bf4c      	ite	mi
     c40:	2202      	movmi	r2, #2
     c42:	2204      	movpl	r2, #4
     c44:	4b01      	ldr	r3, [pc, #4]	; (c4c <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     c46:	605a      	str	r2, [r3, #4]
     c48:	4770      	bx	lr
     c4a:	bf00      	nop
     c4c:	20002480 	.word	0x20002480

00000c50 <call_copy_bits_val()>:
     c50:	2240      	movs	r2, #64	; 0x40
     c52:	4b02      	ldr	r3, [pc, #8]	; (c5c <call_copy_bits_val()+0xc>)
     c54:	605a      	str	r2, [r3, #4]
     c56:	6858      	ldr	r0, [r3, #4]
     c58:	f7ff bffe 	b.w	c3c <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     c5c:	20002480 	.word	0x20002480

00000c60 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     c60:	6803      	ldr	r3, [r0, #0]
     c62:	065b      	lsls	r3, r3, #25
     c64:	bf4c      	ite	mi
     c66:	2202      	movmi	r2, #2
     c68:	2204      	movpl	r2, #4
     c6a:	4b01      	ldr	r3, [pc, #4]	; (c70 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x10>)
     c6c:	605a      	str	r2, [r3, #4]
     c6e:	4770      	bx	lr
     c70:	20002480 	.word	0x20002480

00000c74 <call_copy_bits_ref()>:
     c74:	2240      	movs	r2, #64	; 0x40
     c76:	b500      	push	{lr}
     c78:	4b05      	ldr	r3, [pc, #20]	; (c90 <call_copy_bits_ref()+0x1c>)
     c7a:	b081      	sub	sp, #4
     c7c:	605a      	str	r2, [r3, #4]
     c7e:	685b      	ldr	r3, [r3, #4]
     c80:	4668      	mov	r0, sp
     c82:	9300      	str	r3, [sp, #0]
     c84:	f7ff fffe 	bl	c60 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     c88:	b001      	add	sp, #4
     c8a:	f85d fb04 	ldr.w	pc, [sp], #4
     c8e:	bf00      	nop
     c90:	20002480 	.word	0x20002480

00000c94 <run>:
     c94:	b510      	push	{r4, lr}
     c96:	4cb3      	ldr	r4, [pc, #716]	; (f64 <run+0x2d0>)
     c98:	7823      	ldrb	r3, [r4, #0]
     c9a:	2b00      	cmp	r3, #0
     c9c:	f000 82ec 	beq.w	1278 <run+0x5e4>
     ca0:	68a1      	ldr	r1, [r4, #8]
     ca2:	7b23      	ldrb	r3, [r4, #12]
     ca4:	b91b      	cbnz	r3, cae <run+0x1a>
     ca6:	2201      	movs	r2, #1
     ca8:	4baf      	ldr	r3, [pc, #700]	; (f68 <run+0x2d4>)
     caa:	7322      	strb	r2, [r4, #12]
     cac:	6163      	str	r3, [r4, #20]
     cae:	7e23      	ldrb	r3, [r4, #24]
     cb0:	b91b      	cbnz	r3, cba <run+0x26>
     cb2:	2201      	movs	r2, #1
     cb4:	4bad      	ldr	r3, [pc, #692]	; (f6c <run+0x2d8>)
     cb6:	7622      	strb	r2, [r4, #24]
     cb8:	6223      	str	r3, [r4, #32]
     cba:	2200      	movs	r2, #0
     cbc:	48ac      	ldr	r0, [pc, #688]	; (f70 <run+0x2dc>)
     cbe:	f7ff fffe 	bl	0 <do_test>
     cc2:	68a1      	ldr	r1, [r4, #8]
     cc4:	2201      	movs	r2, #1
     cc6:	48ab      	ldr	r0, [pc, #684]	; (f74 <run+0x2e0>)
     cc8:	f7ff fffe 	bl	0 <do_test>
     ccc:	68a1      	ldr	r1, [r4, #8]
     cce:	2202      	movs	r2, #2
     cd0:	48a9      	ldr	r0, [pc, #676]	; (f78 <run+0x2e4>)
     cd2:	f7ff fffe 	bl	0 <do_test>
     cd6:	68a1      	ldr	r1, [r4, #8]
     cd8:	2203      	movs	r2, #3
     cda:	48a8      	ldr	r0, [pc, #672]	; (f7c <run+0x2e8>)
     cdc:	f7ff fffe 	bl	0 <do_test>
     ce0:	68a1      	ldr	r1, [r4, #8]
     ce2:	2204      	movs	r2, #4
     ce4:	48a6      	ldr	r0, [pc, #664]	; (f80 <run+0x2ec>)
     ce6:	f7ff fffe 	bl	0 <do_test>
     cea:	68a1      	ldr	r1, [r4, #8]
     cec:	2205      	movs	r2, #5
     cee:	48a5      	ldr	r0, [pc, #660]	; (f84 <run+0x2f0>)
     cf0:	f7ff fffe 	bl	0 <do_test>
     cf4:	68a1      	ldr	r1, [r4, #8]
     cf6:	2206      	movs	r2, #6
     cf8:	48a3      	ldr	r0, [pc, #652]	; (f88 <run+0x2f4>)
     cfa:	f7ff fffe 	bl	0 <do_test>
     cfe:	68a1      	ldr	r1, [r4, #8]
     d00:	2207      	movs	r2, #7
     d02:	48a2      	ldr	r0, [pc, #648]	; (f8c <run+0x2f8>)
     d04:	f7ff fffe 	bl	0 <do_test>
     d08:	68a1      	ldr	r1, [r4, #8]
     d0a:	2208      	movs	r2, #8
     d0c:	48a0      	ldr	r0, [pc, #640]	; (f90 <run+0x2fc>)
     d0e:	f7ff fffe 	bl	0 <do_test>
     d12:	68a1      	ldr	r1, [r4, #8]
     d14:	2209      	movs	r2, #9
     d16:	489f      	ldr	r0, [pc, #636]	; (f94 <run+0x300>)
     d18:	f7ff fffe 	bl	0 <do_test>
     d1c:	68a1      	ldr	r1, [r4, #8]
     d1e:	220a      	movs	r2, #10
     d20:	489d      	ldr	r0, [pc, #628]	; (f98 <run+0x304>)
     d22:	f7ff fffe 	bl	0 <do_test>
     d26:	68a1      	ldr	r1, [r4, #8]
     d28:	220b      	movs	r2, #11
     d2a:	489c      	ldr	r0, [pc, #624]	; (f9c <run+0x308>)
     d2c:	f7ff fffe 	bl	0 <do_test>
     d30:	68a1      	ldr	r1, [r4, #8]
     d32:	220c      	movs	r2, #12
     d34:	489a      	ldr	r0, [pc, #616]	; (fa0 <run+0x30c>)
     d36:	f7ff fffe 	bl	0 <do_test>
     d3a:	68a1      	ldr	r1, [r4, #8]
     d3c:	220d      	movs	r2, #13
     d3e:	4899      	ldr	r0, [pc, #612]	; (fa4 <run+0x310>)
     d40:	f7ff fffe 	bl	0 <do_test>
     d44:	68a1      	ldr	r1, [r4, #8]
     d46:	220e      	movs	r2, #14
     d48:	4897      	ldr	r0, [pc, #604]	; (fa8 <run+0x314>)
     d4a:	f7ff fffe 	bl	0 <do_test>
     d4e:	68a1      	ldr	r1, [r4, #8]
     d50:	220f      	movs	r2, #15
     d52:	4896      	ldr	r0, [pc, #600]	; (fac <run+0x318>)
     d54:	f7ff fffe 	bl	0 <do_test>
     d58:	68a1      	ldr	r1, [r4, #8]
     d5a:	2210      	movs	r2, #16
     d5c:	4894      	ldr	r0, [pc, #592]	; (fb0 <run+0x31c>)
     d5e:	f7ff fffe 	bl	0 <do_test>
     d62:	68a1      	ldr	r1, [r4, #8]
     d64:	2211      	movs	r2, #17
     d66:	4893      	ldr	r0, [pc, #588]	; (fb4 <run+0x320>)
     d68:	f7ff fffe 	bl	0 <do_test>
     d6c:	68a1      	ldr	r1, [r4, #8]
     d6e:	2212      	movs	r2, #18
     d70:	4891      	ldr	r0, [pc, #580]	; (fb8 <run+0x324>)
     d72:	f7ff fffe 	bl	0 <do_test>
     d76:	68a1      	ldr	r1, [r4, #8]
     d78:	2213      	movs	r2, #19
     d7a:	4890      	ldr	r0, [pc, #576]	; (fbc <run+0x328>)
     d7c:	f7ff fffe 	bl	0 <do_test>
     d80:	68a1      	ldr	r1, [r4, #8]
     d82:	2214      	movs	r2, #20
     d84:	488e      	ldr	r0, [pc, #568]	; (fc0 <run+0x32c>)
     d86:	f7ff fffe 	bl	0 <do_test>
     d8a:	68a1      	ldr	r1, [r4, #8]
     d8c:	2215      	movs	r2, #21
     d8e:	488d      	ldr	r0, [pc, #564]	; (fc4 <run+0x330>)
     d90:	f7ff fffe 	bl	0 <do_test>
     d94:	68a1      	ldr	r1, [r4, #8]
     d96:	2216      	movs	r2, #22
     d98:	488b      	ldr	r0, [pc, #556]	; (fc8 <run+0x334>)
     d9a:	f7ff fffe 	bl	0 <do_test>
     d9e:	68a1      	ldr	r1, [r4, #8]
     da0:	2217      	movs	r2, #23
     da2:	488a      	ldr	r0, [pc, #552]	; (fcc <run+0x338>)
     da4:	f7ff fffe 	bl	0 <do_test>
     da8:	68a1      	ldr	r1, [r4, #8]
     daa:	2218      	movs	r2, #24
     dac:	4888      	ldr	r0, [pc, #544]	; (fd0 <run+0x33c>)
     dae:	f7ff fffe 	bl	0 <do_test>
     db2:	68a1      	ldr	r1, [r4, #8]
     db4:	2219      	movs	r2, #25
     db6:	4887      	ldr	r0, [pc, #540]	; (fd4 <run+0x340>)
     db8:	f7ff fffe 	bl	0 <do_test>
     dbc:	68a1      	ldr	r1, [r4, #8]
     dbe:	221a      	movs	r2, #26
     dc0:	4885      	ldr	r0, [pc, #532]	; (fd8 <run+0x344>)
     dc2:	f7ff fffe 	bl	0 <do_test>
     dc6:	68a1      	ldr	r1, [r4, #8]
     dc8:	221b      	movs	r2, #27
     dca:	4884      	ldr	r0, [pc, #528]	; (fdc <run+0x348>)
     dcc:	f7ff fffe 	bl	0 <do_test>
     dd0:	68a1      	ldr	r1, [r4, #8]
     dd2:	221c      	movs	r2, #28
     dd4:	4882      	ldr	r0, [pc, #520]	; (fe0 <run+0x34c>)
     dd6:	f7ff fffe 	bl	0 <do_test>
     dda:	68a1      	ldr	r1, [r4, #8]
     ddc:	221d      	movs	r2, #29
     dde:	4881      	ldr	r0, [pc, #516]	; (fe4 <run+0x350>)
     de0:	f7ff fffe 	bl	0 <do_test>
     de4:	68a1      	ldr	r1, [r4, #8]
     de6:	221e      	movs	r2, #30
     de8:	487f      	ldr	r0, [pc, #508]	; (fe8 <run+0x354>)
     dea:	f7ff fffe 	bl	0 <do_test>
     dee:	68a1      	ldr	r1, [r4, #8]
     df0:	221f      	movs	r2, #31
     df2:	487e      	ldr	r0, [pc, #504]	; (fec <run+0x358>)
     df4:	f7ff fffe 	bl	0 <do_test>
     df8:	68a1      	ldr	r1, [r4, #8]
     dfa:	2220      	movs	r2, #32
     dfc:	487c      	ldr	r0, [pc, #496]	; (ff0 <run+0x35c>)
     dfe:	f7ff fffe 	bl	0 <do_test>
     e02:	68a1      	ldr	r1, [r4, #8]
     e04:	2221      	movs	r2, #33	; 0x21
     e06:	487b      	ldr	r0, [pc, #492]	; (ff4 <run+0x360>)
     e08:	f7ff fffe 	bl	0 <do_test>
     e0c:	68a1      	ldr	r1, [r4, #8]
     e0e:	2222      	movs	r2, #34	; 0x22
     e10:	4879      	ldr	r0, [pc, #484]	; (ff8 <run+0x364>)
     e12:	f7ff fffe 	bl	0 <do_test>
     e16:	68a1      	ldr	r1, [r4, #8]
     e18:	2223      	movs	r2, #35	; 0x23
     e1a:	4878      	ldr	r0, [pc, #480]	; (ffc <run+0x368>)
     e1c:	f7ff fffe 	bl	0 <do_test>
     e20:	68a1      	ldr	r1, [r4, #8]
     e22:	2224      	movs	r2, #36	; 0x24
     e24:	4876      	ldr	r0, [pc, #472]	; (1000 <run+0x36c>)
     e26:	f7ff fffe 	bl	0 <do_test>
     e2a:	6961      	ldr	r1, [r4, #20]
     e2c:	2225      	movs	r2, #37	; 0x25
     e2e:	4875      	ldr	r0, [pc, #468]	; (1004 <run+0x370>)
     e30:	f7ff fffe 	bl	0 <do_test>
     e34:	6961      	ldr	r1, [r4, #20]
     e36:	2226      	movs	r2, #38	; 0x26
     e38:	4873      	ldr	r0, [pc, #460]	; (1008 <run+0x374>)
     e3a:	f7ff fffe 	bl	0 <do_test>
     e3e:	6961      	ldr	r1, [r4, #20]
     e40:	2227      	movs	r2, #39	; 0x27
     e42:	4872      	ldr	r0, [pc, #456]	; (100c <run+0x378>)
     e44:	f7ff fffe 	bl	0 <do_test>
     e48:	68a1      	ldr	r1, [r4, #8]
     e4a:	2228      	movs	r2, #40	; 0x28
     e4c:	4870      	ldr	r0, [pc, #448]	; (1010 <run+0x37c>)
     e4e:	f7ff fffe 	bl	0 <do_test>
     e52:	68a1      	ldr	r1, [r4, #8]
     e54:	2229      	movs	r2, #41	; 0x29
     e56:	486f      	ldr	r0, [pc, #444]	; (1014 <run+0x380>)
     e58:	f7ff fffe 	bl	0 <do_test>
     e5c:	68a1      	ldr	r1, [r4, #8]
     e5e:	222a      	movs	r2, #42	; 0x2a
     e60:	486d      	ldr	r0, [pc, #436]	; (1018 <run+0x384>)
     e62:	f7ff fffe 	bl	0 <do_test>
     e66:	68a1      	ldr	r1, [r4, #8]
     e68:	222b      	movs	r2, #43	; 0x2b
     e6a:	486c      	ldr	r0, [pc, #432]	; (101c <run+0x388>)
     e6c:	f7ff fffe 	bl	0 <do_test>
     e70:	68a1      	ldr	r1, [r4, #8]
     e72:	222c      	movs	r2, #44	; 0x2c
     e74:	486a      	ldr	r0, [pc, #424]	; (1020 <run+0x38c>)
     e76:	f7ff fffe 	bl	0 <do_test>
     e7a:	6a21      	ldr	r1, [r4, #32]
     e7c:	222d      	movs	r2, #45	; 0x2d
     e7e:	4869      	ldr	r0, [pc, #420]	; (1024 <run+0x390>)
     e80:	f7ff fffe 	bl	0 <do_test>
     e84:	68a1      	ldr	r1, [r4, #8]
     e86:	222e      	movs	r2, #46	; 0x2e
     e88:	4867      	ldr	r0, [pc, #412]	; (1028 <run+0x394>)
     e8a:	f7ff fffe 	bl	0 <do_test>
     e8e:	68a1      	ldr	r1, [r4, #8]
     e90:	222f      	movs	r2, #47	; 0x2f
     e92:	4866      	ldr	r0, [pc, #408]	; (102c <run+0x398>)
     e94:	f7ff fffe 	bl	0 <do_test>
     e98:	68a1      	ldr	r1, [r4, #8]
     e9a:	2230      	movs	r2, #48	; 0x30
     e9c:	4864      	ldr	r0, [pc, #400]	; (1030 <run+0x39c>)
     e9e:	f7ff fffe 	bl	0 <do_test>
     ea2:	68a1      	ldr	r1, [r4, #8]
     ea4:	2231      	movs	r2, #49	; 0x31
     ea6:	4863      	ldr	r0, [pc, #396]	; (1034 <run+0x3a0>)
     ea8:	f7ff fffe 	bl	0 <do_test>
     eac:	68a1      	ldr	r1, [r4, #8]
     eae:	2232      	movs	r2, #50	; 0x32
     eb0:	4861      	ldr	r0, [pc, #388]	; (1038 <run+0x3a4>)
     eb2:	f7ff fffe 	bl	0 <do_test>
     eb6:	68a1      	ldr	r1, [r4, #8]
     eb8:	2233      	movs	r2, #51	; 0x33
     eba:	4860      	ldr	r0, [pc, #384]	; (103c <run+0x3a8>)
     ebc:	f7ff fffe 	bl	0 <do_test>
     ec0:	68a1      	ldr	r1, [r4, #8]
     ec2:	2234      	movs	r2, #52	; 0x34
     ec4:	485e      	ldr	r0, [pc, #376]	; (1040 <run+0x3ac>)
     ec6:	f7ff fffe 	bl	0 <do_test>
     eca:	68a1      	ldr	r1, [r4, #8]
     ecc:	2235      	movs	r2, #53	; 0x35
     ece:	485d      	ldr	r0, [pc, #372]	; (1044 <run+0x3b0>)
     ed0:	f7ff fffe 	bl	0 <do_test>
     ed4:	68a1      	ldr	r1, [r4, #8]
     ed6:	2236      	movs	r2, #54	; 0x36
     ed8:	485b      	ldr	r0, [pc, #364]	; (1048 <run+0x3b4>)
     eda:	f7ff fffe 	bl	0 <do_test>
     ede:	68a1      	ldr	r1, [r4, #8]
     ee0:	2237      	movs	r2, #55	; 0x37
     ee2:	485a      	ldr	r0, [pc, #360]	; (104c <run+0x3b8>)
     ee4:	f7ff fffe 	bl	0 <do_test>
     ee8:	68a1      	ldr	r1, [r4, #8]
     eea:	2238      	movs	r2, #56	; 0x38
     eec:	4858      	ldr	r0, [pc, #352]	; (1050 <run+0x3bc>)
     eee:	f7ff fffe 	bl	0 <do_test>
     ef2:	68a1      	ldr	r1, [r4, #8]
     ef4:	2239      	movs	r2, #57	; 0x39
     ef6:	4857      	ldr	r0, [pc, #348]	; (1054 <run+0x3c0>)
     ef8:	f7ff fffe 	bl	0 <do_test>
     efc:	68a1      	ldr	r1, [r4, #8]
     efe:	223a      	movs	r2, #58	; 0x3a
     f00:	4855      	ldr	r0, [pc, #340]	; (1058 <run+0x3c4>)
     f02:	f7ff fffe 	bl	0 <do_test>
     f06:	68a1      	ldr	r1, [r4, #8]
     f08:	223b      	movs	r2, #59	; 0x3b
     f0a:	4854      	ldr	r0, [pc, #336]	; (105c <run+0x3c8>)
     f0c:	f7ff fffe 	bl	0 <do_test>
     f10:	68a1      	ldr	r1, [r4, #8]
     f12:	223c      	movs	r2, #60	; 0x3c
     f14:	4852      	ldr	r0, [pc, #328]	; (1060 <run+0x3cc>)
     f16:	f7ff fffe 	bl	0 <do_test>
     f1a:	68a1      	ldr	r1, [r4, #8]
     f1c:	223d      	movs	r2, #61	; 0x3d
     f1e:	4851      	ldr	r0, [pc, #324]	; (1064 <run+0x3d0>)
     f20:	f7ff fffe 	bl	0 <do_test>
     f24:	68a1      	ldr	r1, [r4, #8]
     f26:	223e      	movs	r2, #62	; 0x3e
     f28:	484f      	ldr	r0, [pc, #316]	; (1068 <run+0x3d4>)
     f2a:	f7ff fffe 	bl	0 <do_test>
     f2e:	68a1      	ldr	r1, [r4, #8]
     f30:	223f      	movs	r2, #63	; 0x3f
     f32:	484e      	ldr	r0, [pc, #312]	; (106c <run+0x3d8>)
     f34:	f7ff fffe 	bl	0 <do_test>
     f38:	68a1      	ldr	r1, [r4, #8]
     f3a:	2240      	movs	r2, #64	; 0x40
     f3c:	484c      	ldr	r0, [pc, #304]	; (1070 <run+0x3dc>)
     f3e:	f7ff fffe 	bl	0 <do_test>
     f42:	68a1      	ldr	r1, [r4, #8]
     f44:	2241      	movs	r2, #65	; 0x41
     f46:	484b      	ldr	r0, [pc, #300]	; (1074 <run+0x3e0>)
     f48:	f7ff fffe 	bl	0 <do_test>
     f4c:	6961      	ldr	r1, [r4, #20]
     f4e:	2242      	movs	r2, #66	; 0x42
     f50:	4849      	ldr	r0, [pc, #292]	; (1078 <run+0x3e4>)
     f52:	f7ff fffe 	bl	0 <do_test>
     f56:	6961      	ldr	r1, [r4, #20]
     f58:	2243      	movs	r2, #67	; 0x43
     f5a:	4848      	ldr	r0, [pc, #288]	; (107c <run+0x3e8>)
     f5c:	f7ff fffe 	bl	0 <do_test>
     f60:	e08e      	b.n	1080 <run+0x3ec>
     f62:	bf00      	nop
     f64:	00000000 	.word	0x00000000
     f68:	200023e4 	.word	0x200023e4
     f6c:	200022ec 	.word	0x200022ec
	...
    1080:	6961      	ldr	r1, [r4, #20]
    1082:	2244      	movs	r2, #68	; 0x44
    1084:	487f      	ldr	r0, [pc, #508]	; (1284 <run+0x5f0>)
    1086:	f7ff fffe 	bl	0 <do_test>
    108a:	68a1      	ldr	r1, [r4, #8]
    108c:	2245      	movs	r2, #69	; 0x45
    108e:	487e      	ldr	r0, [pc, #504]	; (1288 <run+0x5f4>)
    1090:	f7ff fffe 	bl	0 <do_test>
    1094:	6a21      	ldr	r1, [r4, #32]
    1096:	2246      	movs	r2, #70	; 0x46
    1098:	487c      	ldr	r0, [pc, #496]	; (128c <run+0x5f8>)
    109a:	f7ff fffe 	bl	0 <do_test>
    109e:	6a21      	ldr	r1, [r4, #32]
    10a0:	2247      	movs	r2, #71	; 0x47
    10a2:	487b      	ldr	r0, [pc, #492]	; (1290 <run+0x5fc>)
    10a4:	f7ff fffe 	bl	0 <do_test>
    10a8:	68a1      	ldr	r1, [r4, #8]
    10aa:	2248      	movs	r2, #72	; 0x48
    10ac:	4879      	ldr	r0, [pc, #484]	; (1294 <run+0x600>)
    10ae:	f7ff fffe 	bl	0 <do_test>
    10b2:	68a1      	ldr	r1, [r4, #8]
    10b4:	2249      	movs	r2, #73	; 0x49
    10b6:	4878      	ldr	r0, [pc, #480]	; (1298 <run+0x604>)
    10b8:	f7ff fffe 	bl	0 <do_test>
    10bc:	6a21      	ldr	r1, [r4, #32]
    10be:	224a      	movs	r2, #74	; 0x4a
    10c0:	4876      	ldr	r0, [pc, #472]	; (129c <run+0x608>)
    10c2:	f7ff fffe 	bl	0 <do_test>
    10c6:	6a21      	ldr	r1, [r4, #32]
    10c8:	224b      	movs	r2, #75	; 0x4b
    10ca:	4875      	ldr	r0, [pc, #468]	; (12a0 <run+0x60c>)
    10cc:	f7ff fffe 	bl	0 <do_test>
    10d0:	68a1      	ldr	r1, [r4, #8]
    10d2:	224c      	movs	r2, #76	; 0x4c
    10d4:	4873      	ldr	r0, [pc, #460]	; (12a4 <run+0x610>)
    10d6:	f7ff fffe 	bl	0 <do_test>
    10da:	68a1      	ldr	r1, [r4, #8]
    10dc:	224d      	movs	r2, #77	; 0x4d
    10de:	4872      	ldr	r0, [pc, #456]	; (12a8 <run+0x614>)
    10e0:	f7ff fffe 	bl	0 <do_test>
    10e4:	68a1      	ldr	r1, [r4, #8]
    10e6:	224e      	movs	r2, #78	; 0x4e
    10e8:	4870      	ldr	r0, [pc, #448]	; (12ac <run+0x618>)
    10ea:	f7ff fffe 	bl	0 <do_test>
    10ee:	68a1      	ldr	r1, [r4, #8]
    10f0:	224f      	movs	r2, #79	; 0x4f
    10f2:	486f      	ldr	r0, [pc, #444]	; (12b0 <run+0x61c>)
    10f4:	f7ff fffe 	bl	0 <do_test>
    10f8:	68a1      	ldr	r1, [r4, #8]
    10fa:	2250      	movs	r2, #80	; 0x50
    10fc:	486d      	ldr	r0, [pc, #436]	; (12b4 <run+0x620>)
    10fe:	f7ff fffe 	bl	0 <do_test>
    1102:	68a1      	ldr	r1, [r4, #8]
    1104:	2251      	movs	r2, #81	; 0x51
    1106:	486c      	ldr	r0, [pc, #432]	; (12b8 <run+0x624>)
    1108:	f7ff fffe 	bl	0 <do_test>
    110c:	68a1      	ldr	r1, [r4, #8]
    110e:	2252      	movs	r2, #82	; 0x52
    1110:	486a      	ldr	r0, [pc, #424]	; (12bc <run+0x628>)
    1112:	f7ff fffe 	bl	0 <do_test>
    1116:	68a1      	ldr	r1, [r4, #8]
    1118:	2253      	movs	r2, #83	; 0x53
    111a:	4868      	ldr	r0, [pc, #416]	; (12bc <run+0x628>)
    111c:	f7ff fffe 	bl	0 <do_test>
    1120:	68a1      	ldr	r1, [r4, #8]
    1122:	2254      	movs	r2, #84	; 0x54
    1124:	4866      	ldr	r0, [pc, #408]	; (12c0 <run+0x62c>)
    1126:	f7ff fffe 	bl	0 <do_test>
    112a:	68a1      	ldr	r1, [r4, #8]
    112c:	2255      	movs	r2, #85	; 0x55
    112e:	4865      	ldr	r0, [pc, #404]	; (12c4 <run+0x630>)
    1130:	f7ff fffe 	bl	0 <do_test>
    1134:	68a1      	ldr	r1, [r4, #8]
    1136:	2256      	movs	r2, #86	; 0x56
    1138:	4863      	ldr	r0, [pc, #396]	; (12c8 <run+0x634>)
    113a:	f7ff fffe 	bl	0 <do_test>
    113e:	68a1      	ldr	r1, [r4, #8]
    1140:	2257      	movs	r2, #87	; 0x57
    1142:	4862      	ldr	r0, [pc, #392]	; (12cc <run+0x638>)
    1144:	f7ff fffe 	bl	0 <do_test>
    1148:	68a1      	ldr	r1, [r4, #8]
    114a:	2258      	movs	r2, #88	; 0x58
    114c:	4860      	ldr	r0, [pc, #384]	; (12d0 <run+0x63c>)
    114e:	f7ff fffe 	bl	0 <do_test>
    1152:	68a1      	ldr	r1, [r4, #8]
    1154:	2259      	movs	r2, #89	; 0x59
    1156:	485d      	ldr	r0, [pc, #372]	; (12cc <run+0x638>)
    1158:	f7ff fffe 	bl	0 <do_test>
    115c:	68a1      	ldr	r1, [r4, #8]
    115e:	225a      	movs	r2, #90	; 0x5a
    1160:	485c      	ldr	r0, [pc, #368]	; (12d4 <run+0x640>)
    1162:	f7ff fffe 	bl	0 <do_test>
    1166:	68a1      	ldr	r1, [r4, #8]
    1168:	225b      	movs	r2, #91	; 0x5b
    116a:	485b      	ldr	r0, [pc, #364]	; (12d8 <run+0x644>)
    116c:	f7ff fffe 	bl	0 <do_test>
    1170:	6a21      	ldr	r1, [r4, #32]
    1172:	225c      	movs	r2, #92	; 0x5c
    1174:	4859      	ldr	r0, [pc, #356]	; (12dc <run+0x648>)
    1176:	f7ff fffe 	bl	0 <do_test>
    117a:	6a21      	ldr	r1, [r4, #32]
    117c:	225d      	movs	r2, #93	; 0x5d
    117e:	4858      	ldr	r0, [pc, #352]	; (12e0 <run+0x64c>)
    1180:	f7ff fffe 	bl	0 <do_test>
    1184:	68a1      	ldr	r1, [r4, #8]
    1186:	225e      	movs	r2, #94	; 0x5e
    1188:	4856      	ldr	r0, [pc, #344]	; (12e4 <run+0x650>)
    118a:	f7ff fffe 	bl	0 <do_test>
    118e:	6a21      	ldr	r1, [r4, #32]
    1190:	225f      	movs	r2, #95	; 0x5f
    1192:	4855      	ldr	r0, [pc, #340]	; (12e8 <run+0x654>)
    1194:	f7ff fffe 	bl	0 <do_test>
    1198:	6a21      	ldr	r1, [r4, #32]
    119a:	2260      	movs	r2, #96	; 0x60
    119c:	4853      	ldr	r0, [pc, #332]	; (12ec <run+0x658>)
    119e:	f7ff fffe 	bl	0 <do_test>
    11a2:	68a1      	ldr	r1, [r4, #8]
    11a4:	2261      	movs	r2, #97	; 0x61
    11a6:	4852      	ldr	r0, [pc, #328]	; (12f0 <run+0x65c>)
    11a8:	f7ff fffe 	bl	0 <do_test>
    11ac:	68a1      	ldr	r1, [r4, #8]
    11ae:	2262      	movs	r2, #98	; 0x62
    11b0:	4850      	ldr	r0, [pc, #320]	; (12f4 <run+0x660>)
    11b2:	f7ff fffe 	bl	0 <do_test>
    11b6:	68a1      	ldr	r1, [r4, #8]
    11b8:	2263      	movs	r2, #99	; 0x63
    11ba:	484f      	ldr	r0, [pc, #316]	; (12f8 <run+0x664>)
    11bc:	f7ff fffe 	bl	0 <do_test>
    11c0:	68a1      	ldr	r1, [r4, #8]
    11c2:	2264      	movs	r2, #100	; 0x64
    11c4:	484d      	ldr	r0, [pc, #308]	; (12fc <run+0x668>)
    11c6:	f7ff fffe 	bl	0 <do_test>
    11ca:	6a21      	ldr	r1, [r4, #32]
    11cc:	2265      	movs	r2, #101	; 0x65
    11ce:	484c      	ldr	r0, [pc, #304]	; (1300 <run+0x66c>)
    11d0:	f7ff fffe 	bl	0 <do_test>
    11d4:	6a21      	ldr	r1, [r4, #32]
    11d6:	2266      	movs	r2, #102	; 0x66
    11d8:	484a      	ldr	r0, [pc, #296]	; (1304 <run+0x670>)
    11da:	f7ff fffe 	bl	0 <do_test>
    11de:	6a21      	ldr	r1, [r4, #32]
    11e0:	2267      	movs	r2, #103	; 0x67
    11e2:	4849      	ldr	r0, [pc, #292]	; (1308 <run+0x674>)
    11e4:	f7ff fffe 	bl	0 <do_test>
    11e8:	6a21      	ldr	r1, [r4, #32]
    11ea:	2268      	movs	r2, #104	; 0x68
    11ec:	4847      	ldr	r0, [pc, #284]	; (130c <run+0x678>)
    11ee:	f7ff fffe 	bl	0 <do_test>
    11f2:	6a21      	ldr	r1, [r4, #32]
    11f4:	2269      	movs	r2, #105	; 0x69
    11f6:	4846      	ldr	r0, [pc, #280]	; (1310 <run+0x67c>)
    11f8:	f7ff fffe 	bl	0 <do_test>
    11fc:	6a21      	ldr	r1, [r4, #32]
    11fe:	226a      	movs	r2, #106	; 0x6a
    1200:	4844      	ldr	r0, [pc, #272]	; (1314 <run+0x680>)
    1202:	f7ff fffe 	bl	0 <do_test>
    1206:	68a1      	ldr	r1, [r4, #8]
    1208:	226b      	movs	r2, #107	; 0x6b
    120a:	4843      	ldr	r0, [pc, #268]	; (1318 <run+0x684>)
    120c:	f7ff fffe 	bl	0 <do_test>
    1210:	68a1      	ldr	r1, [r4, #8]
    1212:	226c      	movs	r2, #108	; 0x6c
    1214:	4841      	ldr	r0, [pc, #260]	; (131c <run+0x688>)
    1216:	f7ff fffe 	bl	0 <do_test>
    121a:	68a1      	ldr	r1, [r4, #8]
    121c:	226d      	movs	r2, #109	; 0x6d
    121e:	4840      	ldr	r0, [pc, #256]	; (1320 <run+0x68c>)
    1220:	f7ff fffe 	bl	0 <do_test>
    1224:	68a1      	ldr	r1, [r4, #8]
    1226:	226e      	movs	r2, #110	; 0x6e
    1228:	483e      	ldr	r0, [pc, #248]	; (1324 <run+0x690>)
    122a:	f7ff fffe 	bl	0 <do_test>
    122e:	68a1      	ldr	r1, [r4, #8]
    1230:	226f      	movs	r2, #111	; 0x6f
    1232:	483d      	ldr	r0, [pc, #244]	; (1328 <run+0x694>)
    1234:	f7ff fffe 	bl	0 <do_test>
    1238:	68a1      	ldr	r1, [r4, #8]
    123a:	2270      	movs	r2, #112	; 0x70
    123c:	483b      	ldr	r0, [pc, #236]	; (132c <run+0x698>)
    123e:	f7ff fffe 	bl	0 <do_test>
    1242:	68a1      	ldr	r1, [r4, #8]
    1244:	2271      	movs	r2, #113	; 0x71
    1246:	483a      	ldr	r0, [pc, #232]	; (1330 <run+0x69c>)
    1248:	f7ff fffe 	bl	0 <do_test>
    124c:	68a1      	ldr	r1, [r4, #8]
    124e:	2272      	movs	r2, #114	; 0x72
    1250:	4838      	ldr	r0, [pc, #224]	; (1334 <run+0x6a0>)
    1252:	f7ff fffe 	bl	0 <do_test>
    1256:	68a1      	ldr	r1, [r4, #8]
    1258:	2273      	movs	r2, #115	; 0x73
    125a:	4837      	ldr	r0, [pc, #220]	; (1338 <run+0x6a4>)
    125c:	f7ff fffe 	bl	0 <do_test>
    1260:	68a1      	ldr	r1, [r4, #8]
    1262:	2274      	movs	r2, #116	; 0x74
    1264:	4835      	ldr	r0, [pc, #212]	; (133c <run+0x6a8>)
    1266:	f7ff fffe 	bl	0 <do_test>
    126a:	68a1      	ldr	r1, [r4, #8]
    126c:	2275      	movs	r2, #117	; 0x75
    126e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1272:	4833      	ldr	r0, [pc, #204]	; (d0 <do_test+0xd0>)
    1274:	f7ff bffe 	b.w	0 <do_test>
    1278:	2301      	movs	r3, #1
    127a:	4932      	ldr	r1, [pc, #200]	; (1344 <run+0x6b0>)
    127c:	7023      	strb	r3, [r4, #0]
    127e:	60a1      	str	r1, [r4, #8]
    1280:	e50f      	b.n	ca2 <run+0xe>
    1282:	bf00      	nop
	...
    1344:	20002484 	.word	0x20002484

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	00000000                                ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	00000000                                ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	00000000                                ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
