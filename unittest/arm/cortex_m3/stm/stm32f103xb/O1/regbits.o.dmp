
O1/regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       2:	2200      	movs	r2, #0
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	20002480 	.word	0x20002480

0000000c <zero_array()>:
       c:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
       e:	2200      	movs	r2, #0
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	200022c0 	.word	0x200022c0

00000018 <set_singl_bits_operator()>:
      18:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1a:	6853      	ldr	r3, [r2, #4]
      1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	20002480 	.word	0x20002480

00000028 <set_singl_bits_method()>:
      28:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2a:	6853      	ldr	r3, [r2, #4]
      2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	20002480 	.word	0x20002480

00000038 <clr_singl_bits_operator()>:
      38:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3a:	6853      	ldr	r3, [r2, #4]
      3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	20002480 	.word	0x20002480

00000048 <clr_singl_bits_method()>:
      48:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4a:	6853      	ldr	r3, [r2, #4]
      4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	20002480 	.word	0x20002480

00000058 <set_singl_mskd_operator()>:
      58:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5a:	6853      	ldr	r3, [r2, #4]
      5c:	f043 0302 	orr.w	r3, r3, #2
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	20002480 	.word	0x20002480

00000068 <set_singl_mskd_method()>:
      68:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6a:	6853      	ldr	r3, [r2, #4]
      6c:	f043 0302 	orr.w	r3, r3, #2
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	20002480 	.word	0x20002480

00000078 <clr_singl_mskd_operator()>:
      78:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7a:	6853      	ldr	r3, [r2, #4]
      7c:	f023 0302 	bic.w	r3, r3, #2
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	20002480 	.word	0x20002480

00000088 <clr_singl_mskd_method()>:
      88:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8a:	6853      	ldr	r3, [r2, #4]
      8c:	f023 0302 	bic.w	r3, r3, #2
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	20002480 	.word	0x20002480

00000098 <equ_singl_bits_operator()>:
      98:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9a:	2240      	movs	r2, #64	; 0x40
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	20002480 	.word	0x20002480

000000a4 <equ_singl_bits_method()>:
      a4:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a6:	2240      	movs	r2, #64	; 0x40
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	20002480 	.word	0x20002480

000000b0 <equ_singl_mskd_operator()>:
      b0:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b2:	2202      	movs	r2, #2
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	20002480 	.word	0x20002480

000000bc <equ_singl_mskd_method()>:
      bc:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      be:	2202      	movs	r2, #2
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	20002480 	.word	0x20002480

000000c8 <flp_singl_bits_operator()>:
      c8:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      ca:	6853      	ldr	r3, [r2, #4]
      cc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	20002480 	.word	0x20002480

000000d8 <flp_singl_bits_method()>:
      d8:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      da:	6853      	ldr	r3, [r2, #4]
      dc:	f083 0340 	eor.w	r3, r3, #64	; 0x40
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	20002480 	.word	0x20002480

000000e8 <flp_singl_mskd_operator()>:
      e8:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ea:	6853      	ldr	r3, [r2, #4]
      ec:	f083 0302 	eor.w	r3, r3, #2
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	20002480 	.word	0x20002480

000000f8 <flp_singl_mskd_method()>:
      f8:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fa:	6853      	ldr	r3, [r2, #4]
      fc:	f083 0302 	eor.w	r3, r3, #2
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	20002480 	.word	0x20002480

00000108 <ins_singl_mskd_operator()>:
     108:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10a:	6853      	ldr	r3, [r2, #4]
     10c:	f023 0306 	bic.w	r3, r3, #6
     110:	f043 0304 	orr.w	r3, r3, #4
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	20002480 	.word	0x20002480

0000011c <ins_singl_mskd_method()>:
     11c:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     11e:	6853      	ldr	r3, [r2, #4]
     120:	f023 0306 	bic.w	r3, r3, #6
     124:	f043 0304 	orr.w	r3, r3, #4
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	20002480 	.word	0x20002480

00000130 <set_multi_bits_operator()>:
     130:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     132:	6853      	ldr	r3, [r2, #4]
     134:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	20002480 	.word	0x20002480

00000140 <set_multi_bits_method()>:
     140:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     142:	6853      	ldr	r3, [r2, #4]
     144:	f043 0321 	orr.w	r3, r3, #33	; 0x21
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	20002480 	.word	0x20002480

00000150 <ins_multi_mskd_operator()>:
     150:	4a04      	ldr	r2, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	6853      	ldr	r3, [r2, #4]
     154:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     158:	f023 0306 	bic.w	r3, r3, #6
     15c:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     160:	6053      	str	r3, [r2, #4]
     162:	4770      	bx	lr
     164:	20002480 	.word	0x20002480

00000168 <ins_multi_mskd_method()>:
     168:	4a04      	ldr	r2, [pc, #16]	; (17c <ins_multi_mskd_method()+0x14>)
     16a:	6853      	ldr	r3, [r2, #4]
     16c:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
     170:	f023 0306 	bic.w	r3, r3, #6
     174:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
     178:	6053      	str	r3, [r2, #4]
     17a:	4770      	bx	lr
     17c:	20002480 	.word	0x20002480

00000180 <equ_multi_bits_operator()>:
     180:	4b01      	ldr	r3, [pc, #4]	; (188 <equ_multi_bits_operator()+0x8>)
     182:	2260      	movs	r2, #96	; 0x60
     184:	605a      	str	r2, [r3, #4]
     186:	4770      	bx	lr
     188:	20002480 	.word	0x20002480

0000018c <equ_multi_bits_method()>:
     18c:	4b01      	ldr	r3, [pc, #4]	; (194 <equ_multi_bits_method()+0x8>)
     18e:	2260      	movs	r2, #96	; 0x60
     190:	605a      	str	r2, [r3, #4]
     192:	4770      	bx	lr
     194:	20002480 	.word	0x20002480

00000198 <equ_multi_mskd_operator()>:
     198:	4b02      	ldr	r3, [pc, #8]	; (1a4 <equ_multi_mskd_operator()+0xc>)
     19a:	f44f 7242 	mov.w	r2, #776	; 0x308
     19e:	605a      	str	r2, [r3, #4]
     1a0:	4770      	bx	lr
     1a2:	bf00      	nop
     1a4:	20002480 	.word	0x20002480

000001a8 <equ_multi_mskd_method()>:
     1a8:	4b02      	ldr	r3, [pc, #8]	; (1b4 <equ_multi_mskd_method()+0xc>)
     1aa:	f44f 7242 	mov.w	r2, #776	; 0x308
     1ae:	605a      	str	r2, [r3, #4]
     1b0:	4770      	bx	lr
     1b2:	bf00      	nop
     1b4:	20002480 	.word	0x20002480

000001b8 <equ_bits_mskd_operator()>:
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <equ_bits_mskd_operator()+0x8>)
     1ba:	2222      	movs	r2, #34	; 0x22
     1bc:	605a      	str	r2, [r3, #4]
     1be:	4770      	bx	lr
     1c0:	20002480 	.word	0x20002480

000001c4 <equ_bits_mskd_method()>:
     1c4:	4b01      	ldr	r3, [pc, #4]	; (1cc <equ_bits_mskd_method()+0x8>)
     1c6:	2222      	movs	r2, #34	; 0x22
     1c8:	605a      	str	r2, [r3, #4]
     1ca:	4770      	bx	lr
     1cc:	20002480 	.word	0x20002480

000001d0 <equ_mskd_bits_operator()>:
     1d0:	4b01      	ldr	r3, [pc, #4]	; (1d8 <equ_mskd_bits_operator()+0x8>)
     1d2:	2244      	movs	r2, #68	; 0x44
     1d4:	605a      	str	r2, [r3, #4]
     1d6:	4770      	bx	lr
     1d8:	20002480 	.word	0x20002480

000001dc <equ_mskd_bits_method()>:
     1dc:	4b01      	ldr	r3, [pc, #4]	; (1e4 <equ_mskd_bits_method()+0x8>)
     1de:	2244      	movs	r2, #68	; 0x44
     1e0:	605a      	str	r2, [r3, #4]
     1e2:	4770      	bx	lr
     1e4:	20002480 	.word	0x20002480

000001e8 <equ_bits_var()>:
     1e8:	4b02      	ldr	r3, [pc, #8]	; (1f4 <equ_bits_var()+0xc>)
     1ea:	2240      	movs	r2, #64	; 0x40
     1ec:	605a      	str	r2, [r3, #4]
     1ee:	2201      	movs	r2, #1
     1f0:	605a      	str	r2, [r3, #4]
     1f2:	4770      	bx	lr
     1f4:	20002480 	.word	0x20002480

000001f8 <equ_mskd_var()>:
     1f8:	4b03      	ldr	r3, [pc, #12]	; (208 <equ_mskd_var()+0x10>)
     1fa:	2202      	movs	r2, #2
     1fc:	605a      	str	r2, [r3, #4]
     1fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
     202:	605a      	str	r2, [r3, #4]
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	20002480 	.word	0x20002480

0000020c <cmp_equ_zero()>:
     20c:	4b07      	ldr	r3, [pc, #28]	; (22c <cmp_equ_zero()+0x20>)
     20e:	2200      	movs	r2, #0
     210:	605a      	str	r2, [r3, #4]
     212:	685b      	ldr	r3, [r3, #4]
     214:	b923      	cbnz	r3, 220 <cmp_equ_zero()+0x14>
     216:	4b06      	ldr	r3, [pc, #24]	; (230 <cmp_equ_zero()+0x24>)
     218:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     21c:	605a      	str	r2, [r3, #4]
     21e:	4770      	bx	lr
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <cmp_equ_zero()+0x24>)
     222:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	bf00      	nop
     22c:	20002480 	.word	0x20002480
     230:	200023e0 	.word	0x200023e0

00000234 <cmp_neq_zero()>:
     234:	4b06      	ldr	r3, [pc, #24]	; (250 <cmp_neq_zero()+0x1c>)
     236:	2200      	movs	r2, #0
     238:	605a      	str	r2, [r3, #4]
     23a:	685b      	ldr	r3, [r3, #4]
     23c:	b11b      	cbz	r3, 246 <cmp_neq_zero()+0x12>
     23e:	4b04      	ldr	r3, [pc, #16]	; (250 <cmp_neq_zero()+0x1c>)
     240:	2204      	movs	r2, #4
     242:	605a      	str	r2, [r3, #4]
     244:	4770      	bx	lr
     246:	4b02      	ldr	r3, [pc, #8]	; (250 <cmp_neq_zero()+0x1c>)
     248:	2220      	movs	r2, #32
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	bf00      	nop
     250:	20002480 	.word	0x20002480

00000254 <cmp_equ_bits()>:
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <cmp_equ_bits()+0x1c>)
     256:	2240      	movs	r2, #64	; 0x40
     258:	605a      	str	r2, [r3, #4]
     25a:	685b      	ldr	r3, [r3, #4]
     25c:	f013 0f40 	tst.w	r3, #64	; 0x40
     260:	4b04      	ldr	r3, [pc, #16]	; (274 <cmp_equ_bits()+0x20>)
     262:	bf14      	ite	ne
     264:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
     268:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
     26c:	605a      	str	r2, [r3, #4]
     26e:	4770      	bx	lr
     270:	20002480 	.word	0x20002480
     274:	200023e0 	.word	0x200023e0

00000278 <cmp_neq_bits()>:
     278:	4b05      	ldr	r3, [pc, #20]	; (290 <cmp_neq_bits()+0x18>)
     27a:	2240      	movs	r2, #64	; 0x40
     27c:	605a      	str	r2, [r3, #4]
     27e:	685b      	ldr	r3, [r3, #4]
     280:	f013 0f40 	tst.w	r3, #64	; 0x40
     284:	4b02      	ldr	r3, [pc, #8]	; (290 <cmp_neq_bits()+0x18>)
     286:	bf0c      	ite	eq
     288:	2202      	moveq	r2, #2
     28a:	2220      	movne	r2, #32
     28c:	605a      	str	r2, [r3, #4]
     28e:	4770      	bx	lr
     290:	20002480 	.word	0x20002480

00000294 <cmp_equ_multi_bits()>:
     294:	4b06      	ldr	r3, [pc, #24]	; (2b0 <cmp_equ_multi_bits()+0x1c>)
     296:	2260      	movs	r2, #96	; 0x60
     298:	605a      	str	r2, [r3, #4]
     29a:	685b      	ldr	r3, [r3, #4]
     29c:	4013      	ands	r3, r2
     29e:	4293      	cmp	r3, r2
     2a0:	4b04      	ldr	r3, [pc, #16]	; (2b4 <cmp_equ_multi_bits()+0x20>)
     2a2:	bf0c      	ite	eq
     2a4:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
     2a8:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     2ac:	605a      	str	r2, [r3, #4]
     2ae:	4770      	bx	lr
     2b0:	20002480 	.word	0x20002480
     2b4:	200023e0 	.word	0x200023e0

000002b8 <cmp_neq_multi_bits()>:
     2b8:	4b06      	ldr	r3, [pc, #24]	; (2d4 <cmp_neq_multi_bits()+0x1c>)
     2ba:	2260      	movs	r2, #96	; 0x60
     2bc:	605a      	str	r2, [r3, #4]
     2be:	685b      	ldr	r3, [r3, #4]
     2c0:	4013      	ands	r3, r2
     2c2:	4293      	cmp	r3, r2
     2c4:	4b04      	ldr	r3, [pc, #16]	; (2d8 <cmp_neq_multi_bits()+0x20>)
     2c6:	bf14      	ite	ne
     2c8:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
     2cc:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
     2d0:	605a      	str	r2, [r3, #4]
     2d2:	4770      	bx	lr
     2d4:	20002480 	.word	0x20002480
     2d8:	200023e0 	.word	0x200023e0

000002dc <cmp_equ_mskd()>:
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <cmp_equ_mskd()+0x28>)
     2de:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     2e2:	605a      	str	r2, [r3, #4]
     2e4:	685b      	ldr	r3, [r3, #4]
     2e6:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     2ea:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     2ee:	4a06      	ldr	r2, [pc, #24]	; (308 <cmp_equ_mskd()+0x2c>)
     2f0:	6853      	ldr	r3, [r2, #4]
     2f2:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
     2f6:	bf0c      	ite	eq
     2f8:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
     2fc:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
     300:	6053      	str	r3, [r2, #4]
     302:	4770      	bx	lr
     304:	20002480 	.word	0x20002480
     308:	200023e0 	.word	0x200023e0

0000030c <cmp_neq_mskd()>:
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <cmp_neq_mskd()+0x28>)
     30e:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
     312:	605a      	str	r2, [r3, #4]
     314:	685b      	ldr	r3, [r3, #4]
     316:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
     31a:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
     31e:	4a05      	ldr	r2, [pc, #20]	; (334 <cmp_neq_mskd()+0x28>)
     320:	6853      	ldr	r3, [r2, #4]
     322:	bf1a      	itte	ne
     324:	f023 0306 	bicne.w	r3, r3, #6
     328:	f043 0304 	orrne.w	r3, r3, #4
     32c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
     330:	6053      	str	r3, [r2, #4]
     332:	4770      	bx	lr
     334:	20002480 	.word	0x20002480

00000338 <cmp_equ_reg()>:
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <cmp_equ_reg()+0x1c>)
     33a:	2222      	movs	r2, #34	; 0x22
     33c:	605a      	str	r2, [r3, #4]
     33e:	685b      	ldr	r3, [r3, #4]
     340:	4293      	cmp	r3, r2
     342:	4b05      	ldr	r3, [pc, #20]	; (358 <cmp_equ_reg()+0x20>)
     344:	bf0c      	ite	eq
     346:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     34a:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     34e:	605a      	str	r2, [r3, #4]
     350:	4770      	bx	lr
     352:	bf00      	nop
     354:	20002480 	.word	0x20002480
     358:	200023e0 	.word	0x200023e0

0000035c <cmp_neq_reg()>:
     35c:	4b05      	ldr	r3, [pc, #20]	; (374 <cmp_neq_reg()+0x18>)
     35e:	2222      	movs	r2, #34	; 0x22
     360:	605a      	str	r2, [r3, #4]
     362:	685b      	ldr	r3, [r3, #4]
     364:	4293      	cmp	r3, r2
     366:	4b03      	ldr	r3, [pc, #12]	; (374 <cmp_neq_reg()+0x18>)
     368:	bf14      	ite	ne
     36a:	2202      	movne	r2, #2
     36c:	2220      	moveq	r2, #32
     36e:	605a      	str	r2, [r3, #4]
     370:	4770      	bx	lr
     372:	bf00      	nop
     374:	20002480 	.word	0x20002480

00000378 <constexpr_bits_array()>:
     378:	4b03      	ldr	r3, [pc, #12]	; (388 <constexpr_bits_array()+0x10>)
     37a:	2206      	movs	r2, #6
     37c:	62da      	str	r2, [r3, #44]	; 0x2c
     37e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     382:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     386:	4770      	bx	lr
     388:	200022c0 	.word	0x200022c0

0000038c <runtime_bits_array()>:
     38c:	b081      	sub	sp, #4
     38e:	2303      	movs	r3, #3
     390:	9300      	str	r3, [sp, #0]
     392:	9b00      	ldr	r3, [sp, #0]
     394:	009b      	lsls	r3, r3, #2
     396:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
     39a:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
     39e:	2221      	movs	r2, #33	; 0x21
     3a0:	621a      	str	r2, [r3, #32]
     3a2:	b001      	add	sp, #4
     3a4:	4770      	bx	lr

000003a6 <prescaler_low()>:
     3a6:	4b04      	ldr	r3, [pc, #16]	; (3b8 <prescaler_low()+0x12>)
     3a8:	2277      	movs	r2, #119	; 0x77
     3aa:	605a      	str	r2, [r3, #4]
     3ac:	685b      	ldr	r3, [r3, #4]
     3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     3b2:	4a02      	ldr	r2, [pc, #8]	; (3bc <prescaler_low()+0x16>)
     3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
     3b6:	4770      	bx	lr
     3b8:	200023e0 	.word	0x200023e0
     3bc:	200022c0 	.word	0x200022c0

000003c0 <prescaler_high()>:
     3c0:	4b04      	ldr	r3, [pc, #16]	; (3d4 <prescaler_high()+0x14>)
     3c2:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
     3c6:	605a      	str	r2, [r3, #4]
     3c8:	685b      	ldr	r3, [r3, #4]
     3ca:	f3c3 6344 	ubfx	r3, r3, #25, #5
     3ce:	4a02      	ldr	r2, [pc, #8]	; (3d8 <prescaler_high()+0x18>)
     3d0:	62d3      	str	r3, [r2, #44]	; 0x2c
     3d2:	4770      	bx	lr
     3d4:	200023e0 	.word	0x200023e0
     3d8:	200022c0 	.word	0x200022c0

000003dc <reg_mskd_lss()>:
     3dc:	4b07      	ldr	r3, [pc, #28]	; (3fc <reg_mskd_lss()+0x20>)
     3de:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     3e2:	605a      	str	r2, [r3, #4]
     3e4:	685b      	ldr	r3, [r3, #4]
     3e6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     3ea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     3ee:	4b04      	ldr	r3, [pc, #16]	; (400 <reg_mskd_lss()+0x24>)
     3f0:	bf34      	ite	cc
     3f2:	2202      	movcc	r2, #2
     3f4:	2204      	movcs	r2, #4
     3f6:	605a      	str	r2, [r3, #4]
     3f8:	4770      	bx	lr
     3fa:	bf00      	nop
     3fc:	200023e0 	.word	0x200023e0
     400:	20002480 	.word	0x20002480

00000404 <reg_mskd_leq()>:
     404:	4b0b      	ldr	r3, [pc, #44]	; (434 <reg_mskd_leq()+0x30>)
     406:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     40a:	605a      	str	r2, [r3, #4]
     40c:	685b      	ldr	r3, [r3, #4]
     40e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     412:	4293      	cmp	r3, r2
     414:	d80a      	bhi.n	42c <reg_mskd_leq()+0x28>
     416:	4b07      	ldr	r3, [pc, #28]	; (434 <reg_mskd_leq()+0x30>)
     418:	685b      	ldr	r3, [r3, #4]
     41a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     41e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
     422:	d803      	bhi.n	42c <reg_mskd_leq()+0x28>
     424:	4b04      	ldr	r3, [pc, #16]	; (438 <reg_mskd_leq()+0x34>)
     426:	2202      	movs	r2, #2
     428:	605a      	str	r2, [r3, #4]
     42a:	4770      	bx	lr
     42c:	4b02      	ldr	r3, [pc, #8]	; (438 <reg_mskd_leq()+0x34>)
     42e:	2204      	movs	r2, #4
     430:	605a      	str	r2, [r3, #4]
     432:	4770      	bx	lr
     434:	200023e0 	.word	0x200023e0
     438:	20002480 	.word	0x20002480

0000043c <reg_mskd_gtr()>:
     43c:	4b07      	ldr	r3, [pc, #28]	; (45c <reg_mskd_gtr()+0x20>)
     43e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     442:	605a      	str	r2, [r3, #4]
     444:	685b      	ldr	r3, [r3, #4]
     446:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     44a:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     44e:	4b04      	ldr	r3, [pc, #16]	; (460 <reg_mskd_gtr()+0x24>)
     450:	bf8c      	ite	hi
     452:	2202      	movhi	r2, #2
     454:	2204      	movls	r2, #4
     456:	605a      	str	r2, [r3, #4]
     458:	4770      	bx	lr
     45a:	bf00      	nop
     45c:	200023e0 	.word	0x200023e0
     460:	20002480 	.word	0x20002480

00000464 <reg_mskd_geq()>:
     464:	4b0b      	ldr	r3, [pc, #44]	; (494 <reg_mskd_geq()+0x30>)
     466:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     46a:	605a      	str	r2, [r3, #4]
     46c:	685b      	ldr	r3, [r3, #4]
     46e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
     476:	d309      	bcc.n	48c <reg_mskd_geq()+0x28>
     478:	4b06      	ldr	r3, [pc, #24]	; (494 <reg_mskd_geq()+0x30>)
     47a:	685b      	ldr	r3, [r3, #4]
     47c:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     480:	4293      	cmp	r3, r2
     482:	d303      	bcc.n	48c <reg_mskd_geq()+0x28>
     484:	4b04      	ldr	r3, [pc, #16]	; (498 <reg_mskd_geq()+0x34>)
     486:	2202      	movs	r2, #2
     488:	605a      	str	r2, [r3, #4]
     48a:	4770      	bx	lr
     48c:	4b02      	ldr	r3, [pc, #8]	; (498 <reg_mskd_geq()+0x34>)
     48e:	2204      	movs	r2, #4
     490:	605a      	str	r2, [r3, #4]
     492:	4770      	bx	lr
     494:	200023e0 	.word	0x200023e0
     498:	20002480 	.word	0x20002480

0000049c <pos_cmp_eq()>:
     49c:	4b01      	ldr	r3, [pc, #4]	; (4a4 <pos_cmp_eq()+0x8>)
     49e:	2202      	movs	r2, #2
     4a0:	605a      	str	r2, [r3, #4]
     4a2:	4770      	bx	lr
     4a4:	20002480 	.word	0x20002480

000004a8 <pos_cmp_ne()>:
     4a8:	4b01      	ldr	r3, [pc, #4]	; (4b0 <pos_cmp_ne()+0x8>)
     4aa:	2202      	movs	r2, #2
     4ac:	605a      	str	r2, [r3, #4]
     4ae:	4770      	bx	lr
     4b0:	20002480 	.word	0x20002480

000004b4 <bits_extract_eq()>:
     4b4:	4b05      	ldr	r3, [pc, #20]	; (4cc <bits_extract_eq()+0x18>)
     4b6:	2240      	movs	r2, #64	; 0x40
     4b8:	605a      	str	r2, [r3, #4]
     4ba:	685b      	ldr	r3, [r3, #4]
     4bc:	4293      	cmp	r3, r2
     4be:	4b03      	ldr	r3, [pc, #12]	; (4cc <bits_extract_eq()+0x18>)
     4c0:	bf0c      	ite	eq
     4c2:	2202      	moveq	r2, #2
     4c4:	2204      	movne	r2, #4
     4c6:	605a      	str	r2, [r3, #4]
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	20002480 	.word	0x20002480

000004d0 <mskd_extract_eq()>:
     4d0:	4b05      	ldr	r3, [pc, #20]	; (4e8 <mskd_extract_eq()+0x18>)
     4d2:	2202      	movs	r2, #2
     4d4:	605a      	str	r2, [r3, #4]
     4d6:	685b      	ldr	r3, [r3, #4]
     4d8:	4293      	cmp	r3, r2
     4da:	4b03      	ldr	r3, [pc, #12]	; (4e8 <mskd_extract_eq()+0x18>)
     4dc:	bf0c      	ite	eq
     4de:	2220      	moveq	r2, #32
     4e0:	2240      	movne	r2, #64	; 0x40
     4e2:	605a      	str	r2, [r3, #4]
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	20002480 	.word	0x20002480

000004ec <mskd_extract_ne()>:
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <mskd_extract_ne()+0x18>)
     4ee:	2204      	movs	r2, #4
     4f0:	605a      	str	r2, [r3, #4]
     4f2:	685b      	ldr	r3, [r3, #4]
     4f4:	4293      	cmp	r3, r2
     4f6:	4b03      	ldr	r3, [pc, #12]	; (504 <mskd_extract_ne()+0x18>)
     4f8:	bf0c      	ite	eq
     4fa:	2240      	moveq	r2, #64	; 0x40
     4fc:	2220      	movne	r2, #32
     4fe:	605a      	str	r2, [r3, #4]
     500:	4770      	bx	lr
     502:	bf00      	nop
     504:	20002480 	.word	0x20002480

00000508 <mskd_extract_lss()>:
     508:	4b06      	ldr	r3, [pc, #24]	; (524 <mskd_extract_lss()+0x1c>)
     50a:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     50e:	605a      	str	r2, [r3, #4]
     510:	685b      	ldr	r3, [r3, #4]
     512:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
     516:	4b04      	ldr	r3, [pc, #16]	; (528 <mskd_extract_lss()+0x20>)
     518:	bf34      	ite	cc
     51a:	2220      	movcc	r2, #32
     51c:	2240      	movcs	r2, #64	; 0x40
     51e:	605a      	str	r2, [r3, #4]
     520:	4770      	bx	lr
     522:	bf00      	nop
     524:	200023e0 	.word	0x200023e0
     528:	20002480 	.word	0x20002480

0000052c <mskd_extract_leq()>:
     52c:	4b05      	ldr	r3, [pc, #20]	; (544 <mskd_extract_leq()+0x18>)
     52e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     532:	605a      	str	r2, [r3, #4]
     534:	685b      	ldr	r3, [r3, #4]
     536:	4293      	cmp	r3, r2
     538:	4b03      	ldr	r3, [pc, #12]	; (548 <mskd_extract_leq()+0x1c>)
     53a:	bf94      	ite	ls
     53c:	2220      	movls	r2, #32
     53e:	2240      	movhi	r2, #64	; 0x40
     540:	605a      	str	r2, [r3, #4]
     542:	4770      	bx	lr
     544:	200023e0 	.word	0x200023e0
     548:	20002480 	.word	0x20002480

0000054c <mskd_extract_gtr()>:
     54c:	4b06      	ldr	r3, [pc, #24]	; (568 <mskd_extract_gtr()+0x1c>)
     54e:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     552:	605a      	str	r2, [r3, #4]
     554:	685b      	ldr	r3, [r3, #4]
     556:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <mskd_extract_gtr()+0x20>)
     55c:	bf8c      	ite	hi
     55e:	2220      	movhi	r2, #32
     560:	2240      	movls	r2, #64	; 0x40
     562:	605a      	str	r2, [r3, #4]
     564:	4770      	bx	lr
     566:	bf00      	nop
     568:	200023e0 	.word	0x200023e0
     56c:	20002480 	.word	0x20002480

00000570 <set_bits_global()>:
     570:	4a02      	ldr	r2, [pc, #8]	; (57c <set_bits_global()+0xc>)
     572:	6853      	ldr	r3, [r2, #4]
     574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     578:	6053      	str	r3, [r2, #4]
     57a:	4770      	bx	lr
     57c:	20002480 	.word	0x20002480

00000580 <ins_mskd_global()>:
     580:	4a03      	ldr	r2, [pc, #12]	; (590 <ins_mskd_global()+0x10>)
     582:	6853      	ldr	r3, [r2, #4]
     584:	f023 0306 	bic.w	r3, r3, #6
     588:	f043 0302 	orr.w	r3, r3, #2
     58c:	6053      	str	r3, [r2, #4]
     58e:	4770      	bx	lr
     590:	20002480 	.word	0x20002480

00000594 <assign_array_global()>:
     594:	4b01      	ldr	r3, [pc, #4]	; (59c <assign_array_global()+0x8>)
     596:	22bd      	movs	r2, #189	; 0xbd
     598:	601a      	str	r2, [r3, #0]
     59a:	4770      	bx	lr
     59c:	200022ec 	.word	0x200022ec

000005a0 <shifted_global()>:
     5a0:	4b04      	ldr	r3, [pc, #16]	; (5b4 <shifted_global()+0x14>)
     5a2:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     5a6:	605a      	str	r2, [r3, #4]
     5a8:	685b      	ldr	r3, [r3, #4]
     5aa:	f3c3 6344 	ubfx	r3, r3, #25, #5
     5ae:	4a02      	ldr	r2, [pc, #8]	; (5b8 <shifted_global()+0x18>)
     5b0:	62d3      	str	r3, [r2, #44]	; 0x2c
     5b2:	4770      	bx	lr
     5b4:	200023e0 	.word	0x200023e0
     5b8:	200022c0 	.word	0x200022c0

000005bc <assign_register_global()>:
     5bc:	4b01      	ldr	r3, [pc, #4]	; (5c4 <assign_register_global()+0x8>)
     5be:	2204      	movs	r2, #4
     5c0:	605a      	str	r2, [r3, #4]
     5c2:	4770      	bx	lr
     5c4:	20002480 	.word	0x20002480

000005c8 <copy_bits_equ()>:
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <copy_bits_equ()+0x18>)
     5ca:	2240      	movs	r2, #64	; 0x40
     5cc:	605a      	str	r2, [r3, #4]
     5ce:	685b      	ldr	r3, [r3, #4]
     5d0:	f013 0f40 	tst.w	r3, #64	; 0x40
     5d4:	4b02      	ldr	r3, [pc, #8]	; (5e0 <copy_bits_equ()+0x18>)
     5d6:	bf14      	ite	ne
     5d8:	2202      	movne	r2, #2
     5da:	2204      	moveq	r2, #4
     5dc:	605a      	str	r2, [r3, #4]
     5de:	4770      	bx	lr
     5e0:	20002480 	.word	0x20002480

000005e4 <copy_bits_neq()>:
     5e4:	4b05      	ldr	r3, [pc, #20]	; (5fc <copy_bits_neq()+0x18>)
     5e6:	2240      	movs	r2, #64	; 0x40
     5e8:	605a      	str	r2, [r3, #4]
     5ea:	685b      	ldr	r3, [r3, #4]
     5ec:	f013 0f40 	tst.w	r3, #64	; 0x40
     5f0:	4b02      	ldr	r3, [pc, #8]	; (5fc <copy_bits_neq()+0x18>)
     5f2:	bf0c      	ite	eq
     5f4:	2202      	moveq	r2, #2
     5f6:	2204      	movne	r2, #4
     5f8:	605a      	str	r2, [r3, #4]
     5fa:	4770      	bx	lr
     5fc:	20002480 	.word	0x20002480

00000600 <copy_mskd_equ()>:
     600:	4b06      	ldr	r3, [pc, #24]	; (61c <copy_mskd_equ()+0x1c>)
     602:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     606:	605a      	str	r2, [r3, #4]
     608:	685b      	ldr	r3, [r3, #4]
     60a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     60e:	4293      	cmp	r3, r2
     610:	4b03      	ldr	r3, [pc, #12]	; (620 <copy_mskd_equ()+0x20>)
     612:	bf0c      	ite	eq
     614:	2202      	moveq	r2, #2
     616:	2204      	movne	r2, #4
     618:	605a      	str	r2, [r3, #4]
     61a:	4770      	bx	lr
     61c:	200023e0 	.word	0x200023e0
     620:	20002480 	.word	0x20002480

00000624 <copy_mskd_neq()>:
     624:	4b06      	ldr	r3, [pc, #24]	; (640 <copy_mskd_neq()+0x1c>)
     626:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
     62a:	605a      	str	r2, [r3, #4]
     62c:	685b      	ldr	r3, [r3, #4]
     62e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     632:	4293      	cmp	r3, r2
     634:	4b03      	ldr	r3, [pc, #12]	; (644 <copy_mskd_neq()+0x20>)
     636:	bf14      	ite	ne
     638:	2202      	movne	r2, #2
     63a:	2204      	moveq	r2, #4
     63c:	605a      	str	r2, [r3, #4]
     63e:	4770      	bx	lr
     640:	200023e0 	.word	0x200023e0
     644:	20002480 	.word	0x20002480

00000648 <copy_mskd_lss()>:
     648:	4b07      	ldr	r3, [pc, #28]	; (668 <copy_mskd_lss()+0x20>)
     64a:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
     64e:	605a      	str	r2, [r3, #4]
     650:	685b      	ldr	r3, [r3, #4]
     652:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     656:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
     65a:	4b04      	ldr	r3, [pc, #16]	; (66c <copy_mskd_lss()+0x24>)
     65c:	bf34      	ite	cc
     65e:	2202      	movcc	r2, #2
     660:	2204      	movcs	r2, #4
     662:	605a      	str	r2, [r3, #4]
     664:	4770      	bx	lr
     666:	bf00      	nop
     668:	200023e0 	.word	0x200023e0
     66c:	20002480 	.word	0x20002480

00000670 <copy_mskd_leq()>:
     670:	4b06      	ldr	r3, [pc, #24]	; (68c <copy_mskd_leq()+0x1c>)
     672:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     676:	605a      	str	r2, [r3, #4]
     678:	685b      	ldr	r3, [r3, #4]
     67a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     67e:	4293      	cmp	r3, r2
     680:	4b03      	ldr	r3, [pc, #12]	; (690 <copy_mskd_leq()+0x20>)
     682:	bf94      	ite	ls
     684:	2202      	movls	r2, #2
     686:	2204      	movhi	r2, #4
     688:	605a      	str	r2, [r3, #4]
     68a:	4770      	bx	lr
     68c:	200023e0 	.word	0x200023e0
     690:	20002480 	.word	0x20002480

00000694 <copy_mskd_gtr()>:
     694:	4b07      	ldr	r3, [pc, #28]	; (6b4 <copy_mskd_gtr()+0x20>)
     696:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     69a:	605a      	str	r2, [r3, #4]
     69c:	685b      	ldr	r3, [r3, #4]
     69e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6a2:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
     6a6:	4b04      	ldr	r3, [pc, #16]	; (6b8 <copy_mskd_gtr()+0x24>)
     6a8:	bf8c      	ite	hi
     6aa:	2202      	movhi	r2, #2
     6ac:	2204      	movls	r2, #4
     6ae:	605a      	str	r2, [r3, #4]
     6b0:	4770      	bx	lr
     6b2:	bf00      	nop
     6b4:	200023e0 	.word	0x200023e0
     6b8:	20002480 	.word	0x20002480

000006bc <copy_mskd_geq()>:
     6bc:	4b06      	ldr	r3, [pc, #24]	; (6d8 <copy_mskd_geq()+0x1c>)
     6be:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     6c2:	605a      	str	r2, [r3, #4]
     6c4:	685b      	ldr	r3, [r3, #4]
     6c6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
     6ca:	4293      	cmp	r3, r2
     6cc:	4b03      	ldr	r3, [pc, #12]	; (6dc <copy_mskd_geq()+0x20>)
     6ce:	bf2c      	ite	cs
     6d0:	2202      	movcs	r2, #2
     6d2:	2204      	movcc	r2, #4
     6d4:	605a      	str	r2, [r3, #4]
     6d6:	4770      	bx	lr
     6d8:	200023e0 	.word	0x200023e0
     6dc:	20002480 	.word	0x20002480

000006e0 <copy_shifted()>:
     6e0:	4b06      	ldr	r3, [pc, #24]	; (6fc <copy_shifted()+0x1c>)
     6e2:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     6e6:	605a      	str	r2, [r3, #4]
     6e8:	685b      	ldr	r3, [r3, #4]
     6ea:	f3c3 6344 	ubfx	r3, r3, #25, #5
     6ee:	2b0b      	cmp	r3, #11
     6f0:	4b03      	ldr	r3, [pc, #12]	; (700 <copy_shifted()+0x20>)
     6f2:	bf0c      	ite	eq
     6f4:	2202      	moveq	r2, #2
     6f6:	2204      	movne	r2, #4
     6f8:	605a      	str	r2, [r3, #4]
     6fa:	4770      	bx	lr
     6fc:	200023e0 	.word	0x200023e0
     700:	20002480 	.word	0x20002480

00000704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     704:	4b01      	ldr	r3, [pc, #4]	; (70c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0x8>)
     706:	6058      	str	r0, [r3, #4]
     708:	4770      	bx	lr
     70a:	bf00      	nop
     70c:	20002480 	.word	0x20002480

00000710 <call_bits_val_var()>:
     710:	b500      	push	{lr}
     712:	2040      	movs	r0, #64	; 0x40
     714:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     718:	f85d fb04 	ldr.w	pc, [sp], #4

0000071c <call_bits_val_zero()>:
     71c:	b500      	push	{lr}
     71e:	2000      	movs	r0, #0
     720:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     724:	f85d fb04 	ldr.w	pc, [sp], #4

00000728 <call_bits_val_const()>:
     728:	b500      	push	{lr}
     72a:	2040      	movs	r0, #64	; 0x40
     72c:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     730:	f85d fb04 	ldr.w	pc, [sp], #4

00000734 <call_bits_val_global()>:
     734:	b500      	push	{lr}
     736:	2040      	movs	r0, #64	; 0x40
     738:	f7ff fffe 	bl	704 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     73c:	f85d fb04 	ldr.w	pc, [sp], #4

00000740 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     740:	6802      	ldr	r2, [r0, #0]
     742:	4b01      	ldr	r3, [pc, #4]	; (748 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0x8>)
     744:	605a      	str	r2, [r3, #4]
     746:	4770      	bx	lr
     748:	20002480 	.word	0x20002480

0000074c <call_bits_ref_var()>:
     74c:	b500      	push	{lr}
     74e:	b081      	sub	sp, #4
     750:	2301      	movs	r3, #1
     752:	9300      	str	r3, [sp, #0]
     754:	4668      	mov	r0, sp
     756:	f7ff fffe 	bl	740 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     75a:	b001      	add	sp, #4
     75c:	f85d fb04 	ldr.w	pc, [sp], #4

00000760 <call_bits_ref_zero()>:
     760:	b500      	push	{lr}
     762:	b081      	sub	sp, #4
     764:	2300      	movs	r3, #0
     766:	9300      	str	r3, [sp, #0]
     768:	4668      	mov	r0, sp
     76a:	f7ff fffe 	bl	740 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     76e:	b001      	add	sp, #4
     770:	f85d fb04 	ldr.w	pc, [sp], #4

00000774 <call_bits_ref_const()>:
     774:	b500      	push	{lr}
     776:	b081      	sub	sp, #4
     778:	2301      	movs	r3, #1
     77a:	9300      	str	r3, [sp, #0]
     77c:	4668      	mov	r0, sp
     77e:	f7ff fffe 	bl	740 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     782:	b001      	add	sp, #4
     784:	f85d fb04 	ldr.w	pc, [sp], #4

00000788 <call_bits_ref_global()>:
     788:	b500      	push	{lr}
     78a:	b081      	sub	sp, #4
     78c:	2340      	movs	r3, #64	; 0x40
     78e:	9300      	str	r3, [sp, #0]
     790:	4668      	mov	r0, sp
     792:	f7ff fffe 	bl	740 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     796:	b001      	add	sp, #4
     798:	f85d fb04 	ldr.w	pc, [sp], #4

0000079c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     79c:	4a03      	ldr	r2, [pc, #12]	; (7ac <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     79e:	6853      	ldr	r3, [r2, #4]
     7a0:	ea23 0000 	bic.w	r0, r3, r0
     7a4:	4308      	orrs	r0, r1
     7a6:	6050      	str	r0, [r2, #4]
     7a8:	4770      	bx	lr
     7aa:	bf00      	nop
     7ac:	20002480 	.word	0x20002480

000007b0 <call_mskd_val_var()>:
     7b0:	b500      	push	{lr}
     7b2:	2006      	movs	r0, #6
     7b4:	2102      	movs	r1, #2
     7b6:	f7ff fffe 	bl	79c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7ba:	f85d fb04 	ldr.w	pc, [sp], #4

000007be <call_mskd_val_const()>:
     7be:	b500      	push	{lr}
     7c0:	2006      	movs	r0, #6
     7c2:	2102      	movs	r1, #2
     7c4:	f7ff fffe 	bl	79c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7c8:	f85d fb04 	ldr.w	pc, [sp], #4

000007cc <call_mskd_val_global()>:
     7cc:	b500      	push	{lr}
     7ce:	2006      	movs	r0, #6
     7d0:	2102      	movs	r1, #2
     7d2:	f7ff fffe 	bl	79c <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     7d6:	f85d fb04 	ldr.w	pc, [sp], #4

000007da <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     7da:	4a04      	ldr	r2, [pc, #16]	; (7ec <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x12>)
     7dc:	6853      	ldr	r3, [r2, #4]
     7de:	6801      	ldr	r1, [r0, #0]
     7e0:	ea23 0301 	bic.w	r3, r3, r1
     7e4:	6841      	ldr	r1, [r0, #4]
     7e6:	430b      	orrs	r3, r1
     7e8:	6053      	str	r3, [r2, #4]
     7ea:	4770      	bx	lr
     7ec:	20002480 	.word	0x20002480

000007f0 <call_mskd_ref_var()>:
     7f0:	b500      	push	{lr}
     7f2:	b082      	sub	sp, #8
     7f4:	4b04      	ldr	r3, [pc, #16]	; (808 <call_mskd_ref_var()+0x18>)
     7f6:	cb0c      	ldmia	r3, {r2, r3}
     7f8:	e88d 000c 	stmia.w	sp, {r2, r3}
     7fc:	4668      	mov	r0, sp
     7fe:	f7ff fffe 	bl	7da <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     802:	b002      	add	sp, #8
     804:	f85d fb04 	ldr.w	pc, [sp], #4
     808:	00000000 	.word	0x00000000

0000080c <call_mskd_ref_const()>:
     80c:	b500      	push	{lr}
     80e:	b082      	sub	sp, #8
     810:	2306      	movs	r3, #6
     812:	9300      	str	r3, [sp, #0]
     814:	2304      	movs	r3, #4
     816:	9301      	str	r3, [sp, #4]
     818:	4668      	mov	r0, sp
     81a:	f7ff fffe 	bl	7da <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     81e:	b002      	add	sp, #8
     820:	f85d fb04 	ldr.w	pc, [sp], #4

00000824 <call_mskd_ref_global()>:
     824:	b500      	push	{lr}
     826:	b082      	sub	sp, #8
     828:	2306      	movs	r3, #6
     82a:	9300      	str	r3, [sp, #0]
     82c:	2302      	movs	r3, #2
     82e:	9301      	str	r3, [sp, #4]
     830:	4668      	mov	r0, sp
     832:	f7ff fffe 	bl	7da <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     836:	b002      	add	sp, #8
     838:	f85d fb04 	ldr.w	pc, [sp], #4

0000083c <periph_bits(mcu::Serial volatile*)>:
     83c:	6843      	ldr	r3, [r0, #4]
     83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     842:	6043      	str	r3, [r0, #4]
     844:	4770      	bx	lr

00000846 <call_periph_bits()>:
     846:	b500      	push	{lr}
     848:	4802      	ldr	r0, [pc, #8]	; (854 <call_periph_bits()+0xe>)
     84a:	f7ff fffe 	bl	83c <periph_bits(mcu::Serial volatile*)>
     84e:	f85d fb04 	ldr.w	pc, [sp], #4
     852:	bf00      	nop
     854:	20002480 	.word	0x20002480

00000858 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     858:	6843      	ldr	r3, [r0, #4]
     85a:	4319      	orrs	r1, r3
     85c:	6041      	str	r1, [r0, #4]
     85e:	4770      	bx	lr

00000860 <call_periph_bits_val()>:
     860:	b500      	push	{lr}
     862:	2140      	movs	r1, #64	; 0x40
     864:	4802      	ldr	r0, [pc, #8]	; (870 <call_periph_bits_val()+0x10>)
     866:	f7ff fffe 	bl	858 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     86a:	f85d fb04 	ldr.w	pc, [sp], #4
     86e:	bf00      	nop
     870:	20002480 	.word	0x20002480

00000874 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     874:	6803      	ldr	r3, [r0, #0]
     876:	4319      	orrs	r1, r3
     878:	6001      	str	r1, [r0, #0]
     87a:	4770      	bx	lr

0000087c <call_reg_bits_val()>:
     87c:	b500      	push	{lr}
     87e:	2140      	movs	r1, #64	; 0x40
     880:	4802      	ldr	r0, [pc, #8]	; (88c <call_reg_bits_val()+0x10>)
     882:	f7ff fffe 	bl	874 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     886:	f85d fb04 	ldr.w	pc, [sp], #4
     88a:	bf00      	nop
     88c:	20002484 	.word	0x20002484

00000890 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     890:	6843      	ldr	r3, [r0, #4]
     892:	680a      	ldr	r2, [r1, #0]
     894:	4313      	orrs	r3, r2
     896:	6043      	str	r3, [r0, #4]
     898:	4770      	bx	lr

0000089a <call_periph_bits_ref()>:
     89a:	b500      	push	{lr}
     89c:	b081      	sub	sp, #4
     89e:	2340      	movs	r3, #64	; 0x40
     8a0:	9300      	str	r3, [sp, #0]
     8a2:	4669      	mov	r1, sp
     8a4:	4802      	ldr	r0, [pc, #8]	; (8b0 <call_periph_bits_ref()+0x16>)
     8a6:	f7ff fffe 	bl	890 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8aa:	b001      	add	sp, #4
     8ac:	f85d fb04 	ldr.w	pc, [sp], #4
     8b0:	20002480 	.word	0x20002480

000008b4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8b4:	6803      	ldr	r3, [r0, #0]
     8b6:	680a      	ldr	r2, [r1, #0]
     8b8:	4313      	orrs	r3, r2
     8ba:	6003      	str	r3, [r0, #0]
     8bc:	4770      	bx	lr

000008be <call_reg_bits_ref()>:
     8be:	b500      	push	{lr}
     8c0:	b081      	sub	sp, #4
     8c2:	2340      	movs	r3, #64	; 0x40
     8c4:	9300      	str	r3, [sp, #0]
     8c6:	4669      	mov	r1, sp
     8c8:	4802      	ldr	r0, [pc, #8]	; (8d4 <call_reg_bits_ref()+0x16>)
     8ca:	f7ff fffe 	bl	8b4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8ce:	b001      	add	sp, #4
     8d0:	f85d fb04 	ldr.w	pc, [sp], #4
     8d4:	20002484 	.word	0x20002484

000008d8 <periph_mskd(mcu::Serial volatile*)>:
     8d8:	6843      	ldr	r3, [r0, #4]
     8da:	f023 0306 	bic.w	r3, r3, #6
     8de:	f043 0302 	orr.w	r3, r3, #2
     8e2:	6043      	str	r3, [r0, #4]
     8e4:	4770      	bx	lr

000008e6 <call_periph_mskd()>:
     8e6:	b500      	push	{lr}
     8e8:	4802      	ldr	r0, [pc, #8]	; (8f4 <call_periph_mskd()+0xe>)
     8ea:	f7ff fffe 	bl	8d8 <periph_mskd(mcu::Serial volatile*)>
     8ee:	f85d fb04 	ldr.w	pc, [sp], #4
     8f2:	bf00      	nop
     8f4:	20002480 	.word	0x20002480

000008f8 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     8f8:	6843      	ldr	r3, [r0, #4]
     8fa:	ea23 0101 	bic.w	r1, r3, r1
     8fe:	4311      	orrs	r1, r2
     900:	6041      	str	r1, [r0, #4]
     902:	4770      	bx	lr

00000904 <call_periph_mskd_val()>:
     904:	b500      	push	{lr}
     906:	2106      	movs	r1, #6
     908:	2202      	movs	r2, #2
     90a:	4802      	ldr	r0, [pc, #8]	; (914 <call_periph_mskd_val()+0x10>)
     90c:	f7ff fffe 	bl	8f8 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     910:	f85d fb04 	ldr.w	pc, [sp], #4
     914:	20002480 	.word	0x20002480

00000918 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     918:	6803      	ldr	r3, [r0, #0]
     91a:	ea23 0101 	bic.w	r1, r3, r1
     91e:	4311      	orrs	r1, r2
     920:	6001      	str	r1, [r0, #0]
     922:	4770      	bx	lr

00000924 <call_reg_mskd_val()>:
     924:	b500      	push	{lr}
     926:	2106      	movs	r1, #6
     928:	2202      	movs	r2, #2
     92a:	4802      	ldr	r0, [pc, #8]	; (934 <call_reg_mskd_val()+0x10>)
     92c:	f7ff fffe 	bl	918 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     930:	f85d fb04 	ldr.w	pc, [sp], #4
     934:	20002484 	.word	0x20002484

00000938 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     938:	6843      	ldr	r3, [r0, #4]
     93a:	ea23 0101 	bic.w	r1, r3, r1
     93e:	4311      	orrs	r1, r2
     940:	6041      	str	r1, [r0, #4]
     942:	4770      	bx	lr

00000944 <call_periph_mskd_ref()>:
     944:	b500      	push	{lr}
     946:	2106      	movs	r1, #6
     948:	2202      	movs	r2, #2
     94a:	4802      	ldr	r0, [pc, #8]	; (954 <call_periph_mskd_ref()+0x10>)
     94c:	f7ff fffe 	bl	938 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     950:	f85d fb04 	ldr.w	pc, [sp], #4
     954:	20002480 	.word	0x20002480

00000958 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     958:	6803      	ldr	r3, [r0, #0]
     95a:	ea23 0101 	bic.w	r1, r3, r1
     95e:	4311      	orrs	r1, r2
     960:	6001      	str	r1, [r0, #0]
     962:	4770      	bx	lr

00000964 <call_reg_mskd_ref()>:
     964:	b500      	push	{lr}
     966:	2106      	movs	r1, #6
     968:	2202      	movs	r2, #2
     96a:	4802      	ldr	r0, [pc, #8]	; (974 <call_reg_mskd_ref()+0x10>)
     96c:	f7ff fffe 	bl	958 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     970:	f85d fb04 	ldr.w	pc, [sp], #4
     974:	20002484 	.word	0x20002484

00000978 <return_bits()>:
     978:	2020      	movs	r0, #32
     97a:	4770      	bx	lr

0000097c <call_return_bits()>:
     97c:	b500      	push	{lr}
     97e:	f7ff fffe 	bl	978 <return_bits()>
     982:	2820      	cmp	r0, #32
     984:	4b04      	ldr	r3, [pc, #16]	; (998 <call_return_bits()+0x1c>)
     986:	bf0c      	ite	eq
     988:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
     98c:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
     990:	605a      	str	r2, [r3, #4]
     992:	f85d fb04 	ldr.w	pc, [sp], #4
     996:	bf00      	nop
     998:	200023e0 	.word	0x200023e0

0000099c <return_mskd()>:
     99c:	2218      	movs	r2, #24
     99e:	6002      	str	r2, [r0, #0]
     9a0:	2208      	movs	r2, #8
     9a2:	6042      	str	r2, [r0, #4]
     9a4:	4770      	bx	lr

000009a6 <call_return_mskd()>:
     9a6:	b500      	push	{lr}
     9a8:	b082      	sub	sp, #8
     9aa:	4668      	mov	r0, sp
     9ac:	f7ff fffe 	bl	99c <return_mskd()>
     9b0:	9a01      	ldr	r2, [sp, #4]
     9b2:	9b00      	ldr	r3, [sp, #0]
     9b4:	2b18      	cmp	r3, #24
     9b6:	d006      	beq.n	9c6 <call_return_mskd()+0x20>
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <call_return_mskd()+0x2e>)
     9ba:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
     9be:	605a      	str	r2, [r3, #4]
     9c0:	b002      	add	sp, #8
     9c2:	f85d fb04 	ldr.w	pc, [sp], #4
     9c6:	2a08      	cmp	r2, #8
     9c8:	d1f6      	bne.n	9b8 <call_return_mskd()+0x12>
     9ca:	4b02      	ldr	r3, [pc, #8]	; (9d4 <call_return_mskd()+0x2e>)
     9cc:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
     9d0:	605a      	str	r2, [r3, #4]
     9d2:	e7f5      	b.n	9c0 <call_return_mskd()+0x1a>
     9d4:	200023e0 	.word	0x200023e0

000009d8 <return_reg()>:
     9d8:	4b02      	ldr	r3, [pc, #8]	; (9e4 <return_reg()+0xc>)
     9da:	2240      	movs	r2, #64	; 0x40
     9dc:	605a      	str	r2, [r3, #4]
     9de:	4802      	ldr	r0, [pc, #8]	; (9e8 <return_reg()+0x10>)
     9e0:	4770      	bx	lr
     9e2:	bf00      	nop
     9e4:	20002480 	.word	0x20002480
     9e8:	20002484 	.word	0x20002484

000009ec <call_return_reg()>:
     9ec:	b500      	push	{lr}
     9ee:	f7ff fffe 	bl	9d8 <return_reg()>
     9f2:	6803      	ldr	r3, [r0, #0]
     9f4:	2b40      	cmp	r3, #64	; 0x40
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <call_return_reg()+0x1c>)
     9f8:	bf0c      	ite	eq
     9fa:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
     9fe:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
     a02:	605a      	str	r2, [r3, #4]
     a04:	f85d fb04 	ldr.w	pc, [sp], #4
     a08:	200023e0 	.word	0x200023e0

00000a0c <return_periph()>:
     a0c:	4801      	ldr	r0, [pc, #4]	; (a14 <return_periph()+0x8>)
     a0e:	2340      	movs	r3, #64	; 0x40
     a10:	6043      	str	r3, [r0, #4]
     a12:	4770      	bx	lr
     a14:	20002480 	.word	0x20002480

00000a18 <call_return_periph()>:
     a18:	b500      	push	{lr}
     a1a:	f7ff fffe 	bl	a0c <return_periph()>
     a1e:	6843      	ldr	r3, [r0, #4]
     a20:	2b40      	cmp	r3, #64	; 0x40
     a22:	4b04      	ldr	r3, [pc, #16]	; (a34 <call_return_periph()+0x1c>)
     a24:	bf0c      	ite	eq
     a26:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
     a2a:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
     a2e:	605a      	str	r2, [r3, #4]
     a30:	f85d fb04 	ldr.w	pc, [sp], #4
     a34:	200023e0 	.word	0x200023e0

00000a38 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     a38:	2805      	cmp	r0, #5
     a3a:	d006      	beq.n	a4a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
     a3c:	2806      	cmp	r0, #6
     a3e:	4b05      	ldr	r3, [pc, #20]	; (a54 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a40:	bf0c      	ite	eq
     a42:	2244      	moveq	r2, #68	; 0x44
     a44:	2255      	movne	r2, #85	; 0x55
     a46:	62da      	str	r2, [r3, #44]	; 0x2c
     a48:	4770      	bx	lr
     a4a:	4b02      	ldr	r3, [pc, #8]	; (a54 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     a4c:	2233      	movs	r2, #51	; 0x33
     a4e:	62da      	str	r2, [r3, #44]	; 0x2c
     a50:	4770      	bx	lr
     a52:	bf00      	nop
     a54:	200022c0 	.word	0x200022c0

00000a58 <call_pos_val()>:
     a58:	b500      	push	{lr}
     a5a:	2005      	movs	r0, #5
     a5c:	f7ff fffe 	bl	a38 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a60:	2006      	movs	r0, #6
     a62:	f7ff fffe 	bl	a38 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a66:	f85d fb04 	ldr.w	pc, [sp], #4

00000a6a <call_pos_val_global()>:
     a6a:	b500      	push	{lr}
     a6c:	2006      	movs	r0, #6
     a6e:	f7ff fffe 	bl	a38 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
     a72:	f85d fb04 	ldr.w	pc, [sp], #4

00000a76 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     a76:	6803      	ldr	r3, [r0, #0]
     a78:	2b05      	cmp	r3, #5
     a7a:	d006      	beq.n	a8a <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
     a7c:	2b06      	cmp	r3, #6
     a7e:	4b05      	ldr	r3, [pc, #20]	; (a94 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a80:	bf0c      	ite	eq
     a82:	2277      	moveq	r2, #119	; 0x77
     a84:	2288      	movne	r2, #136	; 0x88
     a86:	62da      	str	r2, [r3, #44]	; 0x2c
     a88:	4770      	bx	lr
     a8a:	4b02      	ldr	r3, [pc, #8]	; (a94 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
     a8c:	2266      	movs	r2, #102	; 0x66
     a8e:	62da      	str	r2, [r3, #44]	; 0x2c
     a90:	4770      	bx	lr
     a92:	bf00      	nop
     a94:	200022c0 	.word	0x200022c0

00000a98 <call_pos_ref()>:
     a98:	b510      	push	{r4, lr}
     a9a:	b082      	sub	sp, #8
     a9c:	2405      	movs	r4, #5
     a9e:	9401      	str	r4, [sp, #4]
     aa0:	a801      	add	r0, sp, #4
     aa2:	f7ff fffe 	bl	a76 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     aa6:	9400      	str	r4, [sp, #0]
     aa8:	4668      	mov	r0, sp
     aaa:	f7ff fffe 	bl	a76 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     aae:	b002      	add	sp, #8
     ab0:	bd10      	pop	{r4, pc}

00000ab2 <call_pos_ref_global()>:
     ab2:	b500      	push	{lr}
     ab4:	b081      	sub	sp, #4
     ab6:	2306      	movs	r3, #6
     ab8:	9300      	str	r3, [sp, #0]
     aba:	4668      	mov	r0, sp
     abc:	f7ff fffe 	bl	a76 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
     ac0:	b001      	add	sp, #4
     ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00000ac6 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     ac6:	4a03      	ldr	r2, [pc, #12]	; (ad4 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
     ac8:	6853      	ldr	r3, [r2, #4]
     aca:	ea23 0000 	bic.w	r0, r3, r0
     ace:	4308      	orrs	r0, r1
     ad0:	6050      	str	r0, [r2, #4]
     ad2:	4770      	bx	lr
     ad4:	20002480 	.word	0x20002480

00000ad8 <call_range_val(unsigned int)>:
     ad8:	b500      	push	{lr}
     ada:	0301      	lsls	r1, r0, #12
     adc:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     ae0:	f7ff fffe 	bl	ac6 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00000ae8 <call_range_val_port()>:
     ae8:	b500      	push	{lr}
     aea:	201f      	movs	r0, #31
     aec:	f7ff fffe 	bl	ad8 <call_range_val(unsigned int)>
     af0:	f85d fb04 	ldr.w	pc, [sp], #4

00000af4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     af4:	4a03      	ldr	r2, [pc, #12]	; (b04 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
     af6:	6853      	ldr	r3, [r2, #4]
     af8:	ea23 0000 	bic.w	r0, r3, r0
     afc:	4308      	orrs	r0, r1
     afe:	6050      	str	r0, [r2, #4]
     b00:	4770      	bx	lr
     b02:	bf00      	nop
     b04:	20002480 	.word	0x20002480

00000b08 <call_range_ref(unsigned int)>:
     b08:	b500      	push	{lr}
     b0a:	0301      	lsls	r1, r0, #12
     b0c:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
     b10:	f7ff fffe 	bl	af4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     b14:	f85d fb04 	ldr.w	pc, [sp], #4

00000b18 <call_range_ref_port()>:
     b18:	b500      	push	{lr}
     b1a:	200c      	movs	r0, #12
     b1c:	f7ff fffe 	bl	b08 <call_range_ref(unsigned int)>
     b20:	f85d fb04 	ldr.w	pc, [sp], #4

00000b24 <check_array_range_pass(unsigned int)>:
     b24:	2816      	cmp	r0, #22
     b26:	4b03      	ldr	r3, [pc, #12]	; (b34 <check_array_range_pass(unsigned int)+0x10>)
     b28:	bf94      	ite	ls
     b2a:	227f      	movls	r2, #127	; 0x7f
     b2c:	2283      	movhi	r2, #131	; 0x83
     b2e:	62da      	str	r2, [r3, #44]	; 0x2c
     b30:	4770      	bx	lr
     b32:	bf00      	nop
     b34:	200022c0 	.word	0x200022c0

00000b38 <check_array_range_fail(unsigned int)>:
     b38:	2816      	cmp	r0, #22
     b3a:	4b03      	ldr	r3, [pc, #12]	; (b48 <check_array_range_fail(unsigned int)+0x10>)
     b3c:	bf94      	ite	ls
     b3e:	2295      	movls	r2, #149	; 0x95
     b40:	2297      	movhi	r2, #151	; 0x97
     b42:	62da      	str	r2, [r3, #44]	; 0x2c
     b44:	4770      	bx	lr
     b46:	bf00      	nop
     b48:	200022c0 	.word	0x200022c0

00000b4c <check_bits_range_pass(unsigned int)>:
     b4c:	280f      	cmp	r0, #15
     b4e:	4b03      	ldr	r3, [pc, #12]	; (b5c <check_bits_range_pass(unsigned int)+0x10>)
     b50:	bf94      	ite	ls
     b52:	229d      	movls	r2, #157	; 0x9d
     b54:	22a3      	movhi	r2, #163	; 0xa3
     b56:	62da      	str	r2, [r3, #44]	; 0x2c
     b58:	4770      	bx	lr
     b5a:	bf00      	nop
     b5c:	200022c0 	.word	0x200022c0

00000b60 <check_bits_range_fail(unsigned int)>:
     b60:	280f      	cmp	r0, #15
     b62:	4b03      	ldr	r3, [pc, #12]	; (b70 <check_bits_range_fail(unsigned int)+0x10>)
     b64:	bf94      	ite	ls
     b66:	22a7      	movls	r2, #167	; 0xa7
     b68:	22ad      	movhi	r2, #173	; 0xad
     b6a:	62da      	str	r2, [r3, #44]	; 0x2c
     b6c:	4770      	bx	lr
     b6e:	bf00      	nop
     b70:	200022c0 	.word	0x200022c0

00000b74 <check_mskd_range_pass(unsigned int)>:
     b74:	281f      	cmp	r0, #31
     b76:	4b03      	ldr	r3, [pc, #12]	; (b84 <check_mskd_range_pass(unsigned int)+0x10>)
     b78:	bf94      	ite	ls
     b7a:	22b3      	movls	r2, #179	; 0xb3
     b7c:	22b5      	movhi	r2, #181	; 0xb5
     b7e:	62da      	str	r2, [r3, #44]	; 0x2c
     b80:	4770      	bx	lr
     b82:	bf00      	nop
     b84:	200022c0 	.word	0x200022c0

00000b88 <check_mskd_range_fail(unsigned int)>:
     b88:	281f      	cmp	r0, #31
     b8a:	4b03      	ldr	r3, [pc, #12]	; (b98 <check_mskd_range_fail(unsigned int)+0x10>)
     b8c:	bf94      	ite	ls
     b8e:	22bf      	movls	r2, #191	; 0xbf
     b90:	22c1      	movhi	r2, #193	; 0xc1
     b92:	62da      	str	r2, [r3, #44]	; 0x2c
     b94:	4770      	bx	lr
     b96:	bf00      	nop
     b98:	200022c0 	.word	0x200022c0

00000b9c <bits_extract_ne()>:
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <bits_extract_ne()+0x18>)
     b9e:	2220      	movs	r2, #32
     ba0:	605a      	str	r2, [r3, #4]
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	4293      	cmp	r3, r2
     ba6:	4b03      	ldr	r3, [pc, #12]	; (bb4 <bits_extract_ne()+0x18>)
     ba8:	bf14      	ite	ne
     baa:	2202      	movne	r2, #2
     bac:	2204      	moveq	r2, #4
     bae:	605a      	str	r2, [r3, #4]
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop
     bb4:	20002480 	.word	0x20002480

00000bb8 <mskd_extract_geq()>:
     bb8:	4b05      	ldr	r3, [pc, #20]	; (bd0 <mskd_extract_geq()+0x18>)
     bba:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
     bbe:	605a      	str	r2, [r3, #4]
     bc0:	685b      	ldr	r3, [r3, #4]
     bc2:	4293      	cmp	r3, r2
     bc4:	4b03      	ldr	r3, [pc, #12]	; (bd4 <mskd_extract_geq()+0x1c>)
     bc6:	bf2c      	ite	cs
     bc8:	2220      	movcs	r2, #32
     bca:	2240      	movcc	r2, #64	; 0x40
     bcc:	605a      	str	r2, [r3, #4]
     bce:	4770      	bx	lr
     bd0:	200023e0 	.word	0x200023e0
     bd4:	20002480 	.word	0x20002480

00000bd8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     bd8:	4b04      	ldr	r3, [pc, #16]	; (bec <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     bda:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     bde:	605a      	str	r2, [r3, #4]
     be0:	685b      	ldr	r3, [r3, #4]
     be2:	4018      	ands	r0, r3
     be4:	40c8      	lsrs	r0, r1
     be6:	4b02      	ldr	r3, [pc, #8]	; (bf0 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     be8:	62d8      	str	r0, [r3, #44]	; 0x2c
     bea:	4770      	bx	lr
     bec:	200023e0 	.word	0x200023e0
     bf0:	200022c0 	.word	0x200022c0

00000bf4 <call_shifted_const_val()>:
     bf4:	b500      	push	{lr}
     bf6:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     bfa:	2119      	movs	r1, #25
     bfc:	f7ff fffe 	bl	bd8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c00:	f85d fb04 	ldr.w	pc, [sp], #4

00000c04 <call_shifted_var_val()>:
     c04:	b500      	push	{lr}
     c06:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c0a:	2119      	movs	r1, #25
     c0c:	f7ff fffe 	bl	bd8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c10:	f85d fb04 	ldr.w	pc, [sp], #4

00000c14 <call_shifted_global_val()>:
     c14:	b500      	push	{lr}
     c16:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
     c1a:	2119      	movs	r1, #25
     c1c:	f7ff fffe 	bl	bd8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     c20:	f85d fb04 	ldr.w	pc, [sp], #4

00000c24 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     c24:	4b05      	ldr	r3, [pc, #20]	; (c3c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     c26:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
     c2a:	605a      	str	r2, [r3, #4]
     c2c:	685b      	ldr	r3, [r3, #4]
     c2e:	6802      	ldr	r2, [r0, #0]
     c30:	4013      	ands	r3, r2
     c32:	6842      	ldr	r2, [r0, #4]
     c34:	40d3      	lsrs	r3, r2
     c36:	4a02      	ldr	r2, [pc, #8]	; (c40 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     c38:	62d3      	str	r3, [r2, #44]	; 0x2c
     c3a:	4770      	bx	lr
     c3c:	200023e0 	.word	0x200023e0
     c40:	200022c0 	.word	0x200022c0

00000c44 <call_shifted_const_ref()>:
     c44:	b500      	push	{lr}
     c46:	b082      	sub	sp, #8
     c48:	4b05      	ldr	r3, [pc, #20]	; (c60 <call_shifted_const_ref()+0x1c>)
     c4a:	f103 0308 	add.w	r3, r3, #8
     c4e:	cb0c      	ldmia	r3, {r2, r3}
     c50:	e88d 000c 	stmia.w	sp, {r2, r3}
     c54:	4668      	mov	r0, sp
     c56:	f7ff fffe 	bl	c24 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c5a:	b002      	add	sp, #8
     c5c:	f85d fb04 	ldr.w	pc, [sp], #4
     c60:	00000000 	.word	0x00000000

00000c64 <call_shifted_var_ref()>:
     c64:	b500      	push	{lr}
     c66:	b082      	sub	sp, #8
     c68:	4b05      	ldr	r3, [pc, #20]	; (c80 <call_shifted_var_ref()+0x1c>)
     c6a:	f103 0310 	add.w	r3, r3, #16
     c6e:	cb0c      	ldmia	r3, {r2, r3}
     c70:	e88d 000c 	stmia.w	sp, {r2, r3}
     c74:	4668      	mov	r0, sp
     c76:	f7ff fffe 	bl	c24 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c7a:	b002      	add	sp, #8
     c7c:	f85d fb04 	ldr.w	pc, [sp], #4
     c80:	00000000 	.word	0x00000000

00000c84 <call_shifted_global_ref()>:
     c84:	b500      	push	{lr}
     c86:	b082      	sub	sp, #8
     c88:	4b05      	ldr	r3, [pc, #20]	; (ca0 <call_shifted_global_ref()+0x1c>)
     c8a:	f103 0308 	add.w	r3, r3, #8
     c8e:	cb0c      	ldmia	r3, {r2, r3}
     c90:	e88d 000c 	stmia.w	sp, {r2, r3}
     c94:	4668      	mov	r0, sp
     c96:	f7ff fffe 	bl	c24 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     c9a:	b002      	add	sp, #8
     c9c:	f85d fb04 	ldr.w	pc, [sp], #4
     ca0:	00000000 	.word	0x00000000

00000ca4 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     ca4:	f010 0f40 	tst.w	r0, #64	; 0x40
     ca8:	4b02      	ldr	r3, [pc, #8]	; (cb4 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
     caa:	bf14      	ite	ne
     cac:	2202      	movne	r2, #2
     cae:	2204      	moveq	r2, #4
     cb0:	605a      	str	r2, [r3, #4]
     cb2:	4770      	bx	lr
     cb4:	20002480 	.word	0x20002480

00000cb8 <call_copy_bits_val()>:
     cb8:	b500      	push	{lr}
     cba:	4b04      	ldr	r3, [pc, #16]	; (ccc <call_copy_bits_val()+0x14>)
     cbc:	2240      	movs	r2, #64	; 0x40
     cbe:	605a      	str	r2, [r3, #4]
     cc0:	6858      	ldr	r0, [r3, #4]
     cc2:	f7ff fffe 	bl	ca4 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     cc6:	f85d fb04 	ldr.w	pc, [sp], #4
     cca:	bf00      	nop
     ccc:	20002480 	.word	0x20002480

00000cd0 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     cd0:	6803      	ldr	r3, [r0, #0]
     cd2:	f013 0f40 	tst.w	r3, #64	; 0x40
     cd6:	4b03      	ldr	r3, [pc, #12]	; (ce4 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
     cd8:	bf14      	ite	ne
     cda:	2202      	movne	r2, #2
     cdc:	2204      	moveq	r2, #4
     cde:	605a      	str	r2, [r3, #4]
     ce0:	4770      	bx	lr
     ce2:	bf00      	nop
     ce4:	20002480 	.word	0x20002480

00000ce8 <call_copy_bits_ref()>:
     ce8:	b500      	push	{lr}
     cea:	b081      	sub	sp, #4
     cec:	4b05      	ldr	r3, [pc, #20]	; (d04 <call_copy_bits_ref()+0x1c>)
     cee:	2240      	movs	r2, #64	; 0x40
     cf0:	605a      	str	r2, [r3, #4]
     cf2:	685b      	ldr	r3, [r3, #4]
     cf4:	9300      	str	r3, [sp, #0]
     cf6:	4668      	mov	r0, sp
     cf8:	f7ff fffe 	bl	cd0 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     cfc:	b001      	add	sp, #4
     cfe:	f85d fb04 	ldr.w	pc, [sp], #4
     d02:	bf00      	nop
     d04:	20002480 	.word	0x20002480

00000d08 <run>:
     d08:	b530      	push	{r4, r5, lr}
     d0a:	4bb0      	ldr	r3, [pc, #704]	; (fcc <run+0x2c4>)
     d0c:	781b      	ldrb	r3, [r3, #0]
     d0e:	b923      	cbnz	r3, d1a <run+0x12>
     d10:	4bae      	ldr	r3, [pc, #696]	; (fcc <run+0x2c4>)
     d12:	4aaf      	ldr	r2, [pc, #700]	; (fd0 <run+0x2c8>)
     d14:	609a      	str	r2, [r3, #8]
     d16:	2201      	movs	r2, #1
     d18:	701a      	strb	r2, [r3, #0]
     d1a:	4bac      	ldr	r3, [pc, #688]	; (fcc <run+0x2c4>)
     d1c:	7b1b      	ldrb	r3, [r3, #12]
     d1e:	b923      	cbnz	r3, d2a <run+0x22>
     d20:	4baa      	ldr	r3, [pc, #680]	; (fcc <run+0x2c4>)
     d22:	4aac      	ldr	r2, [pc, #688]	; (fd4 <run+0x2cc>)
     d24:	615a      	str	r2, [r3, #20]
     d26:	2201      	movs	r2, #1
     d28:	731a      	strb	r2, [r3, #12]
     d2a:	4ba8      	ldr	r3, [pc, #672]	; (fcc <run+0x2c4>)
     d2c:	7e1b      	ldrb	r3, [r3, #24]
     d2e:	b923      	cbnz	r3, d3a <run+0x32>
     d30:	4ba6      	ldr	r3, [pc, #664]	; (fcc <run+0x2c4>)
     d32:	4aa9      	ldr	r2, [pc, #676]	; (fd8 <run+0x2d0>)
     d34:	621a      	str	r2, [r3, #32]
     d36:	2201      	movs	r2, #1
     d38:	761a      	strb	r2, [r3, #24]
     d3a:	4ca4      	ldr	r4, [pc, #656]	; (fcc <run+0x2c4>)
     d3c:	2200      	movs	r2, #0
     d3e:	68a1      	ldr	r1, [r4, #8]
     d40:	48a6      	ldr	r0, [pc, #664]	; (fdc <run+0x2d4>)
     d42:	f7ff fffe 	bl	0 <do_test>
     d46:	2201      	movs	r2, #1
     d48:	68a1      	ldr	r1, [r4, #8]
     d4a:	48a5      	ldr	r0, [pc, #660]	; (fe0 <run+0x2d8>)
     d4c:	f7ff fffe 	bl	0 <do_test>
     d50:	2202      	movs	r2, #2
     d52:	68a1      	ldr	r1, [r4, #8]
     d54:	48a3      	ldr	r0, [pc, #652]	; (fe4 <run+0x2dc>)
     d56:	f7ff fffe 	bl	0 <do_test>
     d5a:	2203      	movs	r2, #3
     d5c:	68a1      	ldr	r1, [r4, #8]
     d5e:	48a2      	ldr	r0, [pc, #648]	; (fe8 <run+0x2e0>)
     d60:	f7ff fffe 	bl	0 <do_test>
     d64:	2204      	movs	r2, #4
     d66:	68a1      	ldr	r1, [r4, #8]
     d68:	48a0      	ldr	r0, [pc, #640]	; (fec <run+0x2e4>)
     d6a:	f7ff fffe 	bl	0 <do_test>
     d6e:	2205      	movs	r2, #5
     d70:	68a1      	ldr	r1, [r4, #8]
     d72:	489f      	ldr	r0, [pc, #636]	; (ff0 <run+0x2e8>)
     d74:	f7ff fffe 	bl	0 <do_test>
     d78:	2206      	movs	r2, #6
     d7a:	68a1      	ldr	r1, [r4, #8]
     d7c:	489d      	ldr	r0, [pc, #628]	; (ff4 <run+0x2ec>)
     d7e:	f7ff fffe 	bl	0 <do_test>
     d82:	2207      	movs	r2, #7
     d84:	68a1      	ldr	r1, [r4, #8]
     d86:	489c      	ldr	r0, [pc, #624]	; (ff8 <run+0x2f0>)
     d88:	f7ff fffe 	bl	0 <do_test>
     d8c:	2208      	movs	r2, #8
     d8e:	68a1      	ldr	r1, [r4, #8]
     d90:	489a      	ldr	r0, [pc, #616]	; (ffc <run+0x2f4>)
     d92:	f7ff fffe 	bl	0 <do_test>
     d96:	2209      	movs	r2, #9
     d98:	68a1      	ldr	r1, [r4, #8]
     d9a:	4899      	ldr	r0, [pc, #612]	; (1000 <run+0x2f8>)
     d9c:	f7ff fffe 	bl	0 <do_test>
     da0:	220a      	movs	r2, #10
     da2:	68a1      	ldr	r1, [r4, #8]
     da4:	4897      	ldr	r0, [pc, #604]	; (1004 <run+0x2fc>)
     da6:	f7ff fffe 	bl	0 <do_test>
     daa:	220b      	movs	r2, #11
     dac:	68a1      	ldr	r1, [r4, #8]
     dae:	4896      	ldr	r0, [pc, #600]	; (1008 <run+0x300>)
     db0:	f7ff fffe 	bl	0 <do_test>
     db4:	220c      	movs	r2, #12
     db6:	68a1      	ldr	r1, [r4, #8]
     db8:	4894      	ldr	r0, [pc, #592]	; (100c <run+0x304>)
     dba:	f7ff fffe 	bl	0 <do_test>
     dbe:	220d      	movs	r2, #13
     dc0:	68a1      	ldr	r1, [r4, #8]
     dc2:	4893      	ldr	r0, [pc, #588]	; (1010 <run+0x308>)
     dc4:	f7ff fffe 	bl	0 <do_test>
     dc8:	220e      	movs	r2, #14
     dca:	68a1      	ldr	r1, [r4, #8]
     dcc:	4891      	ldr	r0, [pc, #580]	; (1014 <run+0x30c>)
     dce:	f7ff fffe 	bl	0 <do_test>
     dd2:	220f      	movs	r2, #15
     dd4:	68a1      	ldr	r1, [r4, #8]
     dd6:	4890      	ldr	r0, [pc, #576]	; (1018 <run+0x310>)
     dd8:	f7ff fffe 	bl	0 <do_test>
     ddc:	2210      	movs	r2, #16
     dde:	68a1      	ldr	r1, [r4, #8]
     de0:	488e      	ldr	r0, [pc, #568]	; (101c <run+0x314>)
     de2:	f7ff fffe 	bl	0 <do_test>
     de6:	2211      	movs	r2, #17
     de8:	68a1      	ldr	r1, [r4, #8]
     dea:	488d      	ldr	r0, [pc, #564]	; (1020 <run+0x318>)
     dec:	f7ff fffe 	bl	0 <do_test>
     df0:	2212      	movs	r2, #18
     df2:	68a1      	ldr	r1, [r4, #8]
     df4:	488b      	ldr	r0, [pc, #556]	; (1024 <run+0x31c>)
     df6:	f7ff fffe 	bl	0 <do_test>
     dfa:	2213      	movs	r2, #19
     dfc:	68a1      	ldr	r1, [r4, #8]
     dfe:	488a      	ldr	r0, [pc, #552]	; (1028 <run+0x320>)
     e00:	f7ff fffe 	bl	0 <do_test>
     e04:	2214      	movs	r2, #20
     e06:	68a1      	ldr	r1, [r4, #8]
     e08:	4888      	ldr	r0, [pc, #544]	; (102c <run+0x324>)
     e0a:	f7ff fffe 	bl	0 <do_test>
     e0e:	2215      	movs	r2, #21
     e10:	68a1      	ldr	r1, [r4, #8]
     e12:	4887      	ldr	r0, [pc, #540]	; (1030 <run+0x328>)
     e14:	f7ff fffe 	bl	0 <do_test>
     e18:	2216      	movs	r2, #22
     e1a:	68a1      	ldr	r1, [r4, #8]
     e1c:	4885      	ldr	r0, [pc, #532]	; (1034 <run+0x32c>)
     e1e:	f7ff fffe 	bl	0 <do_test>
     e22:	2217      	movs	r2, #23
     e24:	68a1      	ldr	r1, [r4, #8]
     e26:	4884      	ldr	r0, [pc, #528]	; (1038 <run+0x330>)
     e28:	f7ff fffe 	bl	0 <do_test>
     e2c:	2218      	movs	r2, #24
     e2e:	68a1      	ldr	r1, [r4, #8]
     e30:	4882      	ldr	r0, [pc, #520]	; (103c <run+0x334>)
     e32:	f7ff fffe 	bl	0 <do_test>
     e36:	2219      	movs	r2, #25
     e38:	68a1      	ldr	r1, [r4, #8]
     e3a:	4881      	ldr	r0, [pc, #516]	; (1040 <run+0x338>)
     e3c:	f7ff fffe 	bl	0 <do_test>
     e40:	221a      	movs	r2, #26
     e42:	68a1      	ldr	r1, [r4, #8]
     e44:	487f      	ldr	r0, [pc, #508]	; (1044 <run+0x33c>)
     e46:	f7ff fffe 	bl	0 <do_test>
     e4a:	221b      	movs	r2, #27
     e4c:	68a1      	ldr	r1, [r4, #8]
     e4e:	487e      	ldr	r0, [pc, #504]	; (1048 <run+0x340>)
     e50:	f7ff fffe 	bl	0 <do_test>
     e54:	221c      	movs	r2, #28
     e56:	68a1      	ldr	r1, [r4, #8]
     e58:	487c      	ldr	r0, [pc, #496]	; (104c <run+0x344>)
     e5a:	f7ff fffe 	bl	0 <do_test>
     e5e:	221d      	movs	r2, #29
     e60:	68a1      	ldr	r1, [r4, #8]
     e62:	487b      	ldr	r0, [pc, #492]	; (1050 <run+0x348>)
     e64:	f7ff fffe 	bl	0 <do_test>
     e68:	221e      	movs	r2, #30
     e6a:	68a1      	ldr	r1, [r4, #8]
     e6c:	4879      	ldr	r0, [pc, #484]	; (1054 <run+0x34c>)
     e6e:	f7ff fffe 	bl	0 <do_test>
     e72:	221f      	movs	r2, #31
     e74:	68a1      	ldr	r1, [r4, #8]
     e76:	4878      	ldr	r0, [pc, #480]	; (1058 <run+0x350>)
     e78:	f7ff fffe 	bl	0 <do_test>
     e7c:	2220      	movs	r2, #32
     e7e:	68a1      	ldr	r1, [r4, #8]
     e80:	4876      	ldr	r0, [pc, #472]	; (105c <run+0x354>)
     e82:	f7ff fffe 	bl	0 <do_test>
     e86:	2221      	movs	r2, #33	; 0x21
     e88:	68a1      	ldr	r1, [r4, #8]
     e8a:	4875      	ldr	r0, [pc, #468]	; (1060 <run+0x358>)
     e8c:	f7ff fffe 	bl	0 <do_test>
     e90:	2222      	movs	r2, #34	; 0x22
     e92:	68a1      	ldr	r1, [r4, #8]
     e94:	4873      	ldr	r0, [pc, #460]	; (1064 <run+0x35c>)
     e96:	f7ff fffe 	bl	0 <do_test>
     e9a:	2223      	movs	r2, #35	; 0x23
     e9c:	68a1      	ldr	r1, [r4, #8]
     e9e:	4872      	ldr	r0, [pc, #456]	; (1068 <run+0x360>)
     ea0:	f7ff fffe 	bl	0 <do_test>
     ea4:	2224      	movs	r2, #36	; 0x24
     ea6:	68a1      	ldr	r1, [r4, #8]
     ea8:	4870      	ldr	r0, [pc, #448]	; (106c <run+0x364>)
     eaa:	f7ff fffe 	bl	0 <do_test>
     eae:	2225      	movs	r2, #37	; 0x25
     eb0:	6961      	ldr	r1, [r4, #20]
     eb2:	486f      	ldr	r0, [pc, #444]	; (1070 <run+0x368>)
     eb4:	f7ff fffe 	bl	0 <do_test>
     eb8:	2226      	movs	r2, #38	; 0x26
     eba:	6961      	ldr	r1, [r4, #20]
     ebc:	486d      	ldr	r0, [pc, #436]	; (1074 <run+0x36c>)
     ebe:	f7ff fffe 	bl	0 <do_test>
     ec2:	2227      	movs	r2, #39	; 0x27
     ec4:	6961      	ldr	r1, [r4, #20]
     ec6:	486c      	ldr	r0, [pc, #432]	; (1078 <run+0x370>)
     ec8:	f7ff fffe 	bl	0 <do_test>
     ecc:	2228      	movs	r2, #40	; 0x28
     ece:	68a1      	ldr	r1, [r4, #8]
     ed0:	486a      	ldr	r0, [pc, #424]	; (107c <run+0x374>)
     ed2:	f7ff fffe 	bl	0 <do_test>
     ed6:	2229      	movs	r2, #41	; 0x29
     ed8:	68a1      	ldr	r1, [r4, #8]
     eda:	4869      	ldr	r0, [pc, #420]	; (1080 <run+0x378>)
     edc:	f7ff fffe 	bl	0 <do_test>
     ee0:	222a      	movs	r2, #42	; 0x2a
     ee2:	68a1      	ldr	r1, [r4, #8]
     ee4:	4867      	ldr	r0, [pc, #412]	; (1084 <run+0x37c>)
     ee6:	f7ff fffe 	bl	0 <do_test>
     eea:	222b      	movs	r2, #43	; 0x2b
     eec:	68a1      	ldr	r1, [r4, #8]
     eee:	4866      	ldr	r0, [pc, #408]	; (1088 <run+0x380>)
     ef0:	f7ff fffe 	bl	0 <do_test>
     ef4:	222c      	movs	r2, #44	; 0x2c
     ef6:	68a1      	ldr	r1, [r4, #8]
     ef8:	4864      	ldr	r0, [pc, #400]	; (108c <run+0x384>)
     efa:	f7ff fffe 	bl	0 <do_test>
     efe:	222d      	movs	r2, #45	; 0x2d
     f00:	6a21      	ldr	r1, [r4, #32]
     f02:	4863      	ldr	r0, [pc, #396]	; (1090 <run+0x388>)
     f04:	f7ff fffe 	bl	0 <do_test>
     f08:	222e      	movs	r2, #46	; 0x2e
     f0a:	68a1      	ldr	r1, [r4, #8]
     f0c:	4861      	ldr	r0, [pc, #388]	; (1094 <run+0x38c>)
     f0e:	f7ff fffe 	bl	0 <do_test>
     f12:	222f      	movs	r2, #47	; 0x2f
     f14:	68a1      	ldr	r1, [r4, #8]
     f16:	4860      	ldr	r0, [pc, #384]	; (1098 <run+0x390>)
     f18:	f7ff fffe 	bl	0 <do_test>
     f1c:	2230      	movs	r2, #48	; 0x30
     f1e:	68a1      	ldr	r1, [r4, #8]
     f20:	485e      	ldr	r0, [pc, #376]	; (109c <run+0x394>)
     f22:	f7ff fffe 	bl	0 <do_test>
     f26:	2231      	movs	r2, #49	; 0x31
     f28:	68a1      	ldr	r1, [r4, #8]
     f2a:	485d      	ldr	r0, [pc, #372]	; (10a0 <run+0x398>)
     f2c:	f7ff fffe 	bl	0 <do_test>
     f30:	2232      	movs	r2, #50	; 0x32
     f32:	68a1      	ldr	r1, [r4, #8]
     f34:	485b      	ldr	r0, [pc, #364]	; (10a4 <run+0x39c>)
     f36:	f7ff fffe 	bl	0 <do_test>
     f3a:	2233      	movs	r2, #51	; 0x33
     f3c:	68a1      	ldr	r1, [r4, #8]
     f3e:	485a      	ldr	r0, [pc, #360]	; (10a8 <run+0x3a0>)
     f40:	f7ff fffe 	bl	0 <do_test>
     f44:	2234      	movs	r2, #52	; 0x34
     f46:	68a1      	ldr	r1, [r4, #8]
     f48:	4858      	ldr	r0, [pc, #352]	; (10ac <run+0x3a4>)
     f4a:	f7ff fffe 	bl	0 <do_test>
     f4e:	2235      	movs	r2, #53	; 0x35
     f50:	68a1      	ldr	r1, [r4, #8]
     f52:	4857      	ldr	r0, [pc, #348]	; (10b0 <run+0x3a8>)
     f54:	f7ff fffe 	bl	0 <do_test>
     f58:	2236      	movs	r2, #54	; 0x36
     f5a:	68a1      	ldr	r1, [r4, #8]
     f5c:	4855      	ldr	r0, [pc, #340]	; (10b4 <run+0x3ac>)
     f5e:	f7ff fffe 	bl	0 <do_test>
     f62:	2237      	movs	r2, #55	; 0x37
     f64:	68a1      	ldr	r1, [r4, #8]
     f66:	4854      	ldr	r0, [pc, #336]	; (10b8 <run+0x3b0>)
     f68:	f7ff fffe 	bl	0 <do_test>
     f6c:	2238      	movs	r2, #56	; 0x38
     f6e:	68a1      	ldr	r1, [r4, #8]
     f70:	4852      	ldr	r0, [pc, #328]	; (10bc <run+0x3b4>)
     f72:	f7ff fffe 	bl	0 <do_test>
     f76:	2239      	movs	r2, #57	; 0x39
     f78:	68a1      	ldr	r1, [r4, #8]
     f7a:	4851      	ldr	r0, [pc, #324]	; (10c0 <run+0x3b8>)
     f7c:	f7ff fffe 	bl	0 <do_test>
     f80:	223a      	movs	r2, #58	; 0x3a
     f82:	68a1      	ldr	r1, [r4, #8]
     f84:	484f      	ldr	r0, [pc, #316]	; (10c4 <run+0x3bc>)
     f86:	f7ff fffe 	bl	0 <do_test>
     f8a:	223b      	movs	r2, #59	; 0x3b
     f8c:	68a1      	ldr	r1, [r4, #8]
     f8e:	484e      	ldr	r0, [pc, #312]	; (10c8 <run+0x3c0>)
     f90:	f7ff fffe 	bl	0 <do_test>
     f94:	223c      	movs	r2, #60	; 0x3c
     f96:	68a1      	ldr	r1, [r4, #8]
     f98:	484c      	ldr	r0, [pc, #304]	; (10cc <run+0x3c4>)
     f9a:	f7ff fffe 	bl	0 <do_test>
     f9e:	223d      	movs	r2, #61	; 0x3d
     fa0:	68a1      	ldr	r1, [r4, #8]
     fa2:	484b      	ldr	r0, [pc, #300]	; (10d0 <run+0x3c8>)
     fa4:	f7ff fffe 	bl	0 <do_test>
     fa8:	223e      	movs	r2, #62	; 0x3e
     faa:	68a1      	ldr	r1, [r4, #8]
     fac:	4849      	ldr	r0, [pc, #292]	; (10d4 <run+0x3cc>)
     fae:	f7ff fffe 	bl	0 <do_test>
     fb2:	223f      	movs	r2, #63	; 0x3f
     fb4:	68a1      	ldr	r1, [r4, #8]
     fb6:	4848      	ldr	r0, [pc, #288]	; (10d8 <run+0x3d0>)
     fb8:	f7ff fffe 	bl	0 <do_test>
     fbc:	2240      	movs	r2, #64	; 0x40
     fbe:	68a1      	ldr	r1, [r4, #8]
     fc0:	4846      	ldr	r0, [pc, #280]	; (10dc <run+0x3d4>)
     fc2:	f7ff fffe 	bl	0 <do_test>
     fc6:	2241      	movs	r2, #65	; 0x41
     fc8:	68a1      	ldr	r1, [r4, #8]
     fca:	e089      	b.n	10e0 <run+0x3d8>
     fcc:	00000000 	.word	0x00000000
     fd0:	20002484 	.word	0x20002484
     fd4:	200023e4 	.word	0x200023e4
     fd8:	200022ec 	.word	0x200022ec
	...
    10e0:	4884      	ldr	r0, [pc, #528]	; (214 <do_test+0x214>)
    10e2:	f7ff fffe 	bl	0 <do_test>
    10e6:	2242      	movs	r2, #66	; 0x42
    10e8:	6961      	ldr	r1, [r4, #20]
    10ea:	4883      	ldr	r0, [pc, #524]	; (12f8 <run+0x5f0>)
    10ec:	f7ff fffe 	bl	0 <do_test>
    10f0:	2243      	movs	r2, #67	; 0x43
    10f2:	6961      	ldr	r1, [r4, #20]
    10f4:	4881      	ldr	r0, [pc, #516]	; (12fc <run+0x5f4>)
    10f6:	f7ff fffe 	bl	0 <do_test>
    10fa:	2244      	movs	r2, #68	; 0x44
    10fc:	6961      	ldr	r1, [r4, #20]
    10fe:	4880      	ldr	r0, [pc, #512]	; (1300 <run+0x5f8>)
    1100:	f7ff fffe 	bl	0 <do_test>
    1104:	2245      	movs	r2, #69	; 0x45
    1106:	68a1      	ldr	r1, [r4, #8]
    1108:	487e      	ldr	r0, [pc, #504]	; (1304 <run+0x5fc>)
    110a:	f7ff fffe 	bl	0 <do_test>
    110e:	2246      	movs	r2, #70	; 0x46
    1110:	6a21      	ldr	r1, [r4, #32]
    1112:	487d      	ldr	r0, [pc, #500]	; (1308 <run+0x600>)
    1114:	f7ff fffe 	bl	0 <do_test>
    1118:	2247      	movs	r2, #71	; 0x47
    111a:	6a21      	ldr	r1, [r4, #32]
    111c:	487b      	ldr	r0, [pc, #492]	; (130c <run+0x604>)
    111e:	f7ff fffe 	bl	0 <do_test>
    1122:	2248      	movs	r2, #72	; 0x48
    1124:	68a1      	ldr	r1, [r4, #8]
    1126:	487a      	ldr	r0, [pc, #488]	; (1310 <run+0x608>)
    1128:	f7ff fffe 	bl	0 <do_test>
    112c:	2249      	movs	r2, #73	; 0x49
    112e:	68a1      	ldr	r1, [r4, #8]
    1130:	4878      	ldr	r0, [pc, #480]	; (1314 <run+0x60c>)
    1132:	f7ff fffe 	bl	0 <do_test>
    1136:	224a      	movs	r2, #74	; 0x4a
    1138:	6a21      	ldr	r1, [r4, #32]
    113a:	4877      	ldr	r0, [pc, #476]	; (1318 <run+0x610>)
    113c:	f7ff fffe 	bl	0 <do_test>
    1140:	224b      	movs	r2, #75	; 0x4b
    1142:	6a21      	ldr	r1, [r4, #32]
    1144:	4875      	ldr	r0, [pc, #468]	; (131c <run+0x614>)
    1146:	f7ff fffe 	bl	0 <do_test>
    114a:	224c      	movs	r2, #76	; 0x4c
    114c:	68a1      	ldr	r1, [r4, #8]
    114e:	4874      	ldr	r0, [pc, #464]	; (1320 <run+0x618>)
    1150:	f7ff fffe 	bl	0 <do_test>
    1154:	224d      	movs	r2, #77	; 0x4d
    1156:	68a1      	ldr	r1, [r4, #8]
    1158:	4872      	ldr	r0, [pc, #456]	; (1324 <run+0x61c>)
    115a:	f7ff fffe 	bl	0 <do_test>
    115e:	224e      	movs	r2, #78	; 0x4e
    1160:	68a1      	ldr	r1, [r4, #8]
    1162:	4871      	ldr	r0, [pc, #452]	; (1328 <run+0x620>)
    1164:	f7ff fffe 	bl	0 <do_test>
    1168:	224f      	movs	r2, #79	; 0x4f
    116a:	68a1      	ldr	r1, [r4, #8]
    116c:	486f      	ldr	r0, [pc, #444]	; (132c <run+0x624>)
    116e:	f7ff fffe 	bl	0 <do_test>
    1172:	2250      	movs	r2, #80	; 0x50
    1174:	68a1      	ldr	r1, [r4, #8]
    1176:	486e      	ldr	r0, [pc, #440]	; (1330 <run+0x628>)
    1178:	f7ff fffe 	bl	0 <do_test>
    117c:	2251      	movs	r2, #81	; 0x51
    117e:	68a1      	ldr	r1, [r4, #8]
    1180:	486c      	ldr	r0, [pc, #432]	; (1334 <run+0x62c>)
    1182:	f7ff fffe 	bl	0 <do_test>
    1186:	4d6c      	ldr	r5, [pc, #432]	; (1338 <run+0x630>)
    1188:	2252      	movs	r2, #82	; 0x52
    118a:	68a1      	ldr	r1, [r4, #8]
    118c:	4628      	mov	r0, r5
    118e:	f7ff fffe 	bl	0 <do_test>
    1192:	2253      	movs	r2, #83	; 0x53
    1194:	68a1      	ldr	r1, [r4, #8]
    1196:	4628      	mov	r0, r5
    1198:	f7ff fffe 	bl	0 <do_test>
    119c:	2254      	movs	r2, #84	; 0x54
    119e:	68a1      	ldr	r1, [r4, #8]
    11a0:	4866      	ldr	r0, [pc, #408]	; (133c <run+0x634>)
    11a2:	f7ff fffe 	bl	0 <do_test>
    11a6:	2255      	movs	r2, #85	; 0x55
    11a8:	68a1      	ldr	r1, [r4, #8]
    11aa:	4865      	ldr	r0, [pc, #404]	; (1340 <run+0x638>)
    11ac:	f7ff fffe 	bl	0 <do_test>
    11b0:	2256      	movs	r2, #86	; 0x56
    11b2:	68a1      	ldr	r1, [r4, #8]
    11b4:	4863      	ldr	r0, [pc, #396]	; (1344 <run+0x63c>)
    11b6:	f7ff fffe 	bl	0 <do_test>
    11ba:	4d63      	ldr	r5, [pc, #396]	; (1348 <run+0x640>)
    11bc:	2257      	movs	r2, #87	; 0x57
    11be:	68a1      	ldr	r1, [r4, #8]
    11c0:	4628      	mov	r0, r5
    11c2:	f7ff fffe 	bl	0 <do_test>
    11c6:	2258      	movs	r2, #88	; 0x58
    11c8:	68a1      	ldr	r1, [r4, #8]
    11ca:	4860      	ldr	r0, [pc, #384]	; (134c <run+0x644>)
    11cc:	f7ff fffe 	bl	0 <do_test>
    11d0:	2259      	movs	r2, #89	; 0x59
    11d2:	68a1      	ldr	r1, [r4, #8]
    11d4:	4628      	mov	r0, r5
    11d6:	f7ff fffe 	bl	0 <do_test>
    11da:	225a      	movs	r2, #90	; 0x5a
    11dc:	68a1      	ldr	r1, [r4, #8]
    11de:	485c      	ldr	r0, [pc, #368]	; (1350 <run+0x648>)
    11e0:	f7ff fffe 	bl	0 <do_test>
    11e4:	225b      	movs	r2, #91	; 0x5b
    11e6:	68a1      	ldr	r1, [r4, #8]
    11e8:	485a      	ldr	r0, [pc, #360]	; (1354 <run+0x64c>)
    11ea:	f7ff fffe 	bl	0 <do_test>
    11ee:	225c      	movs	r2, #92	; 0x5c
    11f0:	6a21      	ldr	r1, [r4, #32]
    11f2:	4859      	ldr	r0, [pc, #356]	; (1358 <run+0x650>)
    11f4:	f7ff fffe 	bl	0 <do_test>
    11f8:	225d      	movs	r2, #93	; 0x5d
    11fa:	6a21      	ldr	r1, [r4, #32]
    11fc:	4857      	ldr	r0, [pc, #348]	; (135c <run+0x654>)
    11fe:	f7ff fffe 	bl	0 <do_test>
    1202:	225e      	movs	r2, #94	; 0x5e
    1204:	68a1      	ldr	r1, [r4, #8]
    1206:	4856      	ldr	r0, [pc, #344]	; (1360 <run+0x658>)
    1208:	f7ff fffe 	bl	0 <do_test>
    120c:	225f      	movs	r2, #95	; 0x5f
    120e:	6a21      	ldr	r1, [r4, #32]
    1210:	4854      	ldr	r0, [pc, #336]	; (1364 <run+0x65c>)
    1212:	f7ff fffe 	bl	0 <do_test>
    1216:	2260      	movs	r2, #96	; 0x60
    1218:	6a21      	ldr	r1, [r4, #32]
    121a:	4853      	ldr	r0, [pc, #332]	; (1368 <run+0x660>)
    121c:	f7ff fffe 	bl	0 <do_test>
    1220:	2261      	movs	r2, #97	; 0x61
    1222:	68a1      	ldr	r1, [r4, #8]
    1224:	4851      	ldr	r0, [pc, #324]	; (136c <run+0x664>)
    1226:	f7ff fffe 	bl	0 <do_test>
    122a:	2262      	movs	r2, #98	; 0x62
    122c:	68a1      	ldr	r1, [r4, #8]
    122e:	4850      	ldr	r0, [pc, #320]	; (1370 <run+0x668>)
    1230:	f7ff fffe 	bl	0 <do_test>
    1234:	2263      	movs	r2, #99	; 0x63
    1236:	68a1      	ldr	r1, [r4, #8]
    1238:	484e      	ldr	r0, [pc, #312]	; (1374 <run+0x66c>)
    123a:	f7ff fffe 	bl	0 <do_test>
    123e:	2264      	movs	r2, #100	; 0x64
    1240:	68a1      	ldr	r1, [r4, #8]
    1242:	484d      	ldr	r0, [pc, #308]	; (1378 <run+0x670>)
    1244:	f7ff fffe 	bl	0 <do_test>
    1248:	2265      	movs	r2, #101	; 0x65
    124a:	6a21      	ldr	r1, [r4, #32]
    124c:	484b      	ldr	r0, [pc, #300]	; (137c <run+0x674>)
    124e:	f7ff fffe 	bl	0 <do_test>
    1252:	2266      	movs	r2, #102	; 0x66
    1254:	6a21      	ldr	r1, [r4, #32]
    1256:	484a      	ldr	r0, [pc, #296]	; (1380 <run+0x678>)
    1258:	f7ff fffe 	bl	0 <do_test>
    125c:	2267      	movs	r2, #103	; 0x67
    125e:	6a21      	ldr	r1, [r4, #32]
    1260:	4848      	ldr	r0, [pc, #288]	; (1384 <run+0x67c>)
    1262:	f7ff fffe 	bl	0 <do_test>
    1266:	2268      	movs	r2, #104	; 0x68
    1268:	6a21      	ldr	r1, [r4, #32]
    126a:	4847      	ldr	r0, [pc, #284]	; (1388 <run+0x680>)
    126c:	f7ff fffe 	bl	0 <do_test>
    1270:	2269      	movs	r2, #105	; 0x69
    1272:	6a21      	ldr	r1, [r4, #32]
    1274:	4845      	ldr	r0, [pc, #276]	; (138c <run+0x684>)
    1276:	f7ff fffe 	bl	0 <do_test>
    127a:	226a      	movs	r2, #106	; 0x6a
    127c:	6a21      	ldr	r1, [r4, #32]
    127e:	4844      	ldr	r0, [pc, #272]	; (1390 <run+0x688>)
    1280:	f7ff fffe 	bl	0 <do_test>
    1284:	226b      	movs	r2, #107	; 0x6b
    1286:	68a1      	ldr	r1, [r4, #8]
    1288:	4842      	ldr	r0, [pc, #264]	; (1394 <run+0x68c>)
    128a:	f7ff fffe 	bl	0 <do_test>
    128e:	226c      	movs	r2, #108	; 0x6c
    1290:	68a1      	ldr	r1, [r4, #8]
    1292:	4841      	ldr	r0, [pc, #260]	; (1398 <run+0x690>)
    1294:	f7ff fffe 	bl	0 <do_test>
    1298:	226d      	movs	r2, #109	; 0x6d
    129a:	68a1      	ldr	r1, [r4, #8]
    129c:	483f      	ldr	r0, [pc, #252]	; (139c <run+0x694>)
    129e:	f7ff fffe 	bl	0 <do_test>
    12a2:	226e      	movs	r2, #110	; 0x6e
    12a4:	68a1      	ldr	r1, [r4, #8]
    12a6:	483e      	ldr	r0, [pc, #248]	; (13a0 <run+0x698>)
    12a8:	f7ff fffe 	bl	0 <do_test>
    12ac:	226f      	movs	r2, #111	; 0x6f
    12ae:	68a1      	ldr	r1, [r4, #8]
    12b0:	483c      	ldr	r0, [pc, #240]	; (13a4 <run+0x69c>)
    12b2:	f7ff fffe 	bl	0 <do_test>
    12b6:	2270      	movs	r2, #112	; 0x70
    12b8:	68a1      	ldr	r1, [r4, #8]
    12ba:	483b      	ldr	r0, [pc, #236]	; (13a8 <run+0x6a0>)
    12bc:	f7ff fffe 	bl	0 <do_test>
    12c0:	2271      	movs	r2, #113	; 0x71
    12c2:	68a1      	ldr	r1, [r4, #8]
    12c4:	4839      	ldr	r0, [pc, #228]	; (13ac <run+0x6a4>)
    12c6:	f7ff fffe 	bl	0 <do_test>
    12ca:	2272      	movs	r2, #114	; 0x72
    12cc:	68a1      	ldr	r1, [r4, #8]
    12ce:	4838      	ldr	r0, [pc, #224]	; (13b0 <run+0x6a8>)
    12d0:	f7ff fffe 	bl	0 <do_test>
    12d4:	2273      	movs	r2, #115	; 0x73
    12d6:	68a1      	ldr	r1, [r4, #8]
    12d8:	4836      	ldr	r0, [pc, #216]	; (13b4 <run+0x6ac>)
    12da:	f7ff fffe 	bl	0 <do_test>
    12de:	2274      	movs	r2, #116	; 0x74
    12e0:	68a1      	ldr	r1, [r4, #8]
    12e2:	4835      	ldr	r0, [pc, #212]	; (13b8 <run+0x6b0>)
    12e4:	f7ff fffe 	bl	0 <do_test>
    12e8:	2275      	movs	r2, #117	; 0x75
    12ea:	68a1      	ldr	r1, [r4, #8]
    12ec:	4833      	ldr	r0, [pc, #204]	; (13bc <run+0x6b4>)
    12ee:	f7ff fffe 	bl	0 <do_test>
    12f2:	bd30      	pop	{r4, r5, pc}
	...

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	0000 0000                                   ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	0000 0000                                   ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	0000 0000                                   ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
