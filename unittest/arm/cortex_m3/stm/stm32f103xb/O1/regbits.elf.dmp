
O1/regbits.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <INTERRUPT_VECTORS>:
20000000:	00 50 00 20 bb 15 00 20 49 15 00 20 4b 15 00 20     .P. ... I.. K.. 
20000010:	4d 15 00 20 4f 15 00 20 51 15 00 20 53 15 00 20     M.. O.. Q.. S.. 
20000020:	55 15 00 20 57 15 00 20 59 15 00 20 5b 15 00 20     U.. W.. Y.. [.. 
20000030:	5d 15 00 20 5f 15 00 20 61 15 00 20 63 15 00 20     ].. _.. a.. c.. 
20000040:	65 15 00 20 67 15 00 20 69 15 00 20 6b 15 00 20     e.. g.. i.. k.. 
20000050:	6d 15 00 20 6f 15 00 20 71 15 00 20 73 15 00 20     m.. o.. q.. s.. 
20000060:	75 15 00 20 77 15 00 20 79 15 00 20 7b 15 00 20     u.. w.. y.. {.. 
20000070:	7d 15 00 20 7f 15 00 20 81 15 00 20 83 15 00 20     }.. ... ... ... 
20000080:	85 15 00 20 87 15 00 20 89 15 00 20 8b 15 00 20     ... ... ... ... 
20000090:	8d 15 00 20 8f 15 00 20 91 15 00 20 93 15 00 20     ... ... ... ... 
200000a0:	95 15 00 20 97 15 00 20 99 15 00 20 9b 15 00 20     ... ... ... ... 
200000b0:	9d 15 00 20 9f 15 00 20 a1 15 00 20 a3 15 00 20     ... ... ... ... 
200000c0:	a5 15 00 20 a7 15 00 20 a9 15 00 20 ab 15 00 20     ... ... ... ... 
200000d0:	ad 15 00 20 af 15 00 20 b1 15 00 20 b3 15 00 20     ... ... ... ... 
200000e0:	b5 15 00 20 b7 15 00 20 b9 15 00 20                 ... ... ... 

200000ec <zero_reg()>:
200000ec:	4b01      	ldr	r3, [pc, #4]	; (200000f4 <zero_reg()+0x8>)
200000ee:	2200      	movs	r2, #0
200000f0:	605a      	str	r2, [r3, #4]
200000f2:	4770      	bx	lr
200000f4:	20002480 	.word	0x20002480

200000f8 <zero_array()>:
200000f8:	4b01      	ldr	r3, [pc, #4]	; (20000100 <zero_array()+0x8>)
200000fa:	2200      	movs	r2, #0
200000fc:	62da      	str	r2, [r3, #44]	; 0x2c
200000fe:	4770      	bx	lr
20000100:	200022c0 	.word	0x200022c0

20000104 <set_singl_bits_operator()>:
20000104:	4a02      	ldr	r2, [pc, #8]	; (20000110 <set_singl_bits_operator()+0xc>)
20000106:	6853      	ldr	r3, [r2, #4]
20000108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000010c:	6053      	str	r3, [r2, #4]
2000010e:	4770      	bx	lr
20000110:	20002480 	.word	0x20002480

20000114 <set_singl_bits_method()>:
20000114:	4a02      	ldr	r2, [pc, #8]	; (20000120 <set_singl_bits_method()+0xc>)
20000116:	6853      	ldr	r3, [r2, #4]
20000118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000011c:	6053      	str	r3, [r2, #4]
2000011e:	4770      	bx	lr
20000120:	20002480 	.word	0x20002480

20000124 <clr_singl_bits_operator()>:
20000124:	4a02      	ldr	r2, [pc, #8]	; (20000130 <clr_singl_bits_operator()+0xc>)
20000126:	6853      	ldr	r3, [r2, #4]
20000128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000012c:	6053      	str	r3, [r2, #4]
2000012e:	4770      	bx	lr
20000130:	20002480 	.word	0x20002480

20000134 <clr_singl_bits_method()>:
20000134:	4a02      	ldr	r2, [pc, #8]	; (20000140 <clr_singl_bits_method()+0xc>)
20000136:	6853      	ldr	r3, [r2, #4]
20000138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
2000013c:	6053      	str	r3, [r2, #4]
2000013e:	4770      	bx	lr
20000140:	20002480 	.word	0x20002480

20000144 <set_singl_mskd_operator()>:
20000144:	4a02      	ldr	r2, [pc, #8]	; (20000150 <set_singl_mskd_operator()+0xc>)
20000146:	6853      	ldr	r3, [r2, #4]
20000148:	f043 0302 	orr.w	r3, r3, #2
2000014c:	6053      	str	r3, [r2, #4]
2000014e:	4770      	bx	lr
20000150:	20002480 	.word	0x20002480

20000154 <set_singl_mskd_method()>:
20000154:	4a02      	ldr	r2, [pc, #8]	; (20000160 <set_singl_mskd_method()+0xc>)
20000156:	6853      	ldr	r3, [r2, #4]
20000158:	f043 0302 	orr.w	r3, r3, #2
2000015c:	6053      	str	r3, [r2, #4]
2000015e:	4770      	bx	lr
20000160:	20002480 	.word	0x20002480

20000164 <clr_singl_mskd_operator()>:
20000164:	4a02      	ldr	r2, [pc, #8]	; (20000170 <clr_singl_mskd_operator()+0xc>)
20000166:	6853      	ldr	r3, [r2, #4]
20000168:	f023 0302 	bic.w	r3, r3, #2
2000016c:	6053      	str	r3, [r2, #4]
2000016e:	4770      	bx	lr
20000170:	20002480 	.word	0x20002480

20000174 <clr_singl_mskd_method()>:
20000174:	4a02      	ldr	r2, [pc, #8]	; (20000180 <clr_singl_mskd_method()+0xc>)
20000176:	6853      	ldr	r3, [r2, #4]
20000178:	f023 0302 	bic.w	r3, r3, #2
2000017c:	6053      	str	r3, [r2, #4]
2000017e:	4770      	bx	lr
20000180:	20002480 	.word	0x20002480

20000184 <equ_singl_bits_operator()>:
20000184:	4b01      	ldr	r3, [pc, #4]	; (2000018c <equ_singl_bits_operator()+0x8>)
20000186:	2240      	movs	r2, #64	; 0x40
20000188:	605a      	str	r2, [r3, #4]
2000018a:	4770      	bx	lr
2000018c:	20002480 	.word	0x20002480

20000190 <equ_singl_bits_method()>:
20000190:	4b01      	ldr	r3, [pc, #4]	; (20000198 <equ_singl_bits_method()+0x8>)
20000192:	2240      	movs	r2, #64	; 0x40
20000194:	605a      	str	r2, [r3, #4]
20000196:	4770      	bx	lr
20000198:	20002480 	.word	0x20002480

2000019c <equ_singl_mskd_operator()>:
2000019c:	4b01      	ldr	r3, [pc, #4]	; (200001a4 <equ_singl_mskd_operator()+0x8>)
2000019e:	2202      	movs	r2, #2
200001a0:	605a      	str	r2, [r3, #4]
200001a2:	4770      	bx	lr
200001a4:	20002480 	.word	0x20002480

200001a8 <equ_singl_mskd_method()>:
200001a8:	4b01      	ldr	r3, [pc, #4]	; (200001b0 <equ_singl_mskd_method()+0x8>)
200001aa:	2202      	movs	r2, #2
200001ac:	605a      	str	r2, [r3, #4]
200001ae:	4770      	bx	lr
200001b0:	20002480 	.word	0x20002480

200001b4 <flp_singl_bits_operator()>:
200001b4:	4a02      	ldr	r2, [pc, #8]	; (200001c0 <flp_singl_bits_operator()+0xc>)
200001b6:	6853      	ldr	r3, [r2, #4]
200001b8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001bc:	6053      	str	r3, [r2, #4]
200001be:	4770      	bx	lr
200001c0:	20002480 	.word	0x20002480

200001c4 <flp_singl_bits_method()>:
200001c4:	4a02      	ldr	r2, [pc, #8]	; (200001d0 <flp_singl_bits_method()+0xc>)
200001c6:	6853      	ldr	r3, [r2, #4]
200001c8:	f083 0340 	eor.w	r3, r3, #64	; 0x40
200001cc:	6053      	str	r3, [r2, #4]
200001ce:	4770      	bx	lr
200001d0:	20002480 	.word	0x20002480

200001d4 <flp_singl_mskd_operator()>:
200001d4:	4a02      	ldr	r2, [pc, #8]	; (200001e0 <flp_singl_mskd_operator()+0xc>)
200001d6:	6853      	ldr	r3, [r2, #4]
200001d8:	f083 0302 	eor.w	r3, r3, #2
200001dc:	6053      	str	r3, [r2, #4]
200001de:	4770      	bx	lr
200001e0:	20002480 	.word	0x20002480

200001e4 <flp_singl_mskd_method()>:
200001e4:	4a02      	ldr	r2, [pc, #8]	; (200001f0 <flp_singl_mskd_method()+0xc>)
200001e6:	6853      	ldr	r3, [r2, #4]
200001e8:	f083 0302 	eor.w	r3, r3, #2
200001ec:	6053      	str	r3, [r2, #4]
200001ee:	4770      	bx	lr
200001f0:	20002480 	.word	0x20002480

200001f4 <ins_singl_mskd_operator()>:
200001f4:	4a03      	ldr	r2, [pc, #12]	; (20000204 <ins_singl_mskd_operator()+0x10>)
200001f6:	6853      	ldr	r3, [r2, #4]
200001f8:	f023 0306 	bic.w	r3, r3, #6
200001fc:	f043 0304 	orr.w	r3, r3, #4
20000200:	6053      	str	r3, [r2, #4]
20000202:	4770      	bx	lr
20000204:	20002480 	.word	0x20002480

20000208 <ins_singl_mskd_method()>:
20000208:	4a03      	ldr	r2, [pc, #12]	; (20000218 <ins_singl_mskd_method()+0x10>)
2000020a:	6853      	ldr	r3, [r2, #4]
2000020c:	f023 0306 	bic.w	r3, r3, #6
20000210:	f043 0304 	orr.w	r3, r3, #4
20000214:	6053      	str	r3, [r2, #4]
20000216:	4770      	bx	lr
20000218:	20002480 	.word	0x20002480

2000021c <set_multi_bits_operator()>:
2000021c:	4a02      	ldr	r2, [pc, #8]	; (20000228 <set_multi_bits_operator()+0xc>)
2000021e:	6853      	ldr	r3, [r2, #4]
20000220:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000224:	6053      	str	r3, [r2, #4]
20000226:	4770      	bx	lr
20000228:	20002480 	.word	0x20002480

2000022c <set_multi_bits_method()>:
2000022c:	4a02      	ldr	r2, [pc, #8]	; (20000238 <set_multi_bits_method()+0xc>)
2000022e:	6853      	ldr	r3, [r2, #4]
20000230:	f043 0321 	orr.w	r3, r3, #33	; 0x21
20000234:	6053      	str	r3, [r2, #4]
20000236:	4770      	bx	lr
20000238:	20002480 	.word	0x20002480

2000023c <ins_multi_mskd_operator()>:
2000023c:	4a04      	ldr	r2, [pc, #16]	; (20000250 <ins_multi_mskd_operator()+0x14>)
2000023e:	6853      	ldr	r3, [r2, #4]
20000240:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
20000244:	f023 0306 	bic.w	r3, r3, #6
20000248:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
2000024c:	6053      	str	r3, [r2, #4]
2000024e:	4770      	bx	lr
20000250:	20002480 	.word	0x20002480

20000254 <ins_multi_mskd_method()>:
20000254:	4a04      	ldr	r2, [pc, #16]	; (20000268 <ins_multi_mskd_method()+0x14>)
20000256:	6853      	ldr	r3, [r2, #4]
20000258:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
2000025c:	f023 0306 	bic.w	r3, r3, #6
20000260:	f443 73c1 	orr.w	r3, r3, #386	; 0x182
20000264:	6053      	str	r3, [r2, #4]
20000266:	4770      	bx	lr
20000268:	20002480 	.word	0x20002480

2000026c <equ_multi_bits_operator()>:
2000026c:	4b01      	ldr	r3, [pc, #4]	; (20000274 <equ_multi_bits_operator()+0x8>)
2000026e:	2260      	movs	r2, #96	; 0x60
20000270:	605a      	str	r2, [r3, #4]
20000272:	4770      	bx	lr
20000274:	20002480 	.word	0x20002480

20000278 <equ_multi_bits_method()>:
20000278:	4b01      	ldr	r3, [pc, #4]	; (20000280 <equ_multi_bits_method()+0x8>)
2000027a:	2260      	movs	r2, #96	; 0x60
2000027c:	605a      	str	r2, [r3, #4]
2000027e:	4770      	bx	lr
20000280:	20002480 	.word	0x20002480

20000284 <equ_multi_mskd_operator()>:
20000284:	4b02      	ldr	r3, [pc, #8]	; (20000290 <equ_multi_mskd_operator()+0xc>)
20000286:	f44f 7242 	mov.w	r2, #776	; 0x308
2000028a:	605a      	str	r2, [r3, #4]
2000028c:	4770      	bx	lr
2000028e:	bf00      	nop
20000290:	20002480 	.word	0x20002480

20000294 <equ_multi_mskd_method()>:
20000294:	4b02      	ldr	r3, [pc, #8]	; (200002a0 <equ_multi_mskd_method()+0xc>)
20000296:	f44f 7242 	mov.w	r2, #776	; 0x308
2000029a:	605a      	str	r2, [r3, #4]
2000029c:	4770      	bx	lr
2000029e:	bf00      	nop
200002a0:	20002480 	.word	0x20002480

200002a4 <equ_bits_mskd_operator()>:
200002a4:	4b01      	ldr	r3, [pc, #4]	; (200002ac <equ_bits_mskd_operator()+0x8>)
200002a6:	2222      	movs	r2, #34	; 0x22
200002a8:	605a      	str	r2, [r3, #4]
200002aa:	4770      	bx	lr
200002ac:	20002480 	.word	0x20002480

200002b0 <equ_bits_mskd_method()>:
200002b0:	4b01      	ldr	r3, [pc, #4]	; (200002b8 <equ_bits_mskd_method()+0x8>)
200002b2:	2222      	movs	r2, #34	; 0x22
200002b4:	605a      	str	r2, [r3, #4]
200002b6:	4770      	bx	lr
200002b8:	20002480 	.word	0x20002480

200002bc <equ_mskd_bits_operator()>:
200002bc:	4b01      	ldr	r3, [pc, #4]	; (200002c4 <equ_mskd_bits_operator()+0x8>)
200002be:	2244      	movs	r2, #68	; 0x44
200002c0:	605a      	str	r2, [r3, #4]
200002c2:	4770      	bx	lr
200002c4:	20002480 	.word	0x20002480

200002c8 <equ_mskd_bits_method()>:
200002c8:	4b01      	ldr	r3, [pc, #4]	; (200002d0 <equ_mskd_bits_method()+0x8>)
200002ca:	2244      	movs	r2, #68	; 0x44
200002cc:	605a      	str	r2, [r3, #4]
200002ce:	4770      	bx	lr
200002d0:	20002480 	.word	0x20002480

200002d4 <equ_bits_var()>:
200002d4:	4b02      	ldr	r3, [pc, #8]	; (200002e0 <equ_bits_var()+0xc>)
200002d6:	2240      	movs	r2, #64	; 0x40
200002d8:	605a      	str	r2, [r3, #4]
200002da:	2201      	movs	r2, #1
200002dc:	605a      	str	r2, [r3, #4]
200002de:	4770      	bx	lr
200002e0:	20002480 	.word	0x20002480

200002e4 <equ_mskd_var()>:
200002e4:	4b03      	ldr	r3, [pc, #12]	; (200002f4 <equ_mskd_var()+0x10>)
200002e6:	2202      	movs	r2, #2
200002e8:	605a      	str	r2, [r3, #4]
200002ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
200002ee:	605a      	str	r2, [r3, #4]
200002f0:	4770      	bx	lr
200002f2:	bf00      	nop
200002f4:	20002480 	.word	0x20002480

200002f8 <cmp_equ_zero()>:
200002f8:	4b07      	ldr	r3, [pc, #28]	; (20000318 <cmp_equ_zero()+0x20>)
200002fa:	2200      	movs	r2, #0
200002fc:	605a      	str	r2, [r3, #4]
200002fe:	685b      	ldr	r3, [r3, #4]
20000300:	b923      	cbnz	r3, 2000030c <cmp_equ_zero()+0x14>
20000302:	4b06      	ldr	r3, [pc, #24]	; (2000031c <cmp_equ_zero()+0x24>)
20000304:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
20000308:	605a      	str	r2, [r3, #4]
2000030a:	4770      	bx	lr
2000030c:	4b03      	ldr	r3, [pc, #12]	; (2000031c <cmp_equ_zero()+0x24>)
2000030e:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000312:	605a      	str	r2, [r3, #4]
20000314:	4770      	bx	lr
20000316:	bf00      	nop
20000318:	20002480 	.word	0x20002480
2000031c:	200023e0 	.word	0x200023e0

20000320 <cmp_neq_zero()>:
20000320:	4b06      	ldr	r3, [pc, #24]	; (2000033c <cmp_neq_zero()+0x1c>)
20000322:	2200      	movs	r2, #0
20000324:	605a      	str	r2, [r3, #4]
20000326:	685b      	ldr	r3, [r3, #4]
20000328:	b11b      	cbz	r3, 20000332 <cmp_neq_zero()+0x12>
2000032a:	4b04      	ldr	r3, [pc, #16]	; (2000033c <cmp_neq_zero()+0x1c>)
2000032c:	2204      	movs	r2, #4
2000032e:	605a      	str	r2, [r3, #4]
20000330:	4770      	bx	lr
20000332:	4b02      	ldr	r3, [pc, #8]	; (2000033c <cmp_neq_zero()+0x1c>)
20000334:	2220      	movs	r2, #32
20000336:	605a      	str	r2, [r3, #4]
20000338:	4770      	bx	lr
2000033a:	bf00      	nop
2000033c:	20002480 	.word	0x20002480

20000340 <cmp_equ_bits()>:
20000340:	4b06      	ldr	r3, [pc, #24]	; (2000035c <cmp_equ_bits()+0x1c>)
20000342:	2240      	movs	r2, #64	; 0x40
20000344:	605a      	str	r2, [r3, #4]
20000346:	685b      	ldr	r3, [r3, #4]
20000348:	f013 0f40 	tst.w	r3, #64	; 0x40
2000034c:	4b04      	ldr	r3, [pc, #16]	; (20000360 <cmp_equ_bits()+0x20>)
2000034e:	bf14      	ite	ne
20000350:	f04f 52b0 	movne.w	r2, #369098752	; 0x16000000
20000354:	f04f 52d0 	moveq.w	r2, #436207616	; 0x1a000000
20000358:	605a      	str	r2, [r3, #4]
2000035a:	4770      	bx	lr
2000035c:	20002480 	.word	0x20002480
20000360:	200023e0 	.word	0x200023e0

20000364 <cmp_neq_bits()>:
20000364:	4b05      	ldr	r3, [pc, #20]	; (2000037c <cmp_neq_bits()+0x18>)
20000366:	2240      	movs	r2, #64	; 0x40
20000368:	605a      	str	r2, [r3, #4]
2000036a:	685b      	ldr	r3, [r3, #4]
2000036c:	f013 0f40 	tst.w	r3, #64	; 0x40
20000370:	4b02      	ldr	r3, [pc, #8]	; (2000037c <cmp_neq_bits()+0x18>)
20000372:	bf0c      	ite	eq
20000374:	2202      	moveq	r2, #2
20000376:	2220      	movne	r2, #32
20000378:	605a      	str	r2, [r3, #4]
2000037a:	4770      	bx	lr
2000037c:	20002480 	.word	0x20002480

20000380 <cmp_equ_multi_bits()>:
20000380:	4b06      	ldr	r3, [pc, #24]	; (2000039c <cmp_equ_multi_bits()+0x1c>)
20000382:	2260      	movs	r2, #96	; 0x60
20000384:	605a      	str	r2, [r3, #4]
20000386:	685b      	ldr	r3, [r3, #4]
20000388:	4013      	ands	r3, r2
2000038a:	4293      	cmp	r3, r2
2000038c:	4b04      	ldr	r3, [pc, #16]	; (200003a0 <cmp_equ_multi_bits()+0x20>)
2000038e:	bf0c      	ite	eq
20000390:	f04f 5208 	moveq.w	r2, #570425344	; 0x22000000
20000394:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
20000398:	605a      	str	r2, [r3, #4]
2000039a:	4770      	bx	lr
2000039c:	20002480 	.word	0x20002480
200003a0:	200023e0 	.word	0x200023e0

200003a4 <cmp_neq_multi_bits()>:
200003a4:	4b06      	ldr	r3, [pc, #24]	; (200003c0 <cmp_neq_multi_bits()+0x1c>)
200003a6:	2260      	movs	r2, #96	; 0x60
200003a8:	605a      	str	r2, [r3, #4]
200003aa:	685b      	ldr	r3, [r3, #4]
200003ac:	4013      	ands	r3, r2
200003ae:	4293      	cmp	r3, r2
200003b0:	4b04      	ldr	r3, [pc, #16]	; (200003c4 <cmp_neq_multi_bits()+0x20>)
200003b2:	bf14      	ite	ne
200003b4:	f04f 5268 	movne.w	r2, #973078528	; 0x3a000000
200003b8:	f04f 5278 	moveq.w	r2, #1040187392	; 0x3e000000
200003bc:	605a      	str	r2, [r3, #4]
200003be:	4770      	bx	lr
200003c0:	20002480 	.word	0x20002480
200003c4:	200023e0 	.word	0x200023e0

200003c8 <cmp_equ_mskd()>:
200003c8:	4b09      	ldr	r3, [pc, #36]	; (200003f0 <cmp_equ_mskd()+0x28>)
200003ca:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003ce:	605a      	str	r2, [r3, #4]
200003d0:	685b      	ldr	r3, [r3, #4]
200003d2:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
200003d6:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
200003da:	4a06      	ldr	r2, [pc, #24]	; (200003f4 <cmp_equ_mskd()+0x2c>)
200003dc:	6853      	ldr	r3, [r2, #4]
200003de:	f023 5378 	bic.w	r3, r3, #1040187392	; 0x3e000000
200003e2:	bf0c      	ite	eq
200003e4:	f043 6360 	orreq.w	r3, r3, #234881024	; 0xe000000
200003e8:	f043 5308 	orrne.w	r3, r3, #570425344	; 0x22000000
200003ec:	6053      	str	r3, [r2, #4]
200003ee:	4770      	bx	lr
200003f0:	20002480 	.word	0x20002480
200003f4:	200023e0 	.word	0x200023e0

200003f8 <cmp_neq_mskd()>:
200003f8:	4b09      	ldr	r3, [pc, #36]	; (20000420 <cmp_neq_mskd()+0x28>)
200003fa:	f44f 32e8 	mov.w	r2, #118784	; 0x1d000
200003fe:	605a      	str	r2, [r3, #4]
20000400:	685b      	ldr	r3, [r3, #4]
20000402:	f403 33f8 	and.w	r3, r3, #126976	; 0x1f000
20000406:	f5b3 3f88 	cmp.w	r3, #69632	; 0x11000
2000040a:	4a05      	ldr	r2, [pc, #20]	; (20000420 <cmp_neq_mskd()+0x28>)
2000040c:	6853      	ldr	r3, [r2, #4]
2000040e:	bf1a      	itte	ne
20000410:	f023 0306 	bicne.w	r3, r3, #6
20000414:	f043 0304 	orrne.w	r3, r3, #4
20000418:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
2000041c:	6053      	str	r3, [r2, #4]
2000041e:	4770      	bx	lr
20000420:	20002480 	.word	0x20002480

20000424 <cmp_equ_reg()>:
20000424:	4b06      	ldr	r3, [pc, #24]	; (20000440 <cmp_equ_reg()+0x1c>)
20000426:	2222      	movs	r2, #34	; 0x22
20000428:	605a      	str	r2, [r3, #4]
2000042a:	685b      	ldr	r3, [r3, #4]
2000042c:	4293      	cmp	r3, r2
2000042e:	4b05      	ldr	r3, [pc, #20]	; (20000444 <cmp_equ_reg()+0x20>)
20000430:	bf0c      	ite	eq
20000432:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
20000436:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
2000043a:	605a      	str	r2, [r3, #4]
2000043c:	4770      	bx	lr
2000043e:	bf00      	nop
20000440:	20002480 	.word	0x20002480
20000444:	200023e0 	.word	0x200023e0

20000448 <cmp_neq_reg()>:
20000448:	4b05      	ldr	r3, [pc, #20]	; (20000460 <cmp_neq_reg()+0x18>)
2000044a:	2222      	movs	r2, #34	; 0x22
2000044c:	605a      	str	r2, [r3, #4]
2000044e:	685b      	ldr	r3, [r3, #4]
20000450:	4293      	cmp	r3, r2
20000452:	4b03      	ldr	r3, [pc, #12]	; (20000460 <cmp_neq_reg()+0x18>)
20000454:	bf14      	ite	ne
20000456:	2202      	movne	r2, #2
20000458:	2220      	moveq	r2, #32
2000045a:	605a      	str	r2, [r3, #4]
2000045c:	4770      	bx	lr
2000045e:	bf00      	nop
20000460:	20002480 	.word	0x20002480

20000464 <constexpr_bits_array()>:
20000464:	4b03      	ldr	r3, [pc, #12]	; (20000474 <constexpr_bits_array()+0x10>)
20000466:	2206      	movs	r2, #6
20000468:	62da      	str	r2, [r3, #44]	; 0x2c
2000046a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000046e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
20000472:	4770      	bx	lr
20000474:	200022c0 	.word	0x200022c0

20000478 <runtime_bits_array()>:
20000478:	b081      	sub	sp, #4
2000047a:	2303      	movs	r3, #3
2000047c:	9300      	str	r3, [sp, #0]
2000047e:	9b00      	ldr	r3, [sp, #0]
20000480:	009b      	lsls	r3, r3, #2
20000482:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
20000486:	f503 530b 	add.w	r3, r3, #8896	; 0x22c0
2000048a:	2221      	movs	r2, #33	; 0x21
2000048c:	621a      	str	r2, [r3, #32]
2000048e:	b001      	add	sp, #4
20000490:	4770      	bx	lr

20000492 <prescaler_low()>:
20000492:	4b04      	ldr	r3, [pc, #16]	; (200004a4 <prescaler_low()+0x12>)
20000494:	2277      	movs	r2, #119	; 0x77
20000496:	605a      	str	r2, [r3, #4]
20000498:	685b      	ldr	r3, [r3, #4]
2000049a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2000049e:	4a02      	ldr	r2, [pc, #8]	; (200004a8 <prescaler_low()+0x16>)
200004a0:	62d3      	str	r3, [r2, #44]	; 0x2c
200004a2:	4770      	bx	lr
200004a4:	200023e0 	.word	0x200023e0
200004a8:	200022c0 	.word	0x200022c0

200004ac <prescaler_high()>:
200004ac:	4b04      	ldr	r3, [pc, #16]	; (200004c0 <prescaler_high()+0x14>)
200004ae:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
200004b2:	605a      	str	r2, [r3, #4]
200004b4:	685b      	ldr	r3, [r3, #4]
200004b6:	f3c3 6344 	ubfx	r3, r3, #25, #5
200004ba:	4a02      	ldr	r2, [pc, #8]	; (200004c4 <prescaler_high()+0x18>)
200004bc:	62d3      	str	r3, [r2, #44]	; 0x2c
200004be:	4770      	bx	lr
200004c0:	200023e0 	.word	0x200023e0
200004c4:	200022c0 	.word	0x200022c0

200004c8 <reg_mskd_lss()>:
200004c8:	4b07      	ldr	r3, [pc, #28]	; (200004e8 <reg_mskd_lss()+0x20>)
200004ca:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
200004ce:	605a      	str	r2, [r3, #4]
200004d0:	685b      	ldr	r3, [r3, #4]
200004d2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004d6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
200004da:	4b04      	ldr	r3, [pc, #16]	; (200004ec <reg_mskd_lss()+0x24>)
200004dc:	bf34      	ite	cc
200004de:	2202      	movcc	r2, #2
200004e0:	2204      	movcs	r2, #4
200004e2:	605a      	str	r2, [r3, #4]
200004e4:	4770      	bx	lr
200004e6:	bf00      	nop
200004e8:	200023e0 	.word	0x200023e0
200004ec:	20002480 	.word	0x20002480

200004f0 <reg_mskd_leq()>:
200004f0:	4b0b      	ldr	r3, [pc, #44]	; (20000520 <reg_mskd_leq()+0x30>)
200004f2:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
200004f6:	605a      	str	r2, [r3, #4]
200004f8:	685b      	ldr	r3, [r3, #4]
200004fa:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200004fe:	4293      	cmp	r3, r2
20000500:	d80a      	bhi.n	20000518 <reg_mskd_leq()+0x28>
20000502:	4b07      	ldr	r3, [pc, #28]	; (20000520 <reg_mskd_leq()+0x30>)
20000504:	685b      	ldr	r3, [r3, #4]
20000506:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000050a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2000050e:	d803      	bhi.n	20000518 <reg_mskd_leq()+0x28>
20000510:	4b04      	ldr	r3, [pc, #16]	; (20000524 <reg_mskd_leq()+0x34>)
20000512:	2202      	movs	r2, #2
20000514:	605a      	str	r2, [r3, #4]
20000516:	4770      	bx	lr
20000518:	4b02      	ldr	r3, [pc, #8]	; (20000524 <reg_mskd_leq()+0x34>)
2000051a:	2204      	movs	r2, #4
2000051c:	605a      	str	r2, [r3, #4]
2000051e:	4770      	bx	lr
20000520:	200023e0 	.word	0x200023e0
20000524:	20002480 	.word	0x20002480

20000528 <reg_mskd_gtr()>:
20000528:	4b07      	ldr	r3, [pc, #28]	; (20000548 <reg_mskd_gtr()+0x20>)
2000052a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
2000052e:	605a      	str	r2, [r3, #4]
20000530:	685b      	ldr	r3, [r3, #4]
20000532:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000536:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
2000053a:	4b04      	ldr	r3, [pc, #16]	; (2000054c <reg_mskd_gtr()+0x24>)
2000053c:	bf8c      	ite	hi
2000053e:	2202      	movhi	r2, #2
20000540:	2204      	movls	r2, #4
20000542:	605a      	str	r2, [r3, #4]
20000544:	4770      	bx	lr
20000546:	bf00      	nop
20000548:	200023e0 	.word	0x200023e0
2000054c:	20002480 	.word	0x20002480

20000550 <reg_mskd_geq()>:
20000550:	4b0b      	ldr	r3, [pc, #44]	; (20000580 <reg_mskd_geq()+0x30>)
20000552:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000556:	605a      	str	r2, [r3, #4]
20000558:	685b      	ldr	r3, [r3, #4]
2000055a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000055e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
20000562:	d309      	bcc.n	20000578 <reg_mskd_geq()+0x28>
20000564:	4b06      	ldr	r3, [pc, #24]	; (20000580 <reg_mskd_geq()+0x30>)
20000566:	685b      	ldr	r3, [r3, #4]
20000568:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000056c:	4293      	cmp	r3, r2
2000056e:	d303      	bcc.n	20000578 <reg_mskd_geq()+0x28>
20000570:	4b04      	ldr	r3, [pc, #16]	; (20000584 <reg_mskd_geq()+0x34>)
20000572:	2202      	movs	r2, #2
20000574:	605a      	str	r2, [r3, #4]
20000576:	4770      	bx	lr
20000578:	4b02      	ldr	r3, [pc, #8]	; (20000584 <reg_mskd_geq()+0x34>)
2000057a:	2204      	movs	r2, #4
2000057c:	605a      	str	r2, [r3, #4]
2000057e:	4770      	bx	lr
20000580:	200023e0 	.word	0x200023e0
20000584:	20002480 	.word	0x20002480

20000588 <pos_cmp_eq()>:
20000588:	4b01      	ldr	r3, [pc, #4]	; (20000590 <pos_cmp_eq()+0x8>)
2000058a:	2202      	movs	r2, #2
2000058c:	605a      	str	r2, [r3, #4]
2000058e:	4770      	bx	lr
20000590:	20002480 	.word	0x20002480

20000594 <pos_cmp_ne()>:
20000594:	4b01      	ldr	r3, [pc, #4]	; (2000059c <pos_cmp_ne()+0x8>)
20000596:	2202      	movs	r2, #2
20000598:	605a      	str	r2, [r3, #4]
2000059a:	4770      	bx	lr
2000059c:	20002480 	.word	0x20002480

200005a0 <bits_extract_eq()>:
200005a0:	4b05      	ldr	r3, [pc, #20]	; (200005b8 <bits_extract_eq()+0x18>)
200005a2:	2240      	movs	r2, #64	; 0x40
200005a4:	605a      	str	r2, [r3, #4]
200005a6:	685b      	ldr	r3, [r3, #4]
200005a8:	4293      	cmp	r3, r2
200005aa:	4b03      	ldr	r3, [pc, #12]	; (200005b8 <bits_extract_eq()+0x18>)
200005ac:	bf0c      	ite	eq
200005ae:	2202      	moveq	r2, #2
200005b0:	2204      	movne	r2, #4
200005b2:	605a      	str	r2, [r3, #4]
200005b4:	4770      	bx	lr
200005b6:	bf00      	nop
200005b8:	20002480 	.word	0x20002480

200005bc <mskd_extract_eq()>:
200005bc:	4b05      	ldr	r3, [pc, #20]	; (200005d4 <mskd_extract_eq()+0x18>)
200005be:	2202      	movs	r2, #2
200005c0:	605a      	str	r2, [r3, #4]
200005c2:	685b      	ldr	r3, [r3, #4]
200005c4:	4293      	cmp	r3, r2
200005c6:	4b03      	ldr	r3, [pc, #12]	; (200005d4 <mskd_extract_eq()+0x18>)
200005c8:	bf0c      	ite	eq
200005ca:	2220      	moveq	r2, #32
200005cc:	2240      	movne	r2, #64	; 0x40
200005ce:	605a      	str	r2, [r3, #4]
200005d0:	4770      	bx	lr
200005d2:	bf00      	nop
200005d4:	20002480 	.word	0x20002480

200005d8 <mskd_extract_ne()>:
200005d8:	4b05      	ldr	r3, [pc, #20]	; (200005f0 <mskd_extract_ne()+0x18>)
200005da:	2204      	movs	r2, #4
200005dc:	605a      	str	r2, [r3, #4]
200005de:	685b      	ldr	r3, [r3, #4]
200005e0:	4293      	cmp	r3, r2
200005e2:	4b03      	ldr	r3, [pc, #12]	; (200005f0 <mskd_extract_ne()+0x18>)
200005e4:	bf0c      	ite	eq
200005e6:	2240      	moveq	r2, #64	; 0x40
200005e8:	2220      	movne	r2, #32
200005ea:	605a      	str	r2, [r3, #4]
200005ec:	4770      	bx	lr
200005ee:	bf00      	nop
200005f0:	20002480 	.word	0x20002480

200005f4 <mskd_extract_lss()>:
200005f4:	4b06      	ldr	r3, [pc, #24]	; (20000610 <mskd_extract_lss()+0x1c>)
200005f6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200005fa:	605a      	str	r2, [r3, #4]
200005fc:	685b      	ldr	r3, [r3, #4]
200005fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
20000602:	4b04      	ldr	r3, [pc, #16]	; (20000614 <mskd_extract_lss()+0x20>)
20000604:	bf34      	ite	cc
20000606:	2220      	movcc	r2, #32
20000608:	2240      	movcs	r2, #64	; 0x40
2000060a:	605a      	str	r2, [r3, #4]
2000060c:	4770      	bx	lr
2000060e:	bf00      	nop
20000610:	200023e0 	.word	0x200023e0
20000614:	20002480 	.word	0x20002480

20000618 <mskd_extract_leq()>:
20000618:	4b05      	ldr	r3, [pc, #20]	; (20000630 <mskd_extract_leq()+0x18>)
2000061a:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
2000061e:	605a      	str	r2, [r3, #4]
20000620:	685b      	ldr	r3, [r3, #4]
20000622:	4293      	cmp	r3, r2
20000624:	4b03      	ldr	r3, [pc, #12]	; (20000634 <mskd_extract_leq()+0x1c>)
20000626:	bf94      	ite	ls
20000628:	2220      	movls	r2, #32
2000062a:	2240      	movhi	r2, #64	; 0x40
2000062c:	605a      	str	r2, [r3, #4]
2000062e:	4770      	bx	lr
20000630:	200023e0 	.word	0x200023e0
20000634:	20002480 	.word	0x20002480

20000638 <mskd_extract_gtr()>:
20000638:	4b06      	ldr	r3, [pc, #24]	; (20000654 <mskd_extract_gtr()+0x1c>)
2000063a:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
2000063e:	605a      	str	r2, [r3, #4]
20000640:	685b      	ldr	r3, [r3, #4]
20000642:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000646:	4b04      	ldr	r3, [pc, #16]	; (20000658 <mskd_extract_gtr()+0x20>)
20000648:	bf8c      	ite	hi
2000064a:	2220      	movhi	r2, #32
2000064c:	2240      	movls	r2, #64	; 0x40
2000064e:	605a      	str	r2, [r3, #4]
20000650:	4770      	bx	lr
20000652:	bf00      	nop
20000654:	200023e0 	.word	0x200023e0
20000658:	20002480 	.word	0x20002480

2000065c <set_bits_global()>:
2000065c:	4a02      	ldr	r2, [pc, #8]	; (20000668 <set_bits_global()+0xc>)
2000065e:	6853      	ldr	r3, [r2, #4]
20000660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000664:	6053      	str	r3, [r2, #4]
20000666:	4770      	bx	lr
20000668:	20002480 	.word	0x20002480

2000066c <ins_mskd_global()>:
2000066c:	4a03      	ldr	r2, [pc, #12]	; (2000067c <ins_mskd_global()+0x10>)
2000066e:	6853      	ldr	r3, [r2, #4]
20000670:	f023 0306 	bic.w	r3, r3, #6
20000674:	f043 0302 	orr.w	r3, r3, #2
20000678:	6053      	str	r3, [r2, #4]
2000067a:	4770      	bx	lr
2000067c:	20002480 	.word	0x20002480

20000680 <assign_array_global()>:
20000680:	4b01      	ldr	r3, [pc, #4]	; (20000688 <assign_array_global()+0x8>)
20000682:	22bd      	movs	r2, #189	; 0xbd
20000684:	601a      	str	r2, [r3, #0]
20000686:	4770      	bx	lr
20000688:	200022ec 	.word	0x200022ec

2000068c <shifted_global()>:
2000068c:	4b04      	ldr	r3, [pc, #16]	; (200006a0 <shifted_global()+0x14>)
2000068e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000692:	605a      	str	r2, [r3, #4]
20000694:	685b      	ldr	r3, [r3, #4]
20000696:	f3c3 6344 	ubfx	r3, r3, #25, #5
2000069a:	4a02      	ldr	r2, [pc, #8]	; (200006a4 <shifted_global()+0x18>)
2000069c:	62d3      	str	r3, [r2, #44]	; 0x2c
2000069e:	4770      	bx	lr
200006a0:	200023e0 	.word	0x200023e0
200006a4:	200022c0 	.word	0x200022c0

200006a8 <assign_register_global()>:
200006a8:	4b01      	ldr	r3, [pc, #4]	; (200006b0 <assign_register_global()+0x8>)
200006aa:	2204      	movs	r2, #4
200006ac:	605a      	str	r2, [r3, #4]
200006ae:	4770      	bx	lr
200006b0:	20002480 	.word	0x20002480

200006b4 <copy_bits_equ()>:
200006b4:	4b05      	ldr	r3, [pc, #20]	; (200006cc <copy_bits_equ()+0x18>)
200006b6:	2240      	movs	r2, #64	; 0x40
200006b8:	605a      	str	r2, [r3, #4]
200006ba:	685b      	ldr	r3, [r3, #4]
200006bc:	f013 0f40 	tst.w	r3, #64	; 0x40
200006c0:	4b02      	ldr	r3, [pc, #8]	; (200006cc <copy_bits_equ()+0x18>)
200006c2:	bf14      	ite	ne
200006c4:	2202      	movne	r2, #2
200006c6:	2204      	moveq	r2, #4
200006c8:	605a      	str	r2, [r3, #4]
200006ca:	4770      	bx	lr
200006cc:	20002480 	.word	0x20002480

200006d0 <copy_bits_neq()>:
200006d0:	4b05      	ldr	r3, [pc, #20]	; (200006e8 <copy_bits_neq()+0x18>)
200006d2:	2240      	movs	r2, #64	; 0x40
200006d4:	605a      	str	r2, [r3, #4]
200006d6:	685b      	ldr	r3, [r3, #4]
200006d8:	f013 0f40 	tst.w	r3, #64	; 0x40
200006dc:	4b02      	ldr	r3, [pc, #8]	; (200006e8 <copy_bits_neq()+0x18>)
200006de:	bf0c      	ite	eq
200006e0:	2202      	moveq	r2, #2
200006e2:	2204      	movne	r2, #4
200006e4:	605a      	str	r2, [r3, #4]
200006e6:	4770      	bx	lr
200006e8:	20002480 	.word	0x20002480

200006ec <copy_mskd_equ()>:
200006ec:	4b06      	ldr	r3, [pc, #24]	; (20000708 <copy_mskd_equ()+0x1c>)
200006ee:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200006f2:	605a      	str	r2, [r3, #4]
200006f4:	685b      	ldr	r3, [r3, #4]
200006f6:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200006fa:	4293      	cmp	r3, r2
200006fc:	4b03      	ldr	r3, [pc, #12]	; (2000070c <copy_mskd_equ()+0x20>)
200006fe:	bf0c      	ite	eq
20000700:	2202      	moveq	r2, #2
20000702:	2204      	movne	r2, #4
20000704:	605a      	str	r2, [r3, #4]
20000706:	4770      	bx	lr
20000708:	200023e0 	.word	0x200023e0
2000070c:	20002480 	.word	0x20002480

20000710 <copy_mskd_neq()>:
20000710:	4b06      	ldr	r3, [pc, #24]	; (2000072c <copy_mskd_neq()+0x1c>)
20000712:	f04f 52d0 	mov.w	r2, #436207616	; 0x1a000000
20000716:	605a      	str	r2, [r3, #4]
20000718:	685b      	ldr	r3, [r3, #4]
2000071a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000071e:	4293      	cmp	r3, r2
20000720:	4b03      	ldr	r3, [pc, #12]	; (20000730 <copy_mskd_neq()+0x20>)
20000722:	bf14      	ite	ne
20000724:	2202      	movne	r2, #2
20000726:	2204      	moveq	r2, #4
20000728:	605a      	str	r2, [r3, #4]
2000072a:	4770      	bx	lr
2000072c:	200023e0 	.word	0x200023e0
20000730:	20002480 	.word	0x20002480

20000734 <copy_mskd_lss()>:
20000734:	4b07      	ldr	r3, [pc, #28]	; (20000754 <copy_mskd_lss()+0x20>)
20000736:	f04f 5258 	mov.w	r2, #905969664	; 0x36000000
2000073a:	605a      	str	r2, [r3, #4]
2000073c:	685b      	ldr	r3, [r3, #4]
2000073e:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
20000742:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
20000746:	4b04      	ldr	r3, [pc, #16]	; (20000758 <copy_mskd_lss()+0x24>)
20000748:	bf34      	ite	cc
2000074a:	2202      	movcc	r2, #2
2000074c:	2204      	movcs	r2, #4
2000074e:	605a      	str	r2, [r3, #4]
20000750:	4770      	bx	lr
20000752:	bf00      	nop
20000754:	200023e0 	.word	0x200023e0
20000758:	20002480 	.word	0x20002480

2000075c <copy_mskd_leq()>:
2000075c:	4b06      	ldr	r3, [pc, #24]	; (20000778 <copy_mskd_leq()+0x1c>)
2000075e:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000762:	605a      	str	r2, [r3, #4]
20000764:	685b      	ldr	r3, [r3, #4]
20000766:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000076a:	4293      	cmp	r3, r2
2000076c:	4b03      	ldr	r3, [pc, #12]	; (2000077c <copy_mskd_leq()+0x20>)
2000076e:	bf94      	ite	ls
20000770:	2202      	movls	r2, #2
20000772:	2204      	movhi	r2, #4
20000774:	605a      	str	r2, [r3, #4]
20000776:	4770      	bx	lr
20000778:	200023e0 	.word	0x200023e0
2000077c:	20002480 	.word	0x20002480

20000780 <copy_mskd_gtr()>:
20000780:	4b07      	ldr	r3, [pc, #28]	; (200007a0 <copy_mskd_gtr()+0x20>)
20000782:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000786:	605a      	str	r2, [r3, #4]
20000788:	685b      	ldr	r3, [r3, #4]
2000078a:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
2000078e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
20000792:	4b04      	ldr	r3, [pc, #16]	; (200007a4 <copy_mskd_gtr()+0x24>)
20000794:	bf8c      	ite	hi
20000796:	2202      	movhi	r2, #2
20000798:	2204      	movls	r2, #4
2000079a:	605a      	str	r2, [r3, #4]
2000079c:	4770      	bx	lr
2000079e:	bf00      	nop
200007a0:	200023e0 	.word	0x200023e0
200007a4:	20002480 	.word	0x20002480

200007a8 <copy_mskd_geq()>:
200007a8:	4b06      	ldr	r3, [pc, #24]	; (200007c4 <copy_mskd_geq()+0x1c>)
200007aa:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
200007ae:	605a      	str	r2, [r3, #4]
200007b0:	685b      	ldr	r3, [r3, #4]
200007b2:	f003 5378 	and.w	r3, r3, #1040187392	; 0x3e000000
200007b6:	4293      	cmp	r3, r2
200007b8:	4b03      	ldr	r3, [pc, #12]	; (200007c8 <copy_mskd_geq()+0x20>)
200007ba:	bf2c      	ite	cs
200007bc:	2202      	movcs	r2, #2
200007be:	2204      	movcc	r2, #4
200007c0:	605a      	str	r2, [r3, #4]
200007c2:	4770      	bx	lr
200007c4:	200023e0 	.word	0x200023e0
200007c8:	20002480 	.word	0x20002480

200007cc <copy_shifted()>:
200007cc:	4b06      	ldr	r3, [pc, #24]	; (200007e8 <copy_shifted()+0x1c>)
200007ce:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
200007d2:	605a      	str	r2, [r3, #4]
200007d4:	685b      	ldr	r3, [r3, #4]
200007d6:	f3c3 6344 	ubfx	r3, r3, #25, #5
200007da:	2b0b      	cmp	r3, #11
200007dc:	4b03      	ldr	r3, [pc, #12]	; (200007ec <copy_shifted()+0x20>)
200007de:	bf0c      	ite	eq
200007e0:	2202      	moveq	r2, #2
200007e2:	2204      	movne	r2, #4
200007e4:	605a      	str	r2, [r3, #4]
200007e6:	4770      	bx	lr
200007e8:	200023e0 	.word	0x200023e0
200007ec:	20002480 	.word	0x20002480

200007f0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
200007f0:	4b01      	ldr	r3, [pc, #4]	; (200007f8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0x8>)
200007f2:	6058      	str	r0, [r3, #4]
200007f4:	4770      	bx	lr
200007f6:	bf00      	nop
200007f8:	20002480 	.word	0x20002480

200007fc <call_bits_val_var()>:
200007fc:	b500      	push	{lr}
200007fe:	2040      	movs	r0, #64	; 0x40
20000800:	f7ff fff6 	bl	200007f0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000804:	f85d fb04 	ldr.w	pc, [sp], #4

20000808 <call_bits_val_zero()>:
20000808:	b500      	push	{lr}
2000080a:	2000      	movs	r0, #0
2000080c:	f7ff fff0 	bl	200007f0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000810:	f85d fb04 	ldr.w	pc, [sp], #4

20000814 <call_bits_val_const()>:
20000814:	b500      	push	{lr}
20000816:	2040      	movs	r0, #64	; 0x40
20000818:	f7ff ffea 	bl	200007f0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
2000081c:	f85d fb04 	ldr.w	pc, [sp], #4

20000820 <call_bits_val_global()>:
20000820:	b500      	push	{lr}
20000822:	2040      	movs	r0, #64	; 0x40
20000824:	f7ff ffe4 	bl	200007f0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000828:	f85d fb04 	ldr.w	pc, [sp], #4

2000082c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
2000082c:	6802      	ldr	r2, [r0, #0]
2000082e:	4b01      	ldr	r3, [pc, #4]	; (20000834 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0x8>)
20000830:	605a      	str	r2, [r3, #4]
20000832:	4770      	bx	lr
20000834:	20002480 	.word	0x20002480

20000838 <call_bits_ref_var()>:
20000838:	b500      	push	{lr}
2000083a:	b081      	sub	sp, #4
2000083c:	2301      	movs	r3, #1
2000083e:	9300      	str	r3, [sp, #0]
20000840:	4668      	mov	r0, sp
20000842:	f7ff fff3 	bl	2000082c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
20000846:	b001      	add	sp, #4
20000848:	f85d fb04 	ldr.w	pc, [sp], #4

2000084c <call_bits_ref_zero()>:
2000084c:	b500      	push	{lr}
2000084e:	b081      	sub	sp, #4
20000850:	2300      	movs	r3, #0
20000852:	9300      	str	r3, [sp, #0]
20000854:	4668      	mov	r0, sp
20000856:	f7ff ffe9 	bl	2000082c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
2000085a:	b001      	add	sp, #4
2000085c:	f85d fb04 	ldr.w	pc, [sp], #4

20000860 <call_bits_ref_const()>:
20000860:	b500      	push	{lr}
20000862:	b081      	sub	sp, #4
20000864:	2301      	movs	r3, #1
20000866:	9300      	str	r3, [sp, #0]
20000868:	4668      	mov	r0, sp
2000086a:	f7ff ffdf 	bl	2000082c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
2000086e:	b001      	add	sp, #4
20000870:	f85d fb04 	ldr.w	pc, [sp], #4

20000874 <call_bits_ref_global()>:
20000874:	b500      	push	{lr}
20000876:	b081      	sub	sp, #4
20000878:	2340      	movs	r3, #64	; 0x40
2000087a:	9300      	str	r3, [sp, #0]
2000087c:	4668      	mov	r0, sp
2000087e:	f7ff ffd5 	bl	2000082c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
20000882:	b001      	add	sp, #4
20000884:	f85d fb04 	ldr.w	pc, [sp], #4

20000888 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000888:	4a03      	ldr	r2, [pc, #12]	; (20000898 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
2000088a:	6853      	ldr	r3, [r2, #4]
2000088c:	ea23 0000 	bic.w	r0, r3, r0
20000890:	4308      	orrs	r0, r1
20000892:	6050      	str	r0, [r2, #4]
20000894:	4770      	bx	lr
20000896:	bf00      	nop
20000898:	20002480 	.word	0x20002480

2000089c <call_mskd_val_var()>:
2000089c:	b500      	push	{lr}
2000089e:	2006      	movs	r0, #6
200008a0:	2102      	movs	r1, #2
200008a2:	f7ff fff1 	bl	20000888 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
200008a6:	f85d fb04 	ldr.w	pc, [sp], #4

200008aa <call_mskd_val_const()>:
200008aa:	b500      	push	{lr}
200008ac:	2006      	movs	r0, #6
200008ae:	2102      	movs	r1, #2
200008b0:	f7ff ffea 	bl	20000888 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
200008b4:	f85d fb04 	ldr.w	pc, [sp], #4

200008b8 <call_mskd_val_global()>:
200008b8:	b500      	push	{lr}
200008ba:	2006      	movs	r0, #6
200008bc:	2102      	movs	r1, #2
200008be:	f7ff ffe3 	bl	20000888 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
200008c2:	f85d fb04 	ldr.w	pc, [sp], #4

200008c6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
200008c6:	4a04      	ldr	r2, [pc, #16]	; (200008d8 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x12>)
200008c8:	6853      	ldr	r3, [r2, #4]
200008ca:	6801      	ldr	r1, [r0, #0]
200008cc:	ea23 0301 	bic.w	r3, r3, r1
200008d0:	6841      	ldr	r1, [r0, #4]
200008d2:	430b      	orrs	r3, r1
200008d4:	6053      	str	r3, [r2, #4]
200008d6:	4770      	bx	lr
200008d8:	20002480 	.word	0x20002480

200008dc <call_mskd_ref_var()>:
200008dc:	b500      	push	{lr}
200008de:	b082      	sub	sp, #8
200008e0:	4b04      	ldr	r3, [pc, #16]	; (200008f4 <call_mskd_ref_var()+0x18>)
200008e2:	cb0c      	ldmia	r3, {r2, r3}
200008e4:	e88d 000c 	stmia.w	sp, {r2, r3}
200008e8:	4668      	mov	r0, sp
200008ea:	f7ff ffec 	bl	200008c6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
200008ee:	b002      	add	sp, #8
200008f0:	f85d fb04 	ldr.w	pc, [sp], #4
200008f4:	200015f8 	.word	0x200015f8

200008f8 <call_mskd_ref_const()>:
200008f8:	b500      	push	{lr}
200008fa:	b082      	sub	sp, #8
200008fc:	2306      	movs	r3, #6
200008fe:	9300      	str	r3, [sp, #0]
20000900:	2304      	movs	r3, #4
20000902:	9301      	str	r3, [sp, #4]
20000904:	4668      	mov	r0, sp
20000906:	f7ff ffde 	bl	200008c6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
2000090a:	b002      	add	sp, #8
2000090c:	f85d fb04 	ldr.w	pc, [sp], #4

20000910 <call_mskd_ref_global()>:
20000910:	b500      	push	{lr}
20000912:	b082      	sub	sp, #8
20000914:	2306      	movs	r3, #6
20000916:	9300      	str	r3, [sp, #0]
20000918:	2302      	movs	r3, #2
2000091a:	9301      	str	r3, [sp, #4]
2000091c:	4668      	mov	r0, sp
2000091e:	f7ff ffd2 	bl	200008c6 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
20000922:	b002      	add	sp, #8
20000924:	f85d fb04 	ldr.w	pc, [sp], #4

20000928 <periph_bits(mcu::Serial volatile*)>:
20000928:	6843      	ldr	r3, [r0, #4]
2000092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000092e:	6043      	str	r3, [r0, #4]
20000930:	4770      	bx	lr

20000932 <call_periph_bits()>:
20000932:	b500      	push	{lr}
20000934:	4802      	ldr	r0, [pc, #8]	; (20000940 <call_periph_bits()+0xe>)
20000936:	f7ff fff7 	bl	20000928 <periph_bits(mcu::Serial volatile*)>
2000093a:	f85d fb04 	ldr.w	pc, [sp], #4
2000093e:	bf00      	nop
20000940:	20002480 	.word	0x20002480

20000944 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000944:	6843      	ldr	r3, [r0, #4]
20000946:	4319      	orrs	r1, r3
20000948:	6041      	str	r1, [r0, #4]
2000094a:	4770      	bx	lr

2000094c <call_periph_bits_val()>:
2000094c:	b500      	push	{lr}
2000094e:	2140      	movs	r1, #64	; 0x40
20000950:	4802      	ldr	r0, [pc, #8]	; (2000095c <call_periph_bits_val()+0x10>)
20000952:	f7ff fff7 	bl	20000944 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000956:	f85d fb04 	ldr.w	pc, [sp], #4
2000095a:	bf00      	nop
2000095c:	20002480 	.word	0x20002480

20000960 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
20000960:	6803      	ldr	r3, [r0, #0]
20000962:	4319      	orrs	r1, r3
20000964:	6001      	str	r1, [r0, #0]
20000966:	4770      	bx	lr

20000968 <call_reg_bits_val()>:
20000968:	b500      	push	{lr}
2000096a:	2140      	movs	r1, #64	; 0x40
2000096c:	4802      	ldr	r0, [pc, #8]	; (20000978 <call_reg_bits_val()+0x10>)
2000096e:	f7ff fff7 	bl	20000960 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
20000972:	f85d fb04 	ldr.w	pc, [sp], #4
20000976:	bf00      	nop
20000978:	20002484 	.word	0x20002484

2000097c <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
2000097c:	6843      	ldr	r3, [r0, #4]
2000097e:	680a      	ldr	r2, [r1, #0]
20000980:	4313      	orrs	r3, r2
20000982:	6043      	str	r3, [r0, #4]
20000984:	4770      	bx	lr

20000986 <call_periph_bits_ref()>:
20000986:	b500      	push	{lr}
20000988:	b081      	sub	sp, #4
2000098a:	2340      	movs	r3, #64	; 0x40
2000098c:	9300      	str	r3, [sp, #0]
2000098e:	4669      	mov	r1, sp
20000990:	4802      	ldr	r0, [pc, #8]	; (2000099c <call_periph_bits_ref()+0x16>)
20000992:	f7ff fff3 	bl	2000097c <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
20000996:	b001      	add	sp, #4
20000998:	f85d fb04 	ldr.w	pc, [sp], #4
2000099c:	20002480 	.word	0x20002480

200009a0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
200009a0:	6803      	ldr	r3, [r0, #0]
200009a2:	680a      	ldr	r2, [r1, #0]
200009a4:	4313      	orrs	r3, r2
200009a6:	6003      	str	r3, [r0, #0]
200009a8:	4770      	bx	lr

200009aa <call_reg_bits_ref()>:
200009aa:	b500      	push	{lr}
200009ac:	b081      	sub	sp, #4
200009ae:	2340      	movs	r3, #64	; 0x40
200009b0:	9300      	str	r3, [sp, #0]
200009b2:	4669      	mov	r1, sp
200009b4:	4802      	ldr	r0, [pc, #8]	; (200009c0 <call_reg_bits_ref()+0x16>)
200009b6:	f7ff fff3 	bl	200009a0 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
200009ba:	b001      	add	sp, #4
200009bc:	f85d fb04 	ldr.w	pc, [sp], #4
200009c0:	20002484 	.word	0x20002484

200009c4 <periph_mskd(mcu::Serial volatile*)>:
200009c4:	6843      	ldr	r3, [r0, #4]
200009c6:	f023 0306 	bic.w	r3, r3, #6
200009ca:	f043 0302 	orr.w	r3, r3, #2
200009ce:	6043      	str	r3, [r0, #4]
200009d0:	4770      	bx	lr

200009d2 <call_periph_mskd()>:
200009d2:	b500      	push	{lr}
200009d4:	4802      	ldr	r0, [pc, #8]	; (200009e0 <call_periph_mskd()+0xe>)
200009d6:	f7ff fff5 	bl	200009c4 <periph_mskd(mcu::Serial volatile*)>
200009da:	f85d fb04 	ldr.w	pc, [sp], #4
200009de:	bf00      	nop
200009e0:	20002480 	.word	0x20002480

200009e4 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
200009e4:	6843      	ldr	r3, [r0, #4]
200009e6:	ea23 0101 	bic.w	r1, r3, r1
200009ea:	4311      	orrs	r1, r2
200009ec:	6041      	str	r1, [r0, #4]
200009ee:	4770      	bx	lr

200009f0 <call_periph_mskd_val()>:
200009f0:	b500      	push	{lr}
200009f2:	2106      	movs	r1, #6
200009f4:	2202      	movs	r2, #2
200009f6:	4802      	ldr	r0, [pc, #8]	; (20000a00 <call_periph_mskd_val()+0x10>)
200009f8:	f7ff fff4 	bl	200009e4 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
200009fc:	f85d fb04 	ldr.w	pc, [sp], #4
20000a00:	20002480 	.word	0x20002480

20000a04 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a04:	6803      	ldr	r3, [r0, #0]
20000a06:	ea23 0101 	bic.w	r1, r3, r1
20000a0a:	4311      	orrs	r1, r2
20000a0c:	6001      	str	r1, [r0, #0]
20000a0e:	4770      	bx	lr

20000a10 <call_reg_mskd_val()>:
20000a10:	b500      	push	{lr}
20000a12:	2106      	movs	r1, #6
20000a14:	2202      	movs	r2, #2
20000a16:	4802      	ldr	r0, [pc, #8]	; (20000a20 <call_reg_mskd_val()+0x10>)
20000a18:	f7ff fff4 	bl	20000a04 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a1c:	f85d fb04 	ldr.w	pc, [sp], #4
20000a20:	20002484 	.word	0x20002484

20000a24 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a24:	6843      	ldr	r3, [r0, #4]
20000a26:	ea23 0101 	bic.w	r1, r3, r1
20000a2a:	4311      	orrs	r1, r2
20000a2c:	6041      	str	r1, [r0, #4]
20000a2e:	4770      	bx	lr

20000a30 <call_periph_mskd_ref()>:
20000a30:	b500      	push	{lr}
20000a32:	2106      	movs	r1, #6
20000a34:	2202      	movs	r2, #2
20000a36:	4802      	ldr	r0, [pc, #8]	; (20000a40 <call_periph_mskd_ref()+0x10>)
20000a38:	f7ff fff4 	bl	20000a24 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a3c:	f85d fb04 	ldr.w	pc, [sp], #4
20000a40:	20002480 	.word	0x20002480

20000a44 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000a44:	6803      	ldr	r3, [r0, #0]
20000a46:	ea23 0101 	bic.w	r1, r3, r1
20000a4a:	4311      	orrs	r1, r2
20000a4c:	6001      	str	r1, [r0, #0]
20000a4e:	4770      	bx	lr

20000a50 <call_reg_mskd_ref()>:
20000a50:	b500      	push	{lr}
20000a52:	2106      	movs	r1, #6
20000a54:	2202      	movs	r2, #2
20000a56:	4802      	ldr	r0, [pc, #8]	; (20000a60 <call_reg_mskd_ref()+0x10>)
20000a58:	f7ff fff4 	bl	20000a44 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000a5c:	f85d fb04 	ldr.w	pc, [sp], #4
20000a60:	20002484 	.word	0x20002484

20000a64 <return_bits()>:
20000a64:	2020      	movs	r0, #32
20000a66:	4770      	bx	lr

20000a68 <call_return_bits()>:
20000a68:	b500      	push	{lr}
20000a6a:	f7ff fffb 	bl	20000a64 <return_bits()>
20000a6e:	2820      	cmp	r0, #32
20000a70:	4b04      	ldr	r3, [pc, #16]	; (20000a84 <call_return_bits()+0x1c>)
20000a72:	bf0c      	ite	eq
20000a74:	f04f 5228 	moveq.w	r2, #704643072	; 0x2a000000
20000a78:	f04f 62c0 	movne.w	r2, #100663296	; 0x6000000
20000a7c:	605a      	str	r2, [r3, #4]
20000a7e:	f85d fb04 	ldr.w	pc, [sp], #4
20000a82:	bf00      	nop
20000a84:	200023e0 	.word	0x200023e0

20000a88 <return_mskd()>:
20000a88:	2218      	movs	r2, #24
20000a8a:	6002      	str	r2, [r0, #0]
20000a8c:	2208      	movs	r2, #8
20000a8e:	6042      	str	r2, [r0, #4]
20000a90:	4770      	bx	lr

20000a92 <call_return_mskd()>:
20000a92:	b500      	push	{lr}
20000a94:	b082      	sub	sp, #8
20000a96:	4668      	mov	r0, sp
20000a98:	f7ff fff6 	bl	20000a88 <return_mskd()>
20000a9c:	9a01      	ldr	r2, [sp, #4]
20000a9e:	9b00      	ldr	r3, [sp, #0]
20000aa0:	2b18      	cmp	r3, #24
20000aa2:	d006      	beq.n	20000ab2 <call_return_mskd()+0x20>
20000aa4:	4b06      	ldr	r3, [pc, #24]	; (20000ac0 <call_return_mskd()+0x2e>)
20000aa6:	f04f 5218 	mov.w	r2, #637534208	; 0x26000000
20000aaa:	605a      	str	r2, [r3, #4]
20000aac:	b002      	add	sp, #8
20000aae:	f85d fb04 	ldr.w	pc, [sp], #4
20000ab2:	2a08      	cmp	r2, #8
20000ab4:	d1f6      	bne.n	20000aa4 <call_return_mskd()+0x12>
20000ab6:	4b02      	ldr	r3, [pc, #8]	; (20000ac0 <call_return_mskd()+0x2e>)
20000ab8:	f04f 5208 	mov.w	r2, #570425344	; 0x22000000
20000abc:	605a      	str	r2, [r3, #4]
20000abe:	e7f5      	b.n	20000aac <call_return_mskd()+0x1a>
20000ac0:	200023e0 	.word	0x200023e0

20000ac4 <return_reg()>:
20000ac4:	4b02      	ldr	r3, [pc, #8]	; (20000ad0 <return_reg()+0xc>)
20000ac6:	2240      	movs	r2, #64	; 0x40
20000ac8:	605a      	str	r2, [r3, #4]
20000aca:	4802      	ldr	r0, [pc, #8]	; (20000ad4 <return_reg()+0x10>)
20000acc:	4770      	bx	lr
20000ace:	bf00      	nop
20000ad0:	20002480 	.word	0x20002480
20000ad4:	20002484 	.word	0x20002484

20000ad8 <call_return_reg()>:
20000ad8:	b500      	push	{lr}
20000ada:	f7ff fff3 	bl	20000ac4 <return_reg()>
20000ade:	6803      	ldr	r3, [r0, #0]
20000ae0:	2b40      	cmp	r3, #64	; 0x40
20000ae2:	4b04      	ldr	r3, [pc, #16]	; (20000af4 <call_return_reg()+0x1c>)
20000ae4:	bf0c      	ite	eq
20000ae6:	f04f 52f0 	moveq.w	r2, #503316480	; 0x1e000000
20000aea:	f04f 5238 	movne.w	r2, #771751936	; 0x2e000000
20000aee:	605a      	str	r2, [r3, #4]
20000af0:	f85d fb04 	ldr.w	pc, [sp], #4
20000af4:	200023e0 	.word	0x200023e0

20000af8 <return_periph()>:
20000af8:	4801      	ldr	r0, [pc, #4]	; (20000b00 <return_periph()+0x8>)
20000afa:	2340      	movs	r3, #64	; 0x40
20000afc:	6043      	str	r3, [r0, #4]
20000afe:	4770      	bx	lr
20000b00:	20002480 	.word	0x20002480

20000b04 <call_return_periph()>:
20000b04:	b500      	push	{lr}
20000b06:	f7ff fff7 	bl	20000af8 <return_periph()>
20000b0a:	6843      	ldr	r3, [r0, #4]
20000b0c:	2b40      	cmp	r3, #64	; 0x40
20000b0e:	4b04      	ldr	r3, [pc, #16]	; (20000b20 <call_return_periph()+0x1c>)
20000b10:	bf0c      	ite	eq
20000b12:	f04f 5218 	moveq.w	r2, #637534208	; 0x26000000
20000b16:	f04f 5228 	movne.w	r2, #704643072	; 0x2a000000
20000b1a:	605a      	str	r2, [r3, #4]
20000b1c:	f85d fb04 	ldr.w	pc, [sp], #4
20000b20:	200023e0 	.word	0x200023e0

20000b24 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
20000b24:	2805      	cmp	r0, #5
20000b26:	d006      	beq.n	20000b36 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x12>
20000b28:	2806      	cmp	r0, #6
20000b2a:	4b05      	ldr	r3, [pc, #20]	; (20000b40 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000b2c:	bf0c      	ite	eq
20000b2e:	2244      	moveq	r2, #68	; 0x44
20000b30:	2255      	movne	r2, #85	; 0x55
20000b32:	62da      	str	r2, [r3, #44]	; 0x2c
20000b34:	4770      	bx	lr
20000b36:	4b02      	ldr	r3, [pc, #8]	; (20000b40 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
20000b38:	2233      	movs	r2, #51	; 0x33
20000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
20000b3c:	4770      	bx	lr
20000b3e:	bf00      	nop
20000b40:	200022c0 	.word	0x200022c0

20000b44 <call_pos_val()>:
20000b44:	b500      	push	{lr}
20000b46:	2005      	movs	r0, #5
20000b48:	f7ff ffec 	bl	20000b24 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
20000b4c:	2006      	movs	r0, #6
20000b4e:	f7ff ffe9 	bl	20000b24 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
20000b52:	f85d fb04 	ldr.w	pc, [sp], #4

20000b56 <call_pos_val_global()>:
20000b56:	b500      	push	{lr}
20000b58:	2006      	movs	r0, #6
20000b5a:	f7ff ffe3 	bl	20000b24 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>
20000b5e:	f85d fb04 	ldr.w	pc, [sp], #4

20000b62 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
20000b62:	6803      	ldr	r3, [r0, #0]
20000b64:	2b05      	cmp	r3, #5
20000b66:	d006      	beq.n	20000b76 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x14>
20000b68:	2b06      	cmp	r3, #6
20000b6a:	4b05      	ldr	r3, [pc, #20]	; (20000b80 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
20000b6c:	bf0c      	ite	eq
20000b6e:	2277      	moveq	r2, #119	; 0x77
20000b70:	2288      	movne	r2, #136	; 0x88
20000b72:	62da      	str	r2, [r3, #44]	; 0x2c
20000b74:	4770      	bx	lr
20000b76:	4b02      	ldr	r3, [pc, #8]	; (20000b80 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1e>)
20000b78:	2266      	movs	r2, #102	; 0x66
20000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
20000b7c:	4770      	bx	lr
20000b7e:	bf00      	nop
20000b80:	200022c0 	.word	0x200022c0

20000b84 <call_pos_ref()>:
20000b84:	b510      	push	{r4, lr}
20000b86:	b082      	sub	sp, #8
20000b88:	2405      	movs	r4, #5
20000b8a:	9401      	str	r4, [sp, #4]
20000b8c:	a801      	add	r0, sp, #4
20000b8e:	f7ff ffe8 	bl	20000b62 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
20000b92:	9400      	str	r4, [sp, #0]
20000b94:	4668      	mov	r0, sp
20000b96:	f7ff ffe4 	bl	20000b62 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
20000b9a:	b002      	add	sp, #8
20000b9c:	bd10      	pop	{r4, pc}

20000b9e <call_pos_ref_global()>:
20000b9e:	b500      	push	{lr}
20000ba0:	b081      	sub	sp, #4
20000ba2:	2306      	movs	r3, #6
20000ba4:	9300      	str	r3, [sp, #0]
20000ba6:	4668      	mov	r0, sp
20000ba8:	f7ff ffdb 	bl	20000b62 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>
20000bac:	b001      	add	sp, #4
20000bae:	f85d fb04 	ldr.w	pc, [sp], #4

20000bb2 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000bb2:	4a03      	ldr	r2, [pc, #12]	; (20000bc0 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xe>)
20000bb4:	6853      	ldr	r3, [r2, #4]
20000bb6:	ea23 0000 	bic.w	r0, r3, r0
20000bba:	4308      	orrs	r0, r1
20000bbc:	6050      	str	r0, [r2, #4]
20000bbe:	4770      	bx	lr
20000bc0:	20002480 	.word	0x20002480

20000bc4 <call_range_val(unsigned int)>:
20000bc4:	b500      	push	{lr}
20000bc6:	0301      	lsls	r1, r0, #12
20000bc8:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000bcc:	f7ff fff1 	bl	20000bb2 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000bd0:	f85d fb04 	ldr.w	pc, [sp], #4

20000bd4 <call_range_val_port()>:
20000bd4:	b500      	push	{lr}
20000bd6:	201f      	movs	r0, #31
20000bd8:	f7ff fff4 	bl	20000bc4 <call_range_val(unsigned int)>
20000bdc:	f85d fb04 	ldr.w	pc, [sp], #4

20000be0 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
20000be0:	4a03      	ldr	r2, [pc, #12]	; (20000bf0 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0x10>)
20000be2:	6853      	ldr	r3, [r2, #4]
20000be4:	ea23 0000 	bic.w	r0, r3, r0
20000be8:	4308      	orrs	r0, r1
20000bea:	6050      	str	r0, [r2, #4]
20000bec:	4770      	bx	lr
20000bee:	bf00      	nop
20000bf0:	20002480 	.word	0x20002480

20000bf4 <call_range_ref(unsigned int)>:
20000bf4:	b500      	push	{lr}
20000bf6:	0301      	lsls	r1, r0, #12
20000bf8:	f44f 30f8 	mov.w	r0, #126976	; 0x1f000
20000bfc:	f7ff fff0 	bl	20000be0 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
20000c00:	f85d fb04 	ldr.w	pc, [sp], #4

20000c04 <call_range_ref_port()>:
20000c04:	b500      	push	{lr}
20000c06:	200c      	movs	r0, #12
20000c08:	f7ff fff4 	bl	20000bf4 <call_range_ref(unsigned int)>
20000c0c:	f85d fb04 	ldr.w	pc, [sp], #4

20000c10 <check_array_range_pass(unsigned int)>:
20000c10:	2816      	cmp	r0, #22
20000c12:	4b03      	ldr	r3, [pc, #12]	; (20000c20 <check_array_range_pass(unsigned int)+0x10>)
20000c14:	bf94      	ite	ls
20000c16:	227f      	movls	r2, #127	; 0x7f
20000c18:	2283      	movhi	r2, #131	; 0x83
20000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
20000c1c:	4770      	bx	lr
20000c1e:	bf00      	nop
20000c20:	200022c0 	.word	0x200022c0

20000c24 <check_array_range_fail(unsigned int)>:
20000c24:	2816      	cmp	r0, #22
20000c26:	4b03      	ldr	r3, [pc, #12]	; (20000c34 <check_array_range_fail(unsigned int)+0x10>)
20000c28:	bf94      	ite	ls
20000c2a:	2295      	movls	r2, #149	; 0x95
20000c2c:	2297      	movhi	r2, #151	; 0x97
20000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
20000c30:	4770      	bx	lr
20000c32:	bf00      	nop
20000c34:	200022c0 	.word	0x200022c0

20000c38 <check_bits_range_pass(unsigned int)>:
20000c38:	280f      	cmp	r0, #15
20000c3a:	4b03      	ldr	r3, [pc, #12]	; (20000c48 <check_bits_range_pass(unsigned int)+0x10>)
20000c3c:	bf94      	ite	ls
20000c3e:	229d      	movls	r2, #157	; 0x9d
20000c40:	22a3      	movhi	r2, #163	; 0xa3
20000c42:	62da      	str	r2, [r3, #44]	; 0x2c
20000c44:	4770      	bx	lr
20000c46:	bf00      	nop
20000c48:	200022c0 	.word	0x200022c0

20000c4c <check_bits_range_fail(unsigned int)>:
20000c4c:	280f      	cmp	r0, #15
20000c4e:	4b03      	ldr	r3, [pc, #12]	; (20000c5c <check_bits_range_fail(unsigned int)+0x10>)
20000c50:	bf94      	ite	ls
20000c52:	22a7      	movls	r2, #167	; 0xa7
20000c54:	22ad      	movhi	r2, #173	; 0xad
20000c56:	62da      	str	r2, [r3, #44]	; 0x2c
20000c58:	4770      	bx	lr
20000c5a:	bf00      	nop
20000c5c:	200022c0 	.word	0x200022c0

20000c60 <check_mskd_range_pass(unsigned int)>:
20000c60:	281f      	cmp	r0, #31
20000c62:	4b03      	ldr	r3, [pc, #12]	; (20000c70 <check_mskd_range_pass(unsigned int)+0x10>)
20000c64:	bf94      	ite	ls
20000c66:	22b3      	movls	r2, #179	; 0xb3
20000c68:	22b5      	movhi	r2, #181	; 0xb5
20000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
20000c6c:	4770      	bx	lr
20000c6e:	bf00      	nop
20000c70:	200022c0 	.word	0x200022c0

20000c74 <check_mskd_range_fail(unsigned int)>:
20000c74:	281f      	cmp	r0, #31
20000c76:	4b03      	ldr	r3, [pc, #12]	; (20000c84 <check_mskd_range_fail(unsigned int)+0x10>)
20000c78:	bf94      	ite	ls
20000c7a:	22bf      	movls	r2, #191	; 0xbf
20000c7c:	22c1      	movhi	r2, #193	; 0xc1
20000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
20000c80:	4770      	bx	lr
20000c82:	bf00      	nop
20000c84:	200022c0 	.word	0x200022c0

20000c88 <bits_extract_ne()>:
20000c88:	4b05      	ldr	r3, [pc, #20]	; (20000ca0 <bits_extract_ne()+0x18>)
20000c8a:	2220      	movs	r2, #32
20000c8c:	605a      	str	r2, [r3, #4]
20000c8e:	685b      	ldr	r3, [r3, #4]
20000c90:	4293      	cmp	r3, r2
20000c92:	4b03      	ldr	r3, [pc, #12]	; (20000ca0 <bits_extract_ne()+0x18>)
20000c94:	bf14      	ite	ne
20000c96:	2202      	movne	r2, #2
20000c98:	2204      	moveq	r2, #4
20000c9a:	605a      	str	r2, [r3, #4]
20000c9c:	4770      	bx	lr
20000c9e:	bf00      	nop
20000ca0:	20002480 	.word	0x20002480

20000ca4 <mskd_extract_geq()>:
20000ca4:	4b05      	ldr	r3, [pc, #20]	; (20000cbc <mskd_extract_geq()+0x18>)
20000ca6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
20000caa:	605a      	str	r2, [r3, #4]
20000cac:	685b      	ldr	r3, [r3, #4]
20000cae:	4293      	cmp	r3, r2
20000cb0:	4b03      	ldr	r3, [pc, #12]	; (20000cc0 <mskd_extract_geq()+0x1c>)
20000cb2:	bf2c      	ite	cs
20000cb4:	2220      	movcs	r2, #32
20000cb6:	2240      	movcc	r2, #64	; 0x40
20000cb8:	605a      	str	r2, [r3, #4]
20000cba:	4770      	bx	lr
20000cbc:	200023e0 	.word	0x200023e0
20000cc0:	20002480 	.word	0x20002480

20000cc4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
20000cc4:	4b04      	ldr	r3, [pc, #16]	; (20000cd8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
20000cc6:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000cca:	605a      	str	r2, [r3, #4]
20000ccc:	685b      	ldr	r3, [r3, #4]
20000cce:	4018      	ands	r0, r3
20000cd0:	40c8      	lsrs	r0, r1
20000cd2:	4b02      	ldr	r3, [pc, #8]	; (20000cdc <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
20000cd4:	62d8      	str	r0, [r3, #44]	; 0x2c
20000cd6:	4770      	bx	lr
20000cd8:	200023e0 	.word	0x200023e0
20000cdc:	200022c0 	.word	0x200022c0

20000ce0 <call_shifted_const_val()>:
20000ce0:	b500      	push	{lr}
20000ce2:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000ce6:	2119      	movs	r1, #25
20000ce8:	f7ff ffec 	bl	20000cc4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000cec:	f85d fb04 	ldr.w	pc, [sp], #4

20000cf0 <call_shifted_var_val()>:
20000cf0:	b500      	push	{lr}
20000cf2:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000cf6:	2119      	movs	r1, #25
20000cf8:	f7ff ffe4 	bl	20000cc4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000cfc:	f85d fb04 	ldr.w	pc, [sp], #4

20000d00 <call_shifted_global_val()>:
20000d00:	b500      	push	{lr}
20000d02:	f04f 5078 	mov.w	r0, #1040187392	; 0x3e000000
20000d06:	2119      	movs	r1, #25
20000d08:	f7ff ffdc 	bl	20000cc4 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
20000d0c:	f85d fb04 	ldr.w	pc, [sp], #4

20000d10 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
20000d10:	4b05      	ldr	r3, [pc, #20]	; (20000d28 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
20000d12:	f04f 5238 	mov.w	r2, #771751936	; 0x2e000000
20000d16:	605a      	str	r2, [r3, #4]
20000d18:	685b      	ldr	r3, [r3, #4]
20000d1a:	6802      	ldr	r2, [r0, #0]
20000d1c:	4013      	ands	r3, r2
20000d1e:	6842      	ldr	r2, [r0, #4]
20000d20:	40d3      	lsrs	r3, r2
20000d22:	4a02      	ldr	r2, [pc, #8]	; (20000d2c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
20000d24:	62d3      	str	r3, [r2, #44]	; 0x2c
20000d26:	4770      	bx	lr
20000d28:	200023e0 	.word	0x200023e0
20000d2c:	200022c0 	.word	0x200022c0

20000d30 <call_shifted_const_ref()>:
20000d30:	b500      	push	{lr}
20000d32:	b082      	sub	sp, #8
20000d34:	4b05      	ldr	r3, [pc, #20]	; (20000d4c <call_shifted_const_ref()+0x1c>)
20000d36:	f103 0308 	add.w	r3, r3, #8
20000d3a:	cb0c      	ldmia	r3, {r2, r3}
20000d3c:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d40:	4668      	mov	r0, sp
20000d42:	f7ff ffe5 	bl	20000d10 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d46:	b002      	add	sp, #8
20000d48:	f85d fb04 	ldr.w	pc, [sp], #4
20000d4c:	200015f8 	.word	0x200015f8

20000d50 <call_shifted_var_ref()>:
20000d50:	b500      	push	{lr}
20000d52:	b082      	sub	sp, #8
20000d54:	4b05      	ldr	r3, [pc, #20]	; (20000d6c <call_shifted_var_ref()+0x1c>)
20000d56:	f103 0310 	add.w	r3, r3, #16
20000d5a:	cb0c      	ldmia	r3, {r2, r3}
20000d5c:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d60:	4668      	mov	r0, sp
20000d62:	f7ff ffd5 	bl	20000d10 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d66:	b002      	add	sp, #8
20000d68:	f85d fb04 	ldr.w	pc, [sp], #4
20000d6c:	200015f8 	.word	0x200015f8

20000d70 <call_shifted_global_ref()>:
20000d70:	b500      	push	{lr}
20000d72:	b082      	sub	sp, #8
20000d74:	4b05      	ldr	r3, [pc, #20]	; (20000d8c <call_shifted_global_ref()+0x1c>)
20000d76:	f103 0308 	add.w	r3, r3, #8
20000d7a:	cb0c      	ldmia	r3, {r2, r3}
20000d7c:	e88d 000c 	stmia.w	sp, {r2, r3}
20000d80:	4668      	mov	r0, sp
20000d82:	f7ff ffc5 	bl	20000d10 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
20000d86:	b002      	add	sp, #8
20000d88:	f85d fb04 	ldr.w	pc, [sp], #4
20000d8c:	200015f8 	.word	0x200015f8

20000d90 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
20000d90:	f010 0f40 	tst.w	r0, #64	; 0x40
20000d94:	4b02      	ldr	r3, [pc, #8]	; (20000da0 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x10>)
20000d96:	bf14      	ite	ne
20000d98:	2202      	movne	r2, #2
20000d9a:	2204      	moveq	r2, #4
20000d9c:	605a      	str	r2, [r3, #4]
20000d9e:	4770      	bx	lr
20000da0:	20002480 	.word	0x20002480

20000da4 <call_copy_bits_val()>:
20000da4:	b500      	push	{lr}
20000da6:	4b04      	ldr	r3, [pc, #16]	; (20000db8 <call_copy_bits_val()+0x14>)
20000da8:	2240      	movs	r2, #64	; 0x40
20000daa:	605a      	str	r2, [r3, #4]
20000dac:	6858      	ldr	r0, [r3, #4]
20000dae:	f7ff ffef 	bl	20000d90 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
20000db2:	f85d fb04 	ldr.w	pc, [sp], #4
20000db6:	bf00      	nop
20000db8:	20002480 	.word	0x20002480

20000dbc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
20000dbc:	6803      	ldr	r3, [r0, #0]
20000dbe:	f013 0f40 	tst.w	r3, #64	; 0x40
20000dc2:	4b03      	ldr	r3, [pc, #12]	; (20000dd0 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x14>)
20000dc4:	bf14      	ite	ne
20000dc6:	2202      	movne	r2, #2
20000dc8:	2204      	moveq	r2, #4
20000dca:	605a      	str	r2, [r3, #4]
20000dcc:	4770      	bx	lr
20000dce:	bf00      	nop
20000dd0:	20002480 	.word	0x20002480

20000dd4 <call_copy_bits_ref()>:
20000dd4:	b500      	push	{lr}
20000dd6:	b081      	sub	sp, #4
20000dd8:	4b05      	ldr	r3, [pc, #20]	; (20000df0 <call_copy_bits_ref()+0x1c>)
20000dda:	2240      	movs	r2, #64	; 0x40
20000ddc:	605a      	str	r2, [r3, #4]
20000dde:	685b      	ldr	r3, [r3, #4]
20000de0:	9300      	str	r3, [sp, #0]
20000de2:	4668      	mov	r0, sp
20000de4:	f7ff ffea 	bl	20000dbc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
20000de8:	b001      	add	sp, #4
20000dea:	f85d fb04 	ldr.w	pc, [sp], #4
20000dee:	bf00      	nop
20000df0:	20002480 	.word	0x20002480

20000df4 <run>:
20000df4:	b530      	push	{r4, r5, lr}
20000df6:	4bb0      	ldr	r3, [pc, #704]	; (200010b8 <run+0x2c4>)
20000df8:	781b      	ldrb	r3, [r3, #0]
20000dfa:	b923      	cbnz	r3, 20000e06 <run+0x12>
20000dfc:	4bae      	ldr	r3, [pc, #696]	; (200010b8 <run+0x2c4>)
20000dfe:	4aaf      	ldr	r2, [pc, #700]	; (200010bc <run+0x2c8>)
20000e00:	609a      	str	r2, [r3, #8]
20000e02:	2201      	movs	r2, #1
20000e04:	701a      	strb	r2, [r3, #0]
20000e06:	4bac      	ldr	r3, [pc, #688]	; (200010b8 <run+0x2c4>)
20000e08:	7b1b      	ldrb	r3, [r3, #12]
20000e0a:	b923      	cbnz	r3, 20000e16 <run+0x22>
20000e0c:	4baa      	ldr	r3, [pc, #680]	; (200010b8 <run+0x2c4>)
20000e0e:	4aac      	ldr	r2, [pc, #688]	; (200010c0 <run+0x2cc>)
20000e10:	615a      	str	r2, [r3, #20]
20000e12:	2201      	movs	r2, #1
20000e14:	731a      	strb	r2, [r3, #12]
20000e16:	4ba8      	ldr	r3, [pc, #672]	; (200010b8 <run+0x2c4>)
20000e18:	7e1b      	ldrb	r3, [r3, #24]
20000e1a:	b923      	cbnz	r3, 20000e26 <run+0x32>
20000e1c:	4ba6      	ldr	r3, [pc, #664]	; (200010b8 <run+0x2c4>)
20000e1e:	4aa9      	ldr	r2, [pc, #676]	; (200010c4 <run+0x2d0>)
20000e20:	621a      	str	r2, [r3, #32]
20000e22:	2201      	movs	r2, #1
20000e24:	761a      	strb	r2, [r3, #24]
20000e26:	4ca4      	ldr	r4, [pc, #656]	; (200010b8 <run+0x2c4>)
20000e28:	2200      	movs	r2, #0
20000e2a:	68a1      	ldr	r1, [r4, #8]
20000e2c:	48a6      	ldr	r0, [pc, #664]	; (200010c8 <run+0x2d4>)
20000e2e:	f000 fb4c 	bl	200014ca <do_test>
20000e32:	2201      	movs	r2, #1
20000e34:	68a1      	ldr	r1, [r4, #8]
20000e36:	48a5      	ldr	r0, [pc, #660]	; (200010cc <run+0x2d8>)
20000e38:	f000 fb47 	bl	200014ca <do_test>
20000e3c:	2202      	movs	r2, #2
20000e3e:	68a1      	ldr	r1, [r4, #8]
20000e40:	48a3      	ldr	r0, [pc, #652]	; (200010d0 <run+0x2dc>)
20000e42:	f000 fb42 	bl	200014ca <do_test>
20000e46:	2203      	movs	r2, #3
20000e48:	68a1      	ldr	r1, [r4, #8]
20000e4a:	48a2      	ldr	r0, [pc, #648]	; (200010d4 <run+0x2e0>)
20000e4c:	f000 fb3d 	bl	200014ca <do_test>
20000e50:	2204      	movs	r2, #4
20000e52:	68a1      	ldr	r1, [r4, #8]
20000e54:	48a0      	ldr	r0, [pc, #640]	; (200010d8 <run+0x2e4>)
20000e56:	f000 fb38 	bl	200014ca <do_test>
20000e5a:	2205      	movs	r2, #5
20000e5c:	68a1      	ldr	r1, [r4, #8]
20000e5e:	489f      	ldr	r0, [pc, #636]	; (200010dc <run+0x2e8>)
20000e60:	f000 fb33 	bl	200014ca <do_test>
20000e64:	2206      	movs	r2, #6
20000e66:	68a1      	ldr	r1, [r4, #8]
20000e68:	489d      	ldr	r0, [pc, #628]	; (200010e0 <run+0x2ec>)
20000e6a:	f000 fb2e 	bl	200014ca <do_test>
20000e6e:	2207      	movs	r2, #7
20000e70:	68a1      	ldr	r1, [r4, #8]
20000e72:	489c      	ldr	r0, [pc, #624]	; (200010e4 <run+0x2f0>)
20000e74:	f000 fb29 	bl	200014ca <do_test>
20000e78:	2208      	movs	r2, #8
20000e7a:	68a1      	ldr	r1, [r4, #8]
20000e7c:	489a      	ldr	r0, [pc, #616]	; (200010e8 <run+0x2f4>)
20000e7e:	f000 fb24 	bl	200014ca <do_test>
20000e82:	2209      	movs	r2, #9
20000e84:	68a1      	ldr	r1, [r4, #8]
20000e86:	4899      	ldr	r0, [pc, #612]	; (200010ec <run+0x2f8>)
20000e88:	f000 fb1f 	bl	200014ca <do_test>
20000e8c:	220a      	movs	r2, #10
20000e8e:	68a1      	ldr	r1, [r4, #8]
20000e90:	4897      	ldr	r0, [pc, #604]	; (200010f0 <run+0x2fc>)
20000e92:	f000 fb1a 	bl	200014ca <do_test>
20000e96:	220b      	movs	r2, #11
20000e98:	68a1      	ldr	r1, [r4, #8]
20000e9a:	4896      	ldr	r0, [pc, #600]	; (200010f4 <run+0x300>)
20000e9c:	f000 fb15 	bl	200014ca <do_test>
20000ea0:	220c      	movs	r2, #12
20000ea2:	68a1      	ldr	r1, [r4, #8]
20000ea4:	4894      	ldr	r0, [pc, #592]	; (200010f8 <run+0x304>)
20000ea6:	f000 fb10 	bl	200014ca <do_test>
20000eaa:	220d      	movs	r2, #13
20000eac:	68a1      	ldr	r1, [r4, #8]
20000eae:	4893      	ldr	r0, [pc, #588]	; (200010fc <run+0x308>)
20000eb0:	f000 fb0b 	bl	200014ca <do_test>
20000eb4:	220e      	movs	r2, #14
20000eb6:	68a1      	ldr	r1, [r4, #8]
20000eb8:	4891      	ldr	r0, [pc, #580]	; (20001100 <run+0x30c>)
20000eba:	f000 fb06 	bl	200014ca <do_test>
20000ebe:	220f      	movs	r2, #15
20000ec0:	68a1      	ldr	r1, [r4, #8]
20000ec2:	4890      	ldr	r0, [pc, #576]	; (20001104 <run+0x310>)
20000ec4:	f000 fb01 	bl	200014ca <do_test>
20000ec8:	2210      	movs	r2, #16
20000eca:	68a1      	ldr	r1, [r4, #8]
20000ecc:	488e      	ldr	r0, [pc, #568]	; (20001108 <run+0x314>)
20000ece:	f000 fafc 	bl	200014ca <do_test>
20000ed2:	2211      	movs	r2, #17
20000ed4:	68a1      	ldr	r1, [r4, #8]
20000ed6:	488d      	ldr	r0, [pc, #564]	; (2000110c <run+0x318>)
20000ed8:	f000 faf7 	bl	200014ca <do_test>
20000edc:	2212      	movs	r2, #18
20000ede:	68a1      	ldr	r1, [r4, #8]
20000ee0:	488b      	ldr	r0, [pc, #556]	; (20001110 <run+0x31c>)
20000ee2:	f000 faf2 	bl	200014ca <do_test>
20000ee6:	2213      	movs	r2, #19
20000ee8:	68a1      	ldr	r1, [r4, #8]
20000eea:	488a      	ldr	r0, [pc, #552]	; (20001114 <run+0x320>)
20000eec:	f000 faed 	bl	200014ca <do_test>
20000ef0:	2214      	movs	r2, #20
20000ef2:	68a1      	ldr	r1, [r4, #8]
20000ef4:	4888      	ldr	r0, [pc, #544]	; (20001118 <run+0x324>)
20000ef6:	f000 fae8 	bl	200014ca <do_test>
20000efa:	2215      	movs	r2, #21
20000efc:	68a1      	ldr	r1, [r4, #8]
20000efe:	4887      	ldr	r0, [pc, #540]	; (2000111c <run+0x328>)
20000f00:	f000 fae3 	bl	200014ca <do_test>
20000f04:	2216      	movs	r2, #22
20000f06:	68a1      	ldr	r1, [r4, #8]
20000f08:	4885      	ldr	r0, [pc, #532]	; (20001120 <run+0x32c>)
20000f0a:	f000 fade 	bl	200014ca <do_test>
20000f0e:	2217      	movs	r2, #23
20000f10:	68a1      	ldr	r1, [r4, #8]
20000f12:	4884      	ldr	r0, [pc, #528]	; (20001124 <run+0x330>)
20000f14:	f000 fad9 	bl	200014ca <do_test>
20000f18:	2218      	movs	r2, #24
20000f1a:	68a1      	ldr	r1, [r4, #8]
20000f1c:	4882      	ldr	r0, [pc, #520]	; (20001128 <run+0x334>)
20000f1e:	f000 fad4 	bl	200014ca <do_test>
20000f22:	2219      	movs	r2, #25
20000f24:	68a1      	ldr	r1, [r4, #8]
20000f26:	4881      	ldr	r0, [pc, #516]	; (2000112c <run+0x338>)
20000f28:	f000 facf 	bl	200014ca <do_test>
20000f2c:	221a      	movs	r2, #26
20000f2e:	68a1      	ldr	r1, [r4, #8]
20000f30:	487f      	ldr	r0, [pc, #508]	; (20001130 <run+0x33c>)
20000f32:	f000 faca 	bl	200014ca <do_test>
20000f36:	221b      	movs	r2, #27
20000f38:	68a1      	ldr	r1, [r4, #8]
20000f3a:	487e      	ldr	r0, [pc, #504]	; (20001134 <run+0x340>)
20000f3c:	f000 fac5 	bl	200014ca <do_test>
20000f40:	221c      	movs	r2, #28
20000f42:	68a1      	ldr	r1, [r4, #8]
20000f44:	487c      	ldr	r0, [pc, #496]	; (20001138 <run+0x344>)
20000f46:	f000 fac0 	bl	200014ca <do_test>
20000f4a:	221d      	movs	r2, #29
20000f4c:	68a1      	ldr	r1, [r4, #8]
20000f4e:	487b      	ldr	r0, [pc, #492]	; (2000113c <run+0x348>)
20000f50:	f000 fabb 	bl	200014ca <do_test>
20000f54:	221e      	movs	r2, #30
20000f56:	68a1      	ldr	r1, [r4, #8]
20000f58:	4879      	ldr	r0, [pc, #484]	; (20001140 <run+0x34c>)
20000f5a:	f000 fab6 	bl	200014ca <do_test>
20000f5e:	221f      	movs	r2, #31
20000f60:	68a1      	ldr	r1, [r4, #8]
20000f62:	4878      	ldr	r0, [pc, #480]	; (20001144 <run+0x350>)
20000f64:	f000 fab1 	bl	200014ca <do_test>
20000f68:	2220      	movs	r2, #32
20000f6a:	68a1      	ldr	r1, [r4, #8]
20000f6c:	4876      	ldr	r0, [pc, #472]	; (20001148 <run+0x354>)
20000f6e:	f000 faac 	bl	200014ca <do_test>
20000f72:	2221      	movs	r2, #33	; 0x21
20000f74:	68a1      	ldr	r1, [r4, #8]
20000f76:	4875      	ldr	r0, [pc, #468]	; (2000114c <run+0x358>)
20000f78:	f000 faa7 	bl	200014ca <do_test>
20000f7c:	2222      	movs	r2, #34	; 0x22
20000f7e:	68a1      	ldr	r1, [r4, #8]
20000f80:	4873      	ldr	r0, [pc, #460]	; (20001150 <run+0x35c>)
20000f82:	f000 faa2 	bl	200014ca <do_test>
20000f86:	2223      	movs	r2, #35	; 0x23
20000f88:	68a1      	ldr	r1, [r4, #8]
20000f8a:	4872      	ldr	r0, [pc, #456]	; (20001154 <run+0x360>)
20000f8c:	f000 fa9d 	bl	200014ca <do_test>
20000f90:	2224      	movs	r2, #36	; 0x24
20000f92:	68a1      	ldr	r1, [r4, #8]
20000f94:	4870      	ldr	r0, [pc, #448]	; (20001158 <run+0x364>)
20000f96:	f000 fa98 	bl	200014ca <do_test>
20000f9a:	2225      	movs	r2, #37	; 0x25
20000f9c:	6961      	ldr	r1, [r4, #20]
20000f9e:	486f      	ldr	r0, [pc, #444]	; (2000115c <run+0x368>)
20000fa0:	f000 fa93 	bl	200014ca <do_test>
20000fa4:	2226      	movs	r2, #38	; 0x26
20000fa6:	6961      	ldr	r1, [r4, #20]
20000fa8:	486d      	ldr	r0, [pc, #436]	; (20001160 <run+0x36c>)
20000faa:	f000 fa8e 	bl	200014ca <do_test>
20000fae:	2227      	movs	r2, #39	; 0x27
20000fb0:	6961      	ldr	r1, [r4, #20]
20000fb2:	486c      	ldr	r0, [pc, #432]	; (20001164 <run+0x370>)
20000fb4:	f000 fa89 	bl	200014ca <do_test>
20000fb8:	2228      	movs	r2, #40	; 0x28
20000fba:	68a1      	ldr	r1, [r4, #8]
20000fbc:	486a      	ldr	r0, [pc, #424]	; (20001168 <run+0x374>)
20000fbe:	f000 fa84 	bl	200014ca <do_test>
20000fc2:	2229      	movs	r2, #41	; 0x29
20000fc4:	68a1      	ldr	r1, [r4, #8]
20000fc6:	4869      	ldr	r0, [pc, #420]	; (2000116c <run+0x378>)
20000fc8:	f000 fa7f 	bl	200014ca <do_test>
20000fcc:	222a      	movs	r2, #42	; 0x2a
20000fce:	68a1      	ldr	r1, [r4, #8]
20000fd0:	4867      	ldr	r0, [pc, #412]	; (20001170 <run+0x37c>)
20000fd2:	f000 fa7a 	bl	200014ca <do_test>
20000fd6:	222b      	movs	r2, #43	; 0x2b
20000fd8:	68a1      	ldr	r1, [r4, #8]
20000fda:	4866      	ldr	r0, [pc, #408]	; (20001174 <run+0x380>)
20000fdc:	f000 fa75 	bl	200014ca <do_test>
20000fe0:	222c      	movs	r2, #44	; 0x2c
20000fe2:	68a1      	ldr	r1, [r4, #8]
20000fe4:	4864      	ldr	r0, [pc, #400]	; (20001178 <run+0x384>)
20000fe6:	f000 fa70 	bl	200014ca <do_test>
20000fea:	222d      	movs	r2, #45	; 0x2d
20000fec:	6a21      	ldr	r1, [r4, #32]
20000fee:	4863      	ldr	r0, [pc, #396]	; (2000117c <run+0x388>)
20000ff0:	f000 fa6b 	bl	200014ca <do_test>
20000ff4:	222e      	movs	r2, #46	; 0x2e
20000ff6:	68a1      	ldr	r1, [r4, #8]
20000ff8:	4861      	ldr	r0, [pc, #388]	; (20001180 <run+0x38c>)
20000ffa:	f000 fa66 	bl	200014ca <do_test>
20000ffe:	222f      	movs	r2, #47	; 0x2f
20001000:	68a1      	ldr	r1, [r4, #8]
20001002:	4860      	ldr	r0, [pc, #384]	; (20001184 <run+0x390>)
20001004:	f000 fa61 	bl	200014ca <do_test>
20001008:	2230      	movs	r2, #48	; 0x30
2000100a:	68a1      	ldr	r1, [r4, #8]
2000100c:	485e      	ldr	r0, [pc, #376]	; (20001188 <run+0x394>)
2000100e:	f000 fa5c 	bl	200014ca <do_test>
20001012:	2231      	movs	r2, #49	; 0x31
20001014:	68a1      	ldr	r1, [r4, #8]
20001016:	485d      	ldr	r0, [pc, #372]	; (2000118c <run+0x398>)
20001018:	f000 fa57 	bl	200014ca <do_test>
2000101c:	2232      	movs	r2, #50	; 0x32
2000101e:	68a1      	ldr	r1, [r4, #8]
20001020:	485b      	ldr	r0, [pc, #364]	; (20001190 <run+0x39c>)
20001022:	f000 fa52 	bl	200014ca <do_test>
20001026:	2233      	movs	r2, #51	; 0x33
20001028:	68a1      	ldr	r1, [r4, #8]
2000102a:	485a      	ldr	r0, [pc, #360]	; (20001194 <run+0x3a0>)
2000102c:	f000 fa4d 	bl	200014ca <do_test>
20001030:	2234      	movs	r2, #52	; 0x34
20001032:	68a1      	ldr	r1, [r4, #8]
20001034:	4858      	ldr	r0, [pc, #352]	; (20001198 <run+0x3a4>)
20001036:	f000 fa48 	bl	200014ca <do_test>
2000103a:	2235      	movs	r2, #53	; 0x35
2000103c:	68a1      	ldr	r1, [r4, #8]
2000103e:	4857      	ldr	r0, [pc, #348]	; (2000119c <run+0x3a8>)
20001040:	f000 fa43 	bl	200014ca <do_test>
20001044:	2236      	movs	r2, #54	; 0x36
20001046:	68a1      	ldr	r1, [r4, #8]
20001048:	4855      	ldr	r0, [pc, #340]	; (200011a0 <run+0x3ac>)
2000104a:	f000 fa3e 	bl	200014ca <do_test>
2000104e:	2237      	movs	r2, #55	; 0x37
20001050:	68a1      	ldr	r1, [r4, #8]
20001052:	4854      	ldr	r0, [pc, #336]	; (200011a4 <run+0x3b0>)
20001054:	f000 fa39 	bl	200014ca <do_test>
20001058:	2238      	movs	r2, #56	; 0x38
2000105a:	68a1      	ldr	r1, [r4, #8]
2000105c:	4852      	ldr	r0, [pc, #328]	; (200011a8 <run+0x3b4>)
2000105e:	f000 fa34 	bl	200014ca <do_test>
20001062:	2239      	movs	r2, #57	; 0x39
20001064:	68a1      	ldr	r1, [r4, #8]
20001066:	4851      	ldr	r0, [pc, #324]	; (200011ac <run+0x3b8>)
20001068:	f000 fa2f 	bl	200014ca <do_test>
2000106c:	223a      	movs	r2, #58	; 0x3a
2000106e:	68a1      	ldr	r1, [r4, #8]
20001070:	484f      	ldr	r0, [pc, #316]	; (200011b0 <run+0x3bc>)
20001072:	f000 fa2a 	bl	200014ca <do_test>
20001076:	223b      	movs	r2, #59	; 0x3b
20001078:	68a1      	ldr	r1, [r4, #8]
2000107a:	484e      	ldr	r0, [pc, #312]	; (200011b4 <run+0x3c0>)
2000107c:	f000 fa25 	bl	200014ca <do_test>
20001080:	223c      	movs	r2, #60	; 0x3c
20001082:	68a1      	ldr	r1, [r4, #8]
20001084:	484c      	ldr	r0, [pc, #304]	; (200011b8 <run+0x3c4>)
20001086:	f000 fa20 	bl	200014ca <do_test>
2000108a:	223d      	movs	r2, #61	; 0x3d
2000108c:	68a1      	ldr	r1, [r4, #8]
2000108e:	484b      	ldr	r0, [pc, #300]	; (200011bc <run+0x3c8>)
20001090:	f000 fa1b 	bl	200014ca <do_test>
20001094:	223e      	movs	r2, #62	; 0x3e
20001096:	68a1      	ldr	r1, [r4, #8]
20001098:	4849      	ldr	r0, [pc, #292]	; (200011c0 <run+0x3cc>)
2000109a:	f000 fa16 	bl	200014ca <do_test>
2000109e:	223f      	movs	r2, #63	; 0x3f
200010a0:	68a1      	ldr	r1, [r4, #8]
200010a2:	4848      	ldr	r0, [pc, #288]	; (200011c4 <run+0x3d0>)
200010a4:	f000 fa11 	bl	200014ca <do_test>
200010a8:	2240      	movs	r2, #64	; 0x40
200010aa:	68a1      	ldr	r1, [r4, #8]
200010ac:	4846      	ldr	r0, [pc, #280]	; (200011c8 <run+0x3d4>)
200010ae:	f000 fa0c 	bl	200014ca <do_test>
200010b2:	2241      	movs	r2, #65	; 0x41
200010b4:	68a1      	ldr	r1, [r4, #8]
200010b6:	e089      	b.n	200011cc <run+0x3d8>
200010b8:	20001610 	.word	0x20001610
200010bc:	20002484 	.word	0x20002484
200010c0:	200023e4 	.word	0x200023e4
200010c4:	200022ec 	.word	0x200022ec
200010c8:	200000ed 	.word	0x200000ed
200010cc:	200000f9 	.word	0x200000f9
200010d0:	20000105 	.word	0x20000105
200010d4:	20000115 	.word	0x20000115
200010d8:	20000125 	.word	0x20000125
200010dc:	20000135 	.word	0x20000135
200010e0:	20000145 	.word	0x20000145
200010e4:	20000155 	.word	0x20000155
200010e8:	20000165 	.word	0x20000165
200010ec:	20000175 	.word	0x20000175
200010f0:	20000185 	.word	0x20000185
200010f4:	20000191 	.word	0x20000191
200010f8:	2000019d 	.word	0x2000019d
200010fc:	200001a9 	.word	0x200001a9
20001100:	200001b5 	.word	0x200001b5
20001104:	200001c5 	.word	0x200001c5
20001108:	200001d5 	.word	0x200001d5
2000110c:	200001e5 	.word	0x200001e5
20001110:	200001f5 	.word	0x200001f5
20001114:	20000209 	.word	0x20000209
20001118:	2000021d 	.word	0x2000021d
2000111c:	2000022d 	.word	0x2000022d
20001120:	2000023d 	.word	0x2000023d
20001124:	20000255 	.word	0x20000255
20001128:	2000026d 	.word	0x2000026d
2000112c:	20000279 	.word	0x20000279
20001130:	20000285 	.word	0x20000285
20001134:	20000295 	.word	0x20000295
20001138:	200002a5 	.word	0x200002a5
2000113c:	200002b1 	.word	0x200002b1
20001140:	200002bd 	.word	0x200002bd
20001144:	200002c9 	.word	0x200002c9
20001148:	200002d5 	.word	0x200002d5
2000114c:	200002e5 	.word	0x200002e5
20001150:	200002f9 	.word	0x200002f9
20001154:	20000321 	.word	0x20000321
20001158:	20000341 	.word	0x20000341
2000115c:	20000365 	.word	0x20000365
20001160:	20000381 	.word	0x20000381
20001164:	200003a5 	.word	0x200003a5
20001168:	200003c9 	.word	0x200003c9
2000116c:	200003f9 	.word	0x200003f9
20001170:	20000425 	.word	0x20000425
20001174:	20000449 	.word	0x20000449
20001178:	20000465 	.word	0x20000465
2000117c:	20000479 	.word	0x20000479
20001180:	20000815 	.word	0x20000815
20001184:	200007fd 	.word	0x200007fd
20001188:	20000809 	.word	0x20000809
2000118c:	20000861 	.word	0x20000861
20001190:	20000839 	.word	0x20000839
20001194:	2000084d 	.word	0x2000084d
20001198:	200008ab 	.word	0x200008ab
2000119c:	2000089d 	.word	0x2000089d
200011a0:	200008f9 	.word	0x200008f9
200011a4:	200008dd 	.word	0x200008dd
200011a8:	20000933 	.word	0x20000933
200011ac:	2000094d 	.word	0x2000094d
200011b0:	20000969 	.word	0x20000969
200011b4:	20000987 	.word	0x20000987
200011b8:	200009ab 	.word	0x200009ab
200011bc:	200009d3 	.word	0x200009d3
200011c0:	200009f1 	.word	0x200009f1
200011c4:	20000a11 	.word	0x20000a11
200011c8:	20000a31 	.word	0x20000a31
200011cc:	4884      	ldr	r0, [pc, #528]	; (200013e0 <run+0x5ec>)
200011ce:	f000 f97c 	bl	200014ca <do_test>
200011d2:	2242      	movs	r2, #66	; 0x42
200011d4:	6961      	ldr	r1, [r4, #20]
200011d6:	4883      	ldr	r0, [pc, #524]	; (200013e4 <run+0x5f0>)
200011d8:	f000 f977 	bl	200014ca <do_test>
200011dc:	2243      	movs	r2, #67	; 0x43
200011de:	6961      	ldr	r1, [r4, #20]
200011e0:	4881      	ldr	r0, [pc, #516]	; (200013e8 <run+0x5f4>)
200011e2:	f000 f972 	bl	200014ca <do_test>
200011e6:	2244      	movs	r2, #68	; 0x44
200011e8:	6961      	ldr	r1, [r4, #20]
200011ea:	4880      	ldr	r0, [pc, #512]	; (200013ec <run+0x5f8>)
200011ec:	f000 f96d 	bl	200014ca <do_test>
200011f0:	2245      	movs	r2, #69	; 0x45
200011f2:	68a1      	ldr	r1, [r4, #8]
200011f4:	487e      	ldr	r0, [pc, #504]	; (200013f0 <run+0x5fc>)
200011f6:	f000 f968 	bl	200014ca <do_test>
200011fa:	2246      	movs	r2, #70	; 0x46
200011fc:	6a21      	ldr	r1, [r4, #32]
200011fe:	487d      	ldr	r0, [pc, #500]	; (200013f4 <run+0x600>)
20001200:	f000 f963 	bl	200014ca <do_test>
20001204:	2247      	movs	r2, #71	; 0x47
20001206:	6a21      	ldr	r1, [r4, #32]
20001208:	487b      	ldr	r0, [pc, #492]	; (200013f8 <run+0x604>)
2000120a:	f000 f95e 	bl	200014ca <do_test>
2000120e:	2248      	movs	r2, #72	; 0x48
20001210:	68a1      	ldr	r1, [r4, #8]
20001212:	487a      	ldr	r0, [pc, #488]	; (200013fc <run+0x608>)
20001214:	f000 f959 	bl	200014ca <do_test>
20001218:	2249      	movs	r2, #73	; 0x49
2000121a:	68a1      	ldr	r1, [r4, #8]
2000121c:	4878      	ldr	r0, [pc, #480]	; (20001400 <run+0x60c>)
2000121e:	f000 f954 	bl	200014ca <do_test>
20001222:	224a      	movs	r2, #74	; 0x4a
20001224:	6a21      	ldr	r1, [r4, #32]
20001226:	4877      	ldr	r0, [pc, #476]	; (20001404 <run+0x610>)
20001228:	f000 f94f 	bl	200014ca <do_test>
2000122c:	224b      	movs	r2, #75	; 0x4b
2000122e:	6a21      	ldr	r1, [r4, #32]
20001230:	4875      	ldr	r0, [pc, #468]	; (20001408 <run+0x614>)
20001232:	f000 f94a 	bl	200014ca <do_test>
20001236:	224c      	movs	r2, #76	; 0x4c
20001238:	68a1      	ldr	r1, [r4, #8]
2000123a:	4874      	ldr	r0, [pc, #464]	; (2000140c <run+0x618>)
2000123c:	f000 f945 	bl	200014ca <do_test>
20001240:	224d      	movs	r2, #77	; 0x4d
20001242:	68a1      	ldr	r1, [r4, #8]
20001244:	4872      	ldr	r0, [pc, #456]	; (20001410 <run+0x61c>)
20001246:	f000 f940 	bl	200014ca <do_test>
2000124a:	224e      	movs	r2, #78	; 0x4e
2000124c:	68a1      	ldr	r1, [r4, #8]
2000124e:	4871      	ldr	r0, [pc, #452]	; (20001414 <run+0x620>)
20001250:	f000 f93b 	bl	200014ca <do_test>
20001254:	224f      	movs	r2, #79	; 0x4f
20001256:	68a1      	ldr	r1, [r4, #8]
20001258:	486f      	ldr	r0, [pc, #444]	; (20001418 <run+0x624>)
2000125a:	f000 f936 	bl	200014ca <do_test>
2000125e:	2250      	movs	r2, #80	; 0x50
20001260:	68a1      	ldr	r1, [r4, #8]
20001262:	486e      	ldr	r0, [pc, #440]	; (2000141c <run+0x628>)
20001264:	f000 f931 	bl	200014ca <do_test>
20001268:	2251      	movs	r2, #81	; 0x51
2000126a:	68a1      	ldr	r1, [r4, #8]
2000126c:	486c      	ldr	r0, [pc, #432]	; (20001420 <run+0x62c>)
2000126e:	f000 f92c 	bl	200014ca <do_test>
20001272:	4d6c      	ldr	r5, [pc, #432]	; (20001424 <run+0x630>)
20001274:	2252      	movs	r2, #82	; 0x52
20001276:	68a1      	ldr	r1, [r4, #8]
20001278:	4628      	mov	r0, r5
2000127a:	f000 f926 	bl	200014ca <do_test>
2000127e:	2253      	movs	r2, #83	; 0x53
20001280:	68a1      	ldr	r1, [r4, #8]
20001282:	4628      	mov	r0, r5
20001284:	f000 f921 	bl	200014ca <do_test>
20001288:	2254      	movs	r2, #84	; 0x54
2000128a:	68a1      	ldr	r1, [r4, #8]
2000128c:	4866      	ldr	r0, [pc, #408]	; (20001428 <run+0x634>)
2000128e:	f000 f91c 	bl	200014ca <do_test>
20001292:	2255      	movs	r2, #85	; 0x55
20001294:	68a1      	ldr	r1, [r4, #8]
20001296:	4865      	ldr	r0, [pc, #404]	; (2000142c <run+0x638>)
20001298:	f000 f917 	bl	200014ca <do_test>
2000129c:	2256      	movs	r2, #86	; 0x56
2000129e:	68a1      	ldr	r1, [r4, #8]
200012a0:	4863      	ldr	r0, [pc, #396]	; (20001430 <run+0x63c>)
200012a2:	f000 f912 	bl	200014ca <do_test>
200012a6:	4d63      	ldr	r5, [pc, #396]	; (20001434 <run+0x640>)
200012a8:	2257      	movs	r2, #87	; 0x57
200012aa:	68a1      	ldr	r1, [r4, #8]
200012ac:	4628      	mov	r0, r5
200012ae:	f000 f90c 	bl	200014ca <do_test>
200012b2:	2258      	movs	r2, #88	; 0x58
200012b4:	68a1      	ldr	r1, [r4, #8]
200012b6:	4860      	ldr	r0, [pc, #384]	; (20001438 <run+0x644>)
200012b8:	f000 f907 	bl	200014ca <do_test>
200012bc:	2259      	movs	r2, #89	; 0x59
200012be:	68a1      	ldr	r1, [r4, #8]
200012c0:	4628      	mov	r0, r5
200012c2:	f000 f902 	bl	200014ca <do_test>
200012c6:	225a      	movs	r2, #90	; 0x5a
200012c8:	68a1      	ldr	r1, [r4, #8]
200012ca:	485c      	ldr	r0, [pc, #368]	; (2000143c <run+0x648>)
200012cc:	f000 f8fd 	bl	200014ca <do_test>
200012d0:	225b      	movs	r2, #91	; 0x5b
200012d2:	68a1      	ldr	r1, [r4, #8]
200012d4:	485a      	ldr	r0, [pc, #360]	; (20001440 <run+0x64c>)
200012d6:	f000 f8f8 	bl	200014ca <do_test>
200012da:	225c      	movs	r2, #92	; 0x5c
200012dc:	6a21      	ldr	r1, [r4, #32]
200012de:	4859      	ldr	r0, [pc, #356]	; (20001444 <run+0x650>)
200012e0:	f000 f8f3 	bl	200014ca <do_test>
200012e4:	225d      	movs	r2, #93	; 0x5d
200012e6:	6a21      	ldr	r1, [r4, #32]
200012e8:	4857      	ldr	r0, [pc, #348]	; (20001448 <run+0x654>)
200012ea:	f000 f8ee 	bl	200014ca <do_test>
200012ee:	225e      	movs	r2, #94	; 0x5e
200012f0:	68a1      	ldr	r1, [r4, #8]
200012f2:	4856      	ldr	r0, [pc, #344]	; (2000144c <run+0x658>)
200012f4:	f000 f8e9 	bl	200014ca <do_test>
200012f8:	225f      	movs	r2, #95	; 0x5f
200012fa:	6a21      	ldr	r1, [r4, #32]
200012fc:	4854      	ldr	r0, [pc, #336]	; (20001450 <run+0x65c>)
200012fe:	f000 f8e4 	bl	200014ca <do_test>
20001302:	2260      	movs	r2, #96	; 0x60
20001304:	6a21      	ldr	r1, [r4, #32]
20001306:	4853      	ldr	r0, [pc, #332]	; (20001454 <run+0x660>)
20001308:	f000 f8df 	bl	200014ca <do_test>
2000130c:	2261      	movs	r2, #97	; 0x61
2000130e:	68a1      	ldr	r1, [r4, #8]
20001310:	4851      	ldr	r0, [pc, #324]	; (20001458 <run+0x664>)
20001312:	f000 f8da 	bl	200014ca <do_test>
20001316:	2262      	movs	r2, #98	; 0x62
20001318:	68a1      	ldr	r1, [r4, #8]
2000131a:	4850      	ldr	r0, [pc, #320]	; (2000145c <run+0x668>)
2000131c:	f000 f8d5 	bl	200014ca <do_test>
20001320:	2263      	movs	r2, #99	; 0x63
20001322:	68a1      	ldr	r1, [r4, #8]
20001324:	484e      	ldr	r0, [pc, #312]	; (20001460 <run+0x66c>)
20001326:	f000 f8d0 	bl	200014ca <do_test>
2000132a:	2264      	movs	r2, #100	; 0x64
2000132c:	68a1      	ldr	r1, [r4, #8]
2000132e:	484d      	ldr	r0, [pc, #308]	; (20001464 <run+0x670>)
20001330:	f000 f8cb 	bl	200014ca <do_test>
20001334:	2265      	movs	r2, #101	; 0x65
20001336:	6a21      	ldr	r1, [r4, #32]
20001338:	484b      	ldr	r0, [pc, #300]	; (20001468 <run+0x674>)
2000133a:	f000 f8c6 	bl	200014ca <do_test>
2000133e:	2266      	movs	r2, #102	; 0x66
20001340:	6a21      	ldr	r1, [r4, #32]
20001342:	484a      	ldr	r0, [pc, #296]	; (2000146c <run+0x678>)
20001344:	f000 f8c1 	bl	200014ca <do_test>
20001348:	2267      	movs	r2, #103	; 0x67
2000134a:	6a21      	ldr	r1, [r4, #32]
2000134c:	4848      	ldr	r0, [pc, #288]	; (20001470 <run+0x67c>)
2000134e:	f000 f8bc 	bl	200014ca <do_test>
20001352:	2268      	movs	r2, #104	; 0x68
20001354:	6a21      	ldr	r1, [r4, #32]
20001356:	4847      	ldr	r0, [pc, #284]	; (20001474 <run+0x680>)
20001358:	f000 f8b7 	bl	200014ca <do_test>
2000135c:	2269      	movs	r2, #105	; 0x69
2000135e:	6a21      	ldr	r1, [r4, #32]
20001360:	4845      	ldr	r0, [pc, #276]	; (20001478 <run+0x684>)
20001362:	f000 f8b2 	bl	200014ca <do_test>
20001366:	226a      	movs	r2, #106	; 0x6a
20001368:	6a21      	ldr	r1, [r4, #32]
2000136a:	4844      	ldr	r0, [pc, #272]	; (2000147c <run+0x688>)
2000136c:	f000 f8ad 	bl	200014ca <do_test>
20001370:	226b      	movs	r2, #107	; 0x6b
20001372:	68a1      	ldr	r1, [r4, #8]
20001374:	4842      	ldr	r0, [pc, #264]	; (20001480 <run+0x68c>)
20001376:	f000 f8a8 	bl	200014ca <do_test>
2000137a:	226c      	movs	r2, #108	; 0x6c
2000137c:	68a1      	ldr	r1, [r4, #8]
2000137e:	4841      	ldr	r0, [pc, #260]	; (20001484 <run+0x690>)
20001380:	f000 f8a3 	bl	200014ca <do_test>
20001384:	226d      	movs	r2, #109	; 0x6d
20001386:	68a1      	ldr	r1, [r4, #8]
20001388:	483f      	ldr	r0, [pc, #252]	; (20001488 <run+0x694>)
2000138a:	f000 f89e 	bl	200014ca <do_test>
2000138e:	226e      	movs	r2, #110	; 0x6e
20001390:	68a1      	ldr	r1, [r4, #8]
20001392:	483e      	ldr	r0, [pc, #248]	; (2000148c <run+0x698>)
20001394:	f000 f899 	bl	200014ca <do_test>
20001398:	226f      	movs	r2, #111	; 0x6f
2000139a:	68a1      	ldr	r1, [r4, #8]
2000139c:	483c      	ldr	r0, [pc, #240]	; (20001490 <run+0x69c>)
2000139e:	f000 f894 	bl	200014ca <do_test>
200013a2:	2270      	movs	r2, #112	; 0x70
200013a4:	68a1      	ldr	r1, [r4, #8]
200013a6:	483b      	ldr	r0, [pc, #236]	; (20001494 <run+0x6a0>)
200013a8:	f000 f88f 	bl	200014ca <do_test>
200013ac:	2271      	movs	r2, #113	; 0x71
200013ae:	68a1      	ldr	r1, [r4, #8]
200013b0:	4839      	ldr	r0, [pc, #228]	; (20001498 <run+0x6a4>)
200013b2:	f000 f88a 	bl	200014ca <do_test>
200013b6:	2272      	movs	r2, #114	; 0x72
200013b8:	68a1      	ldr	r1, [r4, #8]
200013ba:	4838      	ldr	r0, [pc, #224]	; (2000149c <run+0x6a8>)
200013bc:	f000 f885 	bl	200014ca <do_test>
200013c0:	2273      	movs	r2, #115	; 0x73
200013c2:	68a1      	ldr	r1, [r4, #8]
200013c4:	4836      	ldr	r0, [pc, #216]	; (200014a0 <run+0x6ac>)
200013c6:	f000 f880 	bl	200014ca <do_test>
200013ca:	2274      	movs	r2, #116	; 0x74
200013cc:	68a1      	ldr	r1, [r4, #8]
200013ce:	4835      	ldr	r0, [pc, #212]	; (200014a4 <run+0x6b0>)
200013d0:	f000 f87b 	bl	200014ca <do_test>
200013d4:	2275      	movs	r2, #117	; 0x75
200013d6:	68a1      	ldr	r1, [r4, #8]
200013d8:	4833      	ldr	r0, [pc, #204]	; (200014a8 <run+0x6b4>)
200013da:	f000 f876 	bl	200014ca <do_test>
200013de:	bd30      	pop	{r4, r5, pc}
200013e0:	20000a51 	.word	0x20000a51
200013e4:	20000a69 	.word	0x20000a69
200013e8:	20000a93 	.word	0x20000a93
200013ec:	20000ad9 	.word	0x20000ad9
200013f0:	20000b05 	.word	0x20000b05
200013f4:	20000b45 	.word	0x20000b45
200013f8:	20000b85 	.word	0x20000b85
200013fc:	20000bd5 	.word	0x20000bd5
20001400:	20000c05 	.word	0x20000c05
20001404:	20000493 	.word	0x20000493
20001408:	200004ad 	.word	0x200004ad
2000140c:	200004c9 	.word	0x200004c9
20001410:	200004f1 	.word	0x200004f1
20001414:	20000529 	.word	0x20000529
20001418:	20000551 	.word	0x20000551
2000141c:	20000589 	.word	0x20000589
20001420:	20000595 	.word	0x20000595
20001424:	200005a1 	.word	0x200005a1
20001428:	200005bd 	.word	0x200005bd
2000142c:	200005d9 	.word	0x200005d9
20001430:	200005f5 	.word	0x200005f5
20001434:	20000619 	.word	0x20000619
20001438:	20000639 	.word	0x20000639
2000143c:	2000065d 	.word	0x2000065d
20001440:	2000066d 	.word	0x2000066d
20001444:	20000681 	.word	0x20000681
20001448:	2000068d 	.word	0x2000068d
2000144c:	200006a9 	.word	0x200006a9
20001450:	20000b57 	.word	0x20000b57
20001454:	20000b9f 	.word	0x20000b9f
20001458:	20000821 	.word	0x20000821
2000145c:	20000875 	.word	0x20000875
20001460:	200008b9 	.word	0x200008b9
20001464:	20000911 	.word	0x20000911
20001468:	20000ce1 	.word	0x20000ce1
2000146c:	20000cf1 	.word	0x20000cf1
20001470:	20000d01 	.word	0x20000d01
20001474:	20000d31 	.word	0x20000d31
20001478:	20000d51 	.word	0x20000d51
2000147c:	20000d71 	.word	0x20000d71
20001480:	200006b5 	.word	0x200006b5
20001484:	200006d1 	.word	0x200006d1
20001488:	200006ed 	.word	0x200006ed
2000148c:	20000711 	.word	0x20000711
20001490:	20000735 	.word	0x20000735
20001494:	2000075d 	.word	0x2000075d
20001498:	20000781 	.word	0x20000781
2000149c:	200007a9 	.word	0x200007a9
200014a0:	200007cd 	.word	0x200007cd
200014a4:	20000da5 	.word	0x20000da5
200014a8:	20000dd5 	.word	0x20000dd5

200014ac <memset>:
200014ac:	4402      	add	r2, r0
200014ae:	4290      	cmp	r0, r2
200014b0:	d20a      	bcs.n	200014c8 <memset+0x1c>
200014b2:	b410      	push	{r4}
200014b4:	4604      	mov	r4, r0
200014b6:	b2c9      	uxtb	r1, r1
200014b8:	4623      	mov	r3, r4
200014ba:	f803 1b01 	strb.w	r1, [r3], #1
200014be:	461c      	mov	r4, r3
200014c0:	429a      	cmp	r2, r3
200014c2:	d1f9      	bne.n	200014b8 <memset+0xc>
200014c4:	bc10      	pop	{r4}
200014c6:	4770      	bx	lr
200014c8:	4770      	bx	lr

200014ca <do_test>:
200014ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
200014ce:	4607      	mov	r7, r0
200014d0:	460e      	mov	r6, r1
200014d2:	4614      	mov	r4, r2
200014d4:	4b16      	ldr	r3, [pc, #88]	; (20001530 <do_test+0x66>)
200014d6:	2200      	movs	r2, #0
200014d8:	601a      	str	r2, [r3, #0]
200014da:	609a      	str	r2, [r3, #8]
200014dc:	2205      	movs	r2, #5
200014de:	601a      	str	r2, [r3, #0]
200014e0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
200014e4:	605a      	str	r2, [r3, #4]
200014e6:	689b      	ldr	r3, [r3, #8]
200014e8:	b923      	cbnz	r3, 200014f4 <do_test+0x2a>
200014ea:	4a11      	ldr	r2, [pc, #68]	; (20001530 <do_test+0x66>)
200014ec:	bf00      	nop
200014ee:	6893      	ldr	r3, [r2, #8]
200014f0:	2b00      	cmp	r3, #0
200014f2:	d0fb      	beq.n	200014ec <do_test+0x22>
200014f4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 20001530 <do_test+0x66>
200014f8:	f8d8 5008 	ldr.w	r5, [r8, #8]
200014fc:	2300      	movs	r3, #0
200014fe:	6033      	str	r3, [r6, #0]
20001500:	47b8      	blx	r7
20001502:	0064      	lsls	r4, r4, #1
20001504:	6833      	ldr	r3, [r6, #0]
20001506:	f8df 9030 	ldr.w	r9, [pc, #48]	; 20001538 <do_test+0x6e>
2000150a:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
2000150e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001512:	6033      	str	r3, [r6, #0]
20001514:	47b8      	blx	r7
20001516:	6833      	ldr	r3, [r6, #0]
20001518:	3401      	adds	r4, #1
2000151a:	f849 3024 	str.w	r3, [r9, r4, lsl #2]
2000151e:	f8d8 1008 	ldr.w	r1, [r8, #8]
20001522:	4a04      	ldr	r2, [pc, #16]	; (20001534 <do_test+0x6a>)
20001524:	6813      	ldr	r3, [r2, #0]
20001526:	442b      	add	r3, r5
20001528:	1a5b      	subs	r3, r3, r1
2000152a:	6013      	str	r3, [r2, #0]
2000152c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20001530:	e000e010 	.word	0xe000e010
20001534:	20001634 	.word	0x20001634
20001538:	20001638 	.word	0x20001638

2000153c <main>:
2000153c:	b500      	push	{lr}
2000153e:	f7ff fc59 	bl	20000df4 <run>
20001542:	bf00      	nop
20001544:	e7fd      	b.n	20001542 <main+0x6>
20001546:	bf00      	nop

20001548 <NMI_Handler>:
20001548:	e7fe      	b.n	20001548 <NMI_Handler>

2000154a <HardFault_Handler>:
2000154a:	e7fe      	b.n	2000154a <HardFault_Handler>

2000154c <MemManage_Handler>:
2000154c:	e7fe      	b.n	2000154c <MemManage_Handler>

2000154e <BusFault_Handler>:
2000154e:	e7fe      	b.n	2000154e <BusFault_Handler>

20001550 <UsageFault_Handler>:
20001550:	e7fe      	b.n	20001550 <UsageFault_Handler>

20001552 <Reserved1_Handler>:
20001552:	e7fe      	b.n	20001552 <Reserved1_Handler>

20001554 <Reserved2_Handler>:
20001554:	e7fe      	b.n	20001554 <Reserved2_Handler>

20001556 <Reserved3_Handler>:
20001556:	e7fe      	b.n	20001556 <Reserved3_Handler>

20001558 <Reserved4_Handler>:
20001558:	e7fe      	b.n	20001558 <Reserved4_Handler>

2000155a <SVCall_Handler>:
2000155a:	e7fe      	b.n	2000155a <SVCall_Handler>

2000155c <Debug_Handler>:
2000155c:	e7fe      	b.n	2000155c <Debug_Handler>

2000155e <Reserved5_Handler>:
2000155e:	e7fe      	b.n	2000155e <Reserved5_Handler>

20001560 <PendSV_Handler>:
20001560:	e7fe      	b.n	20001560 <PendSV_Handler>

20001562 <SysTick_Handler>:
20001562:	e7fe      	b.n	20001562 <SysTick_Handler>

20001564 <WWDG_IRQHandler>:
20001564:	e7fe      	b.n	20001564 <WWDG_IRQHandler>

20001566 <PVD_IRQHandler>:
20001566:	e7fe      	b.n	20001566 <PVD_IRQHandler>

20001568 <TAMPER_IRQHandler>:
20001568:	e7fe      	b.n	20001568 <TAMPER_IRQHandler>

2000156a <RTC_IRQHandler>:
2000156a:	e7fe      	b.n	2000156a <RTC_IRQHandler>

2000156c <FLASH_IRQHandler>:
2000156c:	e7fe      	b.n	2000156c <FLASH_IRQHandler>

2000156e <RCC_IRQHandler>:
2000156e:	e7fe      	b.n	2000156e <RCC_IRQHandler>

20001570 <EXTI0_IRQHandler>:
20001570:	e7fe      	b.n	20001570 <EXTI0_IRQHandler>

20001572 <EXTI1_IRQHandler>:
20001572:	e7fe      	b.n	20001572 <EXTI1_IRQHandler>

20001574 <EXTI2_IRQHandler>:
20001574:	e7fe      	b.n	20001574 <EXTI2_IRQHandler>

20001576 <EXTI3_IRQHandler>:
20001576:	e7fe      	b.n	20001576 <EXTI3_IRQHandler>

20001578 <EXTI4_IRQHandler>:
20001578:	e7fe      	b.n	20001578 <EXTI4_IRQHandler>

2000157a <DMA1_Channel1_IRQHandler>:
2000157a:	e7fe      	b.n	2000157a <DMA1_Channel1_IRQHandler>

2000157c <DMA1_Channel2_IRQHandler>:
2000157c:	e7fe      	b.n	2000157c <DMA1_Channel2_IRQHandler>

2000157e <DMA1_Channel3_IRQHandler>:
2000157e:	e7fe      	b.n	2000157e <DMA1_Channel3_IRQHandler>

20001580 <DMA1_Channel4_IRQHandler>:
20001580:	e7fe      	b.n	20001580 <DMA1_Channel4_IRQHandler>

20001582 <DMA1_Channel5_IRQHandler>:
20001582:	e7fe      	b.n	20001582 <DMA1_Channel5_IRQHandler>

20001584 <DMA1_Channel6_IRQHandler>:
20001584:	e7fe      	b.n	20001584 <DMA1_Channel6_IRQHandler>

20001586 <DMA1_Channel7_IRQHandler>:
20001586:	e7fe      	b.n	20001586 <DMA1_Channel7_IRQHandler>

20001588 <ADC1_2_IRQHandler>:
20001588:	e7fe      	b.n	20001588 <ADC1_2_IRQHandler>

2000158a <USB_HP_CAN1_TX_IRQHandle>:
2000158a:	e7fe      	b.n	2000158a <USB_HP_CAN1_TX_IRQHandle>

2000158c <USB_LP_CAN1_RX0_IRQHandler>:
2000158c:	e7fe      	b.n	2000158c <USB_LP_CAN1_RX0_IRQHandler>

2000158e <CAN1_RX1_IRQHandler>:
2000158e:	e7fe      	b.n	2000158e <CAN1_RX1_IRQHandler>

20001590 <CAN1_SCE_IRQHandler>:
20001590:	e7fe      	b.n	20001590 <CAN1_SCE_IRQHandler>

20001592 <EXTI9_5_IRQHandler>:
20001592:	e7fe      	b.n	20001592 <EXTI9_5_IRQHandler>

20001594 <TIM1_BRK_IRQHandler>:
20001594:	e7fe      	b.n	20001594 <TIM1_BRK_IRQHandler>

20001596 <TIM1_UP_IRQHandler>:
20001596:	e7fe      	b.n	20001596 <TIM1_UP_IRQHandler>

20001598 <TIM1_TRG_COM_IRQHandler>:
20001598:	e7fe      	b.n	20001598 <TIM1_TRG_COM_IRQHandler>

2000159a <TIM1_CC_IRQHandler>:
2000159a:	e7fe      	b.n	2000159a <TIM1_CC_IRQHandler>

2000159c <TIM2_IRQHandler>:
2000159c:	e7fe      	b.n	2000159c <TIM2_IRQHandler>

2000159e <TIM3_IRQHandler>:
2000159e:	e7fe      	b.n	2000159e <TIM3_IRQHandler>

200015a0 <TIM4_IRQHandler>:
200015a0:	e7fe      	b.n	200015a0 <TIM4_IRQHandler>

200015a2 <I2C1_EV_IRQHandler>:
200015a2:	e7fe      	b.n	200015a2 <I2C1_EV_IRQHandler>

200015a4 <I2C1_ER_IRQHandler>:
200015a4:	e7fe      	b.n	200015a4 <I2C1_ER_IRQHandler>

200015a6 <I2C2_EV_IRQHandler>:
200015a6:	e7fe      	b.n	200015a6 <I2C2_EV_IRQHandler>

200015a8 <I2C2_ER_IRQHandler>:
200015a8:	e7fe      	b.n	200015a8 <I2C2_ER_IRQHandler>

200015aa <SPI1_IRQHandler>:
200015aa:	e7fe      	b.n	200015aa <SPI1_IRQHandler>

200015ac <SPI2_IRQHandler>:
200015ac:	e7fe      	b.n	200015ac <SPI2_IRQHandler>

200015ae <USART1_IRQHandler>:
200015ae:	e7fe      	b.n	200015ae <USART1_IRQHandler>

200015b0 <USART2_IRQHandler>:
200015b0:	e7fe      	b.n	200015b0 <USART2_IRQHandler>

200015b2 <USART3_IRQHandler>:
200015b2:	e7fe      	b.n	200015b2 <USART3_IRQHandler>

200015b4 <EXTI15_10_IRQHandler>:
200015b4:	e7fe      	b.n	200015b4 <EXTI15_10_IRQHandler>

200015b6 <RTC_Alarm_IRQHandler>:
200015b6:	e7fe      	b.n	200015b6 <RTC_Alarm_IRQHandler>

200015b8 <USBWakeUp_IRQHandler>:
200015b8:	e7fe      	b.n	200015b8 <USBWakeUp_IRQHandler>

200015ba <init>:
200015ba:	4668      	mov	r0, sp
200015bc:	f020 0107 	bic.w	r1, r0, #7
200015c0:	468d      	mov	sp, r1
200015c2:	b501      	push	{r0, lr}
200015c4:	4a08      	ldr	r2, [pc, #32]	; (200015e8 <init+0x2e>)
200015c6:	4b09      	ldr	r3, [pc, #36]	; (200015ec <init+0x32>)
200015c8:	429a      	cmp	r2, r3
200015ca:	d004      	beq.n	200015d6 <init+0x1c>
200015cc:	2100      	movs	r1, #0
200015ce:	f803 1b01 	strb.w	r1, [r3], #1
200015d2:	4293      	cmp	r3, r2
200015d4:	d1fb      	bne.n	200015ce <init+0x14>
200015d6:	4a06      	ldr	r2, [pc, #24]	; (200015f0 <init+0x36>)
200015d8:	4b06      	ldr	r3, [pc, #24]	; (200015f4 <init+0x3a>)
200015da:	609a      	str	r2, [r3, #8]
200015dc:	f7ff ffae 	bl	2000153c <main>
200015e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200015e4:	4685      	mov	sp, r0
200015e6:	4770      	bx	lr
200015e8:	200019d8 	.word	0x200019d8
200015ec:	20001610 	.word	0x20001610
200015f0:	20000000 	.word	0x20000000
200015f4:	e000ed00 	.word	0xe000ed00

Disassembly of section .rodata:

200015f8 <.rodata>:
200015f8:	00000006 	.word	0x00000006
200015fc:	00000002 	.word	0x00000002
20001600:	3e000000 	.word	0x3e000000
20001604:	00000019 	.word	0x00000019
20001608:	3e000000 	.word	0x3e000000
2000160c:	00000019 	.word	0x00000019

Disassembly of section .bss:

20001610 <guard variable for run::serial2_config>:
	...

20001618 <run::serial2_config>:
20001618:	00000000                                ....

2000161c <guard variable for run::timer1_prescale>:
	...

20001624 <run::timer1_prescale>:
20001624:	00000000                                ....

20001628 <guard variable for run::gpio1_words_3>:
	...

20001630 <run::gpio1_words_3>:
20001630:	00000000                                ....

20001634 <elapsed_time>:
20001634:	00000000                                ....

20001638 <results>:
	...
