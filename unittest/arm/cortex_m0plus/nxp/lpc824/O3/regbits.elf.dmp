
O3/regbits.elf:     file format elf32-littlearm


Disassembly of section .text:

10000000 <INTERRUPT_VECTORS>:
10000000:	00 20 00 10 71 16 00 10 09 16 00 10 0d 16 00 10     . ..q...........
	...
1000002c:	11 16 00 10 00 00 00 00 00 00 00 00 15 16 00 10     ................
1000003c:	19 16 00 10 1d 16 00 10 21 16 00 10 00 00 00 00     ........!.......
1000004c:	25 16 00 10 29 16 00 10 2d 16 00 10 31 16 00 10     %...)...-...1...
1000005c:	35 16 00 10 39 16 00 10 3d 16 00 10 41 16 00 10     5...9...=...A...
1000006c:	45 16 00 10 00 00 00 00 49 16 00 10 4d 16 00 10     E.......I...M...
1000007c:	51 16 00 10 55 16 00 10 59 16 00 10 5d 16 00 10     Q...U...Y...]...
1000008c:	61 16 00 10 65 16 00 10 69 16 00 10 6d 16 00 10     a...e...i...m...

1000009c <zero_reg()>:
1000009c:	2200      	movs	r2, #0
1000009e:	4b01      	ldr	r3, [pc, #4]	; (100000a4 <zero_reg()+0x8>)
100000a0:	605a      	str	r2, [r3, #4]
100000a2:	4770      	bx	lr
100000a4:	10001dc0 	.word	0x10001dc0

100000a8 <zero_array()>:
100000a8:	2200      	movs	r2, #0
100000aa:	4b01      	ldr	r3, [pc, #4]	; (100000b0 <zero_array()+0x8>)
100000ac:	62da      	str	r2, [r3, #44]	; 0x2c
100000ae:	4770      	bx	lr
100000b0:	10001c00 	.word	0x10001c00

100000b4 <set_singl_bits_operator()>:
100000b4:	2140      	movs	r1, #64	; 0x40
100000b6:	4a02      	ldr	r2, [pc, #8]	; (100000c0 <set_singl_bits_operator()+0xc>)
100000b8:	6853      	ldr	r3, [r2, #4]
100000ba:	430b      	orrs	r3, r1
100000bc:	6053      	str	r3, [r2, #4]
100000be:	4770      	bx	lr
100000c0:	10001dc0 	.word	0x10001dc0

100000c4 <set_singl_bits_method()>:
100000c4:	2140      	movs	r1, #64	; 0x40
100000c6:	4a02      	ldr	r2, [pc, #8]	; (100000d0 <set_singl_bits_method()+0xc>)
100000c8:	6853      	ldr	r3, [r2, #4]
100000ca:	430b      	orrs	r3, r1
100000cc:	6053      	str	r3, [r2, #4]
100000ce:	4770      	bx	lr
100000d0:	10001dc0 	.word	0x10001dc0

100000d4 <clr_singl_bits_operator()>:
100000d4:	2140      	movs	r1, #64	; 0x40
100000d6:	4a02      	ldr	r2, [pc, #8]	; (100000e0 <clr_singl_bits_operator()+0xc>)
100000d8:	6853      	ldr	r3, [r2, #4]
100000da:	438b      	bics	r3, r1
100000dc:	6053      	str	r3, [r2, #4]
100000de:	4770      	bx	lr
100000e0:	10001dc0 	.word	0x10001dc0

100000e4 <clr_singl_bits_method()>:
100000e4:	2140      	movs	r1, #64	; 0x40
100000e6:	4a02      	ldr	r2, [pc, #8]	; (100000f0 <clr_singl_bits_method()+0xc>)
100000e8:	6853      	ldr	r3, [r2, #4]
100000ea:	438b      	bics	r3, r1
100000ec:	6053      	str	r3, [r2, #4]
100000ee:	4770      	bx	lr
100000f0:	10001dc0 	.word	0x10001dc0

100000f4 <set_singl_mskd_operator()>:
100000f4:	2102      	movs	r1, #2
100000f6:	4a02      	ldr	r2, [pc, #8]	; (10000100 <set_singl_mskd_operator()+0xc>)
100000f8:	6853      	ldr	r3, [r2, #4]
100000fa:	430b      	orrs	r3, r1
100000fc:	6053      	str	r3, [r2, #4]
100000fe:	4770      	bx	lr
10000100:	10001dc0 	.word	0x10001dc0

10000104 <set_singl_mskd_method()>:
10000104:	2102      	movs	r1, #2
10000106:	4a02      	ldr	r2, [pc, #8]	; (10000110 <set_singl_mskd_method()+0xc>)
10000108:	6853      	ldr	r3, [r2, #4]
1000010a:	430b      	orrs	r3, r1
1000010c:	6053      	str	r3, [r2, #4]
1000010e:	4770      	bx	lr
10000110:	10001dc0 	.word	0x10001dc0

10000114 <clr_singl_mskd_operator()>:
10000114:	2102      	movs	r1, #2
10000116:	4a02      	ldr	r2, [pc, #8]	; (10000120 <clr_singl_mskd_operator()+0xc>)
10000118:	6853      	ldr	r3, [r2, #4]
1000011a:	438b      	bics	r3, r1
1000011c:	6053      	str	r3, [r2, #4]
1000011e:	4770      	bx	lr
10000120:	10001dc0 	.word	0x10001dc0

10000124 <clr_singl_mskd_method()>:
10000124:	2102      	movs	r1, #2
10000126:	4a02      	ldr	r2, [pc, #8]	; (10000130 <clr_singl_mskd_method()+0xc>)
10000128:	6853      	ldr	r3, [r2, #4]
1000012a:	438b      	bics	r3, r1
1000012c:	6053      	str	r3, [r2, #4]
1000012e:	4770      	bx	lr
10000130:	10001dc0 	.word	0x10001dc0

10000134 <equ_singl_bits_operator()>:
10000134:	2240      	movs	r2, #64	; 0x40
10000136:	4b01      	ldr	r3, [pc, #4]	; (1000013c <equ_singl_bits_operator()+0x8>)
10000138:	605a      	str	r2, [r3, #4]
1000013a:	4770      	bx	lr
1000013c:	10001dc0 	.word	0x10001dc0

10000140 <equ_singl_bits_method()>:
10000140:	2240      	movs	r2, #64	; 0x40
10000142:	4b01      	ldr	r3, [pc, #4]	; (10000148 <equ_singl_bits_method()+0x8>)
10000144:	605a      	str	r2, [r3, #4]
10000146:	4770      	bx	lr
10000148:	10001dc0 	.word	0x10001dc0

1000014c <equ_singl_mskd_operator()>:
1000014c:	2202      	movs	r2, #2
1000014e:	4b01      	ldr	r3, [pc, #4]	; (10000154 <equ_singl_mskd_operator()+0x8>)
10000150:	605a      	str	r2, [r3, #4]
10000152:	4770      	bx	lr
10000154:	10001dc0 	.word	0x10001dc0

10000158 <equ_singl_mskd_method()>:
10000158:	2202      	movs	r2, #2
1000015a:	4b01      	ldr	r3, [pc, #4]	; (10000160 <equ_singl_mskd_method()+0x8>)
1000015c:	605a      	str	r2, [r3, #4]
1000015e:	4770      	bx	lr
10000160:	10001dc0 	.word	0x10001dc0

10000164 <flp_singl_bits_operator()>:
10000164:	2140      	movs	r1, #64	; 0x40
10000166:	4a02      	ldr	r2, [pc, #8]	; (10000170 <flp_singl_bits_operator()+0xc>)
10000168:	6853      	ldr	r3, [r2, #4]
1000016a:	404b      	eors	r3, r1
1000016c:	6053      	str	r3, [r2, #4]
1000016e:	4770      	bx	lr
10000170:	10001dc0 	.word	0x10001dc0

10000174 <flp_singl_bits_method()>:
10000174:	2140      	movs	r1, #64	; 0x40
10000176:	4a02      	ldr	r2, [pc, #8]	; (10000180 <flp_singl_bits_method()+0xc>)
10000178:	6853      	ldr	r3, [r2, #4]
1000017a:	404b      	eors	r3, r1
1000017c:	6053      	str	r3, [r2, #4]
1000017e:	4770      	bx	lr
10000180:	10001dc0 	.word	0x10001dc0

10000184 <flp_singl_mskd_operator()>:
10000184:	2102      	movs	r1, #2
10000186:	4a02      	ldr	r2, [pc, #8]	; (10000190 <flp_singl_mskd_operator()+0xc>)
10000188:	6853      	ldr	r3, [r2, #4]
1000018a:	404b      	eors	r3, r1
1000018c:	6053      	str	r3, [r2, #4]
1000018e:	4770      	bx	lr
10000190:	10001dc0 	.word	0x10001dc0

10000194 <flp_singl_mskd_method()>:
10000194:	2102      	movs	r1, #2
10000196:	4a02      	ldr	r2, [pc, #8]	; (100001a0 <flp_singl_mskd_method()+0xc>)
10000198:	6853      	ldr	r3, [r2, #4]
1000019a:	404b      	eors	r3, r1
1000019c:	6053      	str	r3, [r2, #4]
1000019e:	4770      	bx	lr
100001a0:	10001dc0 	.word	0x10001dc0

100001a4 <ins_singl_mskd_operator()>:
100001a4:	2106      	movs	r1, #6
100001a6:	4a03      	ldr	r2, [pc, #12]	; (100001b4 <ins_singl_mskd_operator()+0x10>)
100001a8:	6853      	ldr	r3, [r2, #4]
100001aa:	438b      	bics	r3, r1
100001ac:	3902      	subs	r1, #2
100001ae:	430b      	orrs	r3, r1
100001b0:	6053      	str	r3, [r2, #4]
100001b2:	4770      	bx	lr
100001b4:	10001dc0 	.word	0x10001dc0

100001b8 <ins_singl_mskd_method()>:
100001b8:	2106      	movs	r1, #6
100001ba:	4a03      	ldr	r2, [pc, #12]	; (100001c8 <ins_singl_mskd_method()+0x10>)
100001bc:	6853      	ldr	r3, [r2, #4]
100001be:	438b      	bics	r3, r1
100001c0:	3902      	subs	r1, #2
100001c2:	430b      	orrs	r3, r1
100001c4:	6053      	str	r3, [r2, #4]
100001c6:	4770      	bx	lr
100001c8:	10001dc0 	.word	0x10001dc0

100001cc <set_multi_bits_operator()>:
100001cc:	2121      	movs	r1, #33	; 0x21
100001ce:	4a02      	ldr	r2, [pc, #8]	; (100001d8 <set_multi_bits_operator()+0xc>)
100001d0:	6853      	ldr	r3, [r2, #4]
100001d2:	430b      	orrs	r3, r1
100001d4:	6053      	str	r3, [r2, #4]
100001d6:	4770      	bx	lr
100001d8:	10001dc0 	.word	0x10001dc0

100001dc <set_multi_bits_method()>:
100001dc:	2121      	movs	r1, #33	; 0x21
100001de:	4a02      	ldr	r2, [pc, #8]	; (100001e8 <set_multi_bits_method()+0xc>)
100001e0:	6853      	ldr	r3, [r2, #4]
100001e2:	430b      	orrs	r3, r1
100001e4:	6053      	str	r3, [r2, #4]
100001e6:	4770      	bx	lr
100001e8:	10001dc0 	.word	0x10001dc0

100001ec <ins_multi_mskd_operator()>:
100001ec:	4904      	ldr	r1, [pc, #16]	; (10000200 <ins_multi_mskd_operator()+0x14>)
100001ee:	4a05      	ldr	r2, [pc, #20]	; (10000204 <ins_multi_mskd_operator()+0x18>)
100001f0:	684b      	ldr	r3, [r1, #4]
100001f2:	401a      	ands	r2, r3
100001f4:	23c1      	movs	r3, #193	; 0xc1
100001f6:	005b      	lsls	r3, r3, #1
100001f8:	4313      	orrs	r3, r2
100001fa:	604b      	str	r3, [r1, #4]
100001fc:	4770      	bx	lr
100001fe:	46c0      	nop			; (mov r8, r8)
10000200:	10001dc0 	.word	0x10001dc0
10000204:	fffff079 	.word	0xfffff079

10000208 <ins_multi_mskd_method()>:
10000208:	4904      	ldr	r1, [pc, #16]	; (1000021c <ins_multi_mskd_method()+0x14>)
1000020a:	4a05      	ldr	r2, [pc, #20]	; (10000220 <ins_multi_mskd_method()+0x18>)
1000020c:	684b      	ldr	r3, [r1, #4]
1000020e:	401a      	ands	r2, r3
10000210:	23c1      	movs	r3, #193	; 0xc1
10000212:	005b      	lsls	r3, r3, #1
10000214:	4313      	orrs	r3, r2
10000216:	604b      	str	r3, [r1, #4]
10000218:	4770      	bx	lr
1000021a:	46c0      	nop			; (mov r8, r8)
1000021c:	10001dc0 	.word	0x10001dc0
10000220:	fffff079 	.word	0xfffff079

10000224 <equ_multi_bits_operator()>:
10000224:	2260      	movs	r2, #96	; 0x60
10000226:	4b01      	ldr	r3, [pc, #4]	; (1000022c <equ_multi_bits_operator()+0x8>)
10000228:	605a      	str	r2, [r3, #4]
1000022a:	4770      	bx	lr
1000022c:	10001dc0 	.word	0x10001dc0

10000230 <equ_multi_bits_method()>:
10000230:	2260      	movs	r2, #96	; 0x60
10000232:	4b01      	ldr	r3, [pc, #4]	; (10000238 <equ_multi_bits_method()+0x8>)
10000234:	605a      	str	r2, [r3, #4]
10000236:	4770      	bx	lr
10000238:	10001dc0 	.word	0x10001dc0

1000023c <equ_multi_mskd_operator()>:
1000023c:	22c2      	movs	r2, #194	; 0xc2
1000023e:	4b02      	ldr	r3, [pc, #8]	; (10000248 <equ_multi_mskd_operator()+0xc>)
10000240:	0092      	lsls	r2, r2, #2
10000242:	605a      	str	r2, [r3, #4]
10000244:	4770      	bx	lr
10000246:	46c0      	nop			; (mov r8, r8)
10000248:	10001dc0 	.word	0x10001dc0

1000024c <equ_multi_mskd_method()>:
1000024c:	22c2      	movs	r2, #194	; 0xc2
1000024e:	4b02      	ldr	r3, [pc, #8]	; (10000258 <equ_multi_mskd_method()+0xc>)
10000250:	0092      	lsls	r2, r2, #2
10000252:	605a      	str	r2, [r3, #4]
10000254:	4770      	bx	lr
10000256:	46c0      	nop			; (mov r8, r8)
10000258:	10001dc0 	.word	0x10001dc0

1000025c <equ_bits_mskd_operator()>:
1000025c:	2222      	movs	r2, #34	; 0x22
1000025e:	4b01      	ldr	r3, [pc, #4]	; (10000264 <equ_bits_mskd_operator()+0x8>)
10000260:	605a      	str	r2, [r3, #4]
10000262:	4770      	bx	lr
10000264:	10001dc0 	.word	0x10001dc0

10000268 <equ_bits_mskd_method()>:
10000268:	2222      	movs	r2, #34	; 0x22
1000026a:	4b01      	ldr	r3, [pc, #4]	; (10000270 <equ_bits_mskd_method()+0x8>)
1000026c:	605a      	str	r2, [r3, #4]
1000026e:	4770      	bx	lr
10000270:	10001dc0 	.word	0x10001dc0

10000274 <equ_mskd_bits_operator()>:
10000274:	2244      	movs	r2, #68	; 0x44
10000276:	4b01      	ldr	r3, [pc, #4]	; (1000027c <equ_mskd_bits_operator()+0x8>)
10000278:	605a      	str	r2, [r3, #4]
1000027a:	4770      	bx	lr
1000027c:	10001dc0 	.word	0x10001dc0

10000280 <equ_mskd_bits_method()>:
10000280:	2244      	movs	r2, #68	; 0x44
10000282:	4b01      	ldr	r3, [pc, #4]	; (10000288 <equ_mskd_bits_method()+0x8>)
10000284:	605a      	str	r2, [r3, #4]
10000286:	4770      	bx	lr
10000288:	10001dc0 	.word	0x10001dc0

1000028c <equ_bits_var()>:
1000028c:	2240      	movs	r2, #64	; 0x40
1000028e:	4b02      	ldr	r3, [pc, #8]	; (10000298 <equ_bits_var()+0xc>)
10000290:	605a      	str	r2, [r3, #4]
10000292:	3a3f      	subs	r2, #63	; 0x3f
10000294:	605a      	str	r2, [r3, #4]
10000296:	4770      	bx	lr
10000298:	10001dc0 	.word	0x10001dc0

1000029c <equ_mskd_var()>:
1000029c:	2202      	movs	r2, #2
1000029e:	4b03      	ldr	r3, [pc, #12]	; (100002ac <equ_mskd_var()+0x10>)
100002a0:	605a      	str	r2, [r3, #4]
100002a2:	327f      	adds	r2, #127	; 0x7f
100002a4:	32ff      	adds	r2, #255	; 0xff
100002a6:	605a      	str	r2, [r3, #4]
100002a8:	4770      	bx	lr
100002aa:	46c0      	nop			; (mov r8, r8)
100002ac:	10001dc0 	.word	0x10001dc0

100002b0 <cmp_equ_zero()>:
100002b0:	2200      	movs	r2, #0
100002b2:	4b07      	ldr	r3, [pc, #28]	; (100002d0 <cmp_equ_zero()+0x20>)
100002b4:	605a      	str	r2, [r3, #4]
100002b6:	685b      	ldr	r3, [r3, #4]
100002b8:	2b00      	cmp	r3, #0
100002ba:	d104      	bne.n	100002c6 <cmp_equ_zero()+0x16>
100002bc:	22e8      	movs	r2, #232	; 0xe8
100002be:	4b05      	ldr	r3, [pc, #20]	; (100002d4 <cmp_equ_zero()+0x24>)
100002c0:	0592      	lsls	r2, r2, #22
100002c2:	605a      	str	r2, [r3, #4]
100002c4:	4770      	bx	lr
100002c6:	2288      	movs	r2, #136	; 0x88
100002c8:	4b02      	ldr	r3, [pc, #8]	; (100002d4 <cmp_equ_zero()+0x24>)
100002ca:	0592      	lsls	r2, r2, #22
100002cc:	605a      	str	r2, [r3, #4]
100002ce:	e7f9      	b.n	100002c4 <cmp_equ_zero()+0x14>
100002d0:	10001dc0 	.word	0x10001dc0
100002d4:	10001d20 	.word	0x10001d20

100002d8 <cmp_neq_zero()>:
100002d8:	2200      	movs	r2, #0
100002da:	4b05      	ldr	r3, [pc, #20]	; (100002f0 <cmp_neq_zero()+0x18>)
100002dc:	605a      	str	r2, [r3, #4]
100002de:	685a      	ldr	r2, [r3, #4]
100002e0:	2a00      	cmp	r2, #0
100002e2:	d002      	beq.n	100002ea <cmp_neq_zero()+0x12>
100002e4:	2204      	movs	r2, #4
100002e6:	605a      	str	r2, [r3, #4]
100002e8:	4770      	bx	lr
100002ea:	2220      	movs	r2, #32
100002ec:	605a      	str	r2, [r3, #4]
100002ee:	e7fb      	b.n	100002e8 <cmp_neq_zero()+0x10>
100002f0:	10001dc0 	.word	0x10001dc0

100002f4 <cmp_equ_bits()>:
100002f4:	2340      	movs	r3, #64	; 0x40
100002f6:	4a07      	ldr	r2, [pc, #28]	; (10000314 <cmp_equ_bits()+0x20>)
100002f8:	6053      	str	r3, [r2, #4]
100002fa:	6852      	ldr	r2, [r2, #4]
100002fc:	4213      	tst	r3, r2
100002fe:	d004      	beq.n	1000030a <cmp_equ_bits()+0x16>
10000300:	22b0      	movs	r2, #176	; 0xb0
10000302:	4b05      	ldr	r3, [pc, #20]	; (10000318 <cmp_equ_bits()+0x24>)
10000304:	0552      	lsls	r2, r2, #21
10000306:	605a      	str	r2, [r3, #4]
10000308:	4770      	bx	lr
1000030a:	22d0      	movs	r2, #208	; 0xd0
1000030c:	4b02      	ldr	r3, [pc, #8]	; (10000318 <cmp_equ_bits()+0x24>)
1000030e:	0552      	lsls	r2, r2, #21
10000310:	605a      	str	r2, [r3, #4]
10000312:	e7f9      	b.n	10000308 <cmp_equ_bits()+0x14>
10000314:	10001dc0 	.word	0x10001dc0
10000318:	10001d20 	.word	0x10001d20

1000031c <cmp_neq_bits()>:
1000031c:	2240      	movs	r2, #64	; 0x40
1000031e:	4b05      	ldr	r3, [pc, #20]	; (10000334 <cmp_neq_bits()+0x18>)
10000320:	605a      	str	r2, [r3, #4]
10000322:	6859      	ldr	r1, [r3, #4]
10000324:	420a      	tst	r2, r1
10000326:	d102      	bne.n	1000032e <cmp_neq_bits()+0x12>
10000328:	3a3e      	subs	r2, #62	; 0x3e
1000032a:	605a      	str	r2, [r3, #4]
1000032c:	4770      	bx	lr
1000032e:	2220      	movs	r2, #32
10000330:	605a      	str	r2, [r3, #4]
10000332:	e7fb      	b.n	1000032c <cmp_neq_bits()+0x10>
10000334:	10001dc0 	.word	0x10001dc0

10000338 <cmp_equ_multi_bits()>:
10000338:	2360      	movs	r3, #96	; 0x60
1000033a:	4a08      	ldr	r2, [pc, #32]	; (1000035c <cmp_equ_multi_bits()+0x24>)
1000033c:	6053      	str	r3, [r2, #4]
1000033e:	6852      	ldr	r2, [r2, #4]
10000340:	4013      	ands	r3, r2
10000342:	2b60      	cmp	r3, #96	; 0x60
10000344:	d004      	beq.n	10000350 <cmp_equ_multi_bits()+0x18>
10000346:	22b8      	movs	r2, #184	; 0xb8
10000348:	4b05      	ldr	r3, [pc, #20]	; (10000360 <cmp_equ_multi_bits()+0x28>)
1000034a:	0592      	lsls	r2, r2, #22
1000034c:	605a      	str	r2, [r3, #4]
1000034e:	4770      	bx	lr
10000350:	2288      	movs	r2, #136	; 0x88
10000352:	4b03      	ldr	r3, [pc, #12]	; (10000360 <cmp_equ_multi_bits()+0x28>)
10000354:	0592      	lsls	r2, r2, #22
10000356:	605a      	str	r2, [r3, #4]
10000358:	e7f9      	b.n	1000034e <cmp_equ_multi_bits()+0x16>
1000035a:	46c0      	nop			; (mov r8, r8)
1000035c:	10001dc0 	.word	0x10001dc0
10000360:	10001d20 	.word	0x10001d20

10000364 <cmp_neq_multi_bits()>:
10000364:	2360      	movs	r3, #96	; 0x60
10000366:	4a08      	ldr	r2, [pc, #32]	; (10000388 <cmp_neq_multi_bits()+0x24>)
10000368:	6053      	str	r3, [r2, #4]
1000036a:	6852      	ldr	r2, [r2, #4]
1000036c:	4013      	ands	r3, r2
1000036e:	2b60      	cmp	r3, #96	; 0x60
10000370:	d004      	beq.n	1000037c <cmp_neq_multi_bits()+0x18>
10000372:	22e8      	movs	r2, #232	; 0xe8
10000374:	4b05      	ldr	r3, [pc, #20]	; (1000038c <cmp_neq_multi_bits()+0x28>)
10000376:	0592      	lsls	r2, r2, #22
10000378:	605a      	str	r2, [r3, #4]
1000037a:	4770      	bx	lr
1000037c:	22f8      	movs	r2, #248	; 0xf8
1000037e:	4b03      	ldr	r3, [pc, #12]	; (1000038c <cmp_neq_multi_bits()+0x28>)
10000380:	0592      	lsls	r2, r2, #22
10000382:	605a      	str	r2, [r3, #4]
10000384:	e7f9      	b.n	1000037a <cmp_neq_multi_bits()+0x16>
10000386:	46c0      	nop			; (mov r8, r8)
10000388:	10001dc0 	.word	0x10001dc0
1000038c:	10001d20 	.word	0x10001d20

10000390 <cmp_equ_mskd()>:
10000390:	22e8      	movs	r2, #232	; 0xe8
10000392:	4b0e      	ldr	r3, [pc, #56]	; (100003cc <cmp_equ_mskd()+0x3c>)
10000394:	0252      	lsls	r2, r2, #9
10000396:	605a      	str	r2, [r3, #4]
10000398:	22f8      	movs	r2, #248	; 0xf8
1000039a:	685b      	ldr	r3, [r3, #4]
1000039c:	0252      	lsls	r2, r2, #9
1000039e:	4013      	ands	r3, r2
100003a0:	2288      	movs	r2, #136	; 0x88
100003a2:	490b      	ldr	r1, [pc, #44]	; (100003d0 <cmp_equ_mskd()+0x40>)
100003a4:	0252      	lsls	r2, r2, #9
100003a6:	4293      	cmp	r3, r2
100003a8:	d007      	beq.n	100003ba <cmp_equ_mskd()+0x2a>
100003aa:	684b      	ldr	r3, [r1, #4]
100003ac:	4a09      	ldr	r2, [pc, #36]	; (100003d4 <cmp_equ_mskd()+0x44>)
100003ae:	401a      	ands	r2, r3
100003b0:	2388      	movs	r3, #136	; 0x88
100003b2:	059b      	lsls	r3, r3, #22
100003b4:	4313      	orrs	r3, r2
100003b6:	604b      	str	r3, [r1, #4]
100003b8:	4770      	bx	lr
100003ba:	684b      	ldr	r3, [r1, #4]
100003bc:	4a05      	ldr	r2, [pc, #20]	; (100003d4 <cmp_equ_mskd()+0x44>)
100003be:	401a      	ands	r2, r3
100003c0:	23e0      	movs	r3, #224	; 0xe0
100003c2:	051b      	lsls	r3, r3, #20
100003c4:	4313      	orrs	r3, r2
100003c6:	604b      	str	r3, [r1, #4]
100003c8:	e7f6      	b.n	100003b8 <cmp_equ_mskd()+0x28>
100003ca:	46c0      	nop			; (mov r8, r8)
100003cc:	10001dc0 	.word	0x10001dc0
100003d0:	10001d20 	.word	0x10001d20
100003d4:	c1ffffff 	.word	0xc1ffffff

100003d8 <cmp_neq_mskd()>:
100003d8:	22e8      	movs	r2, #232	; 0xe8
100003da:	21f8      	movs	r1, #248	; 0xf8
100003dc:	4b0a      	ldr	r3, [pc, #40]	; (10000408 <cmp_neq_mskd()+0x30>)
100003de:	0252      	lsls	r2, r2, #9
100003e0:	605a      	str	r2, [r3, #4]
100003e2:	685a      	ldr	r2, [r3, #4]
100003e4:	0249      	lsls	r1, r1, #9
100003e6:	400a      	ands	r2, r1
100003e8:	2188      	movs	r1, #136	; 0x88
100003ea:	0249      	lsls	r1, r1, #9
100003ec:	428a      	cmp	r2, r1
100003ee:	d006      	beq.n	100003fe <cmp_neq_mskd()+0x26>
100003f0:	2106      	movs	r1, #6
100003f2:	685a      	ldr	r2, [r3, #4]
100003f4:	438a      	bics	r2, r1
100003f6:	3902      	subs	r1, #2
100003f8:	430a      	orrs	r2, r1
100003fa:	605a      	str	r2, [r3, #4]
100003fc:	4770      	bx	lr
100003fe:	2140      	movs	r1, #64	; 0x40
10000400:	685a      	ldr	r2, [r3, #4]
10000402:	430a      	orrs	r2, r1
10000404:	605a      	str	r2, [r3, #4]
10000406:	e7f9      	b.n	100003fc <cmp_neq_mskd()+0x24>
10000408:	10001dc0 	.word	0x10001dc0

1000040c <cmp_equ_reg()>:
1000040c:	2222      	movs	r2, #34	; 0x22
1000040e:	4b07      	ldr	r3, [pc, #28]	; (1000042c <cmp_equ_reg()+0x20>)
10000410:	605a      	str	r2, [r3, #4]
10000412:	685b      	ldr	r3, [r3, #4]
10000414:	2b22      	cmp	r3, #34	; 0x22
10000416:	d004      	beq.n	10000422 <cmp_equ_reg()+0x16>
10000418:	22b8      	movs	r2, #184	; 0xb8
1000041a:	4b05      	ldr	r3, [pc, #20]	; (10000430 <cmp_equ_reg()+0x24>)
1000041c:	0592      	lsls	r2, r2, #22
1000041e:	605a      	str	r2, [r3, #4]
10000420:	4770      	bx	lr
10000422:	22a8      	movs	r2, #168	; 0xa8
10000424:	4b02      	ldr	r3, [pc, #8]	; (10000430 <cmp_equ_reg()+0x24>)
10000426:	0592      	lsls	r2, r2, #22
10000428:	605a      	str	r2, [r3, #4]
1000042a:	e7f9      	b.n	10000420 <cmp_equ_reg()+0x14>
1000042c:	10001dc0 	.word	0x10001dc0
10000430:	10001d20 	.word	0x10001d20

10000434 <cmp_neq_reg()>:
10000434:	2222      	movs	r2, #34	; 0x22
10000436:	4b05      	ldr	r3, [pc, #20]	; (1000044c <cmp_neq_reg()+0x18>)
10000438:	605a      	str	r2, [r3, #4]
1000043a:	685a      	ldr	r2, [r3, #4]
1000043c:	2a22      	cmp	r2, #34	; 0x22
1000043e:	d002      	beq.n	10000446 <cmp_neq_reg()+0x12>
10000440:	2202      	movs	r2, #2
10000442:	605a      	str	r2, [r3, #4]
10000444:	4770      	bx	lr
10000446:	2220      	movs	r2, #32
10000448:	605a      	str	r2, [r3, #4]
1000044a:	e7fb      	b.n	10000444 <cmp_neq_reg()+0x10>
1000044c:	10001dc0 	.word	0x10001dc0

10000450 <constexpr_bits_array()>:
10000450:	2206      	movs	r2, #6
10000452:	2180      	movs	r1, #128	; 0x80
10000454:	4b02      	ldr	r3, [pc, #8]	; (10000460 <constexpr_bits_array()+0x10>)
10000456:	0189      	lsls	r1, r1, #6
10000458:	62da      	str	r2, [r3, #44]	; 0x2c
1000045a:	329a      	adds	r2, #154	; 0x9a
1000045c:	5099      	str	r1, [r3, r2]
1000045e:	4770      	bx	lr
10000460:	10001c00 	.word	0x10001c00

10000464 <runtime_bits_array()>:
10000464:	2303      	movs	r3, #3
10000466:	4a05      	ldr	r2, [pc, #20]	; (1000047c <runtime_bits_array()+0x18>)
10000468:	b081      	sub	sp, #4
1000046a:	4694      	mov	ip, r2
1000046c:	2221      	movs	r2, #33	; 0x21
1000046e:	9300      	str	r3, [sp, #0]
10000470:	9b00      	ldr	r3, [sp, #0]
10000472:	009b      	lsls	r3, r3, #2
10000474:	4463      	add	r3, ip
10000476:	621a      	str	r2, [r3, #32]
10000478:	b001      	add	sp, #4
1000047a:	4770      	bx	lr
1000047c:	10001c00 	.word	0x10001c00

10000480 <prescaler_low()>:
10000480:	2277      	movs	r2, #119	; 0x77
10000482:	4b04      	ldr	r3, [pc, #16]	; (10000494 <prescaler_low()+0x14>)
10000484:	605a      	str	r2, [r3, #4]
10000486:	685a      	ldr	r2, [r3, #4]
10000488:	237f      	movs	r3, #127	; 0x7f
1000048a:	4013      	ands	r3, r2
1000048c:	4a02      	ldr	r2, [pc, #8]	; (10000498 <prescaler_low()+0x18>)
1000048e:	62d3      	str	r3, [r2, #44]	; 0x2c
10000490:	4770      	bx	lr
10000492:	46c0      	nop			; (mov r8, r8)
10000494:	10001d20 	.word	0x10001d20
10000498:	10001c00 	.word	0x10001c00

1000049c <prescaler_high()>:
1000049c:	22e8      	movs	r2, #232	; 0xe8
1000049e:	4b04      	ldr	r3, [pc, #16]	; (100004b0 <prescaler_high()+0x14>)
100004a0:	0592      	lsls	r2, r2, #22
100004a2:	605a      	str	r2, [r3, #4]
100004a4:	685b      	ldr	r3, [r3, #4]
100004a6:	4a03      	ldr	r2, [pc, #12]	; (100004b4 <prescaler_high()+0x18>)
100004a8:	009b      	lsls	r3, r3, #2
100004aa:	0edb      	lsrs	r3, r3, #27
100004ac:	62d3      	str	r3, [r2, #44]	; 0x2c
100004ae:	4770      	bx	lr
100004b0:	10001d20 	.word	0x10001d20
100004b4:	10001c00 	.word	0x10001c00

100004b8 <reg_mskd_lss()>:
100004b8:	22d8      	movs	r2, #216	; 0xd8
100004ba:	4b09      	ldr	r3, [pc, #36]	; (100004e0 <reg_mskd_lss()+0x28>)
100004bc:	0592      	lsls	r2, r2, #22
100004be:	605a      	str	r2, [r3, #4]
100004c0:	22f8      	movs	r2, #248	; 0xf8
100004c2:	685b      	ldr	r3, [r3, #4]
100004c4:	0592      	lsls	r2, r2, #22
100004c6:	4013      	ands	r3, r2
100004c8:	4a06      	ldr	r2, [pc, #24]	; (100004e4 <reg_mskd_lss()+0x2c>)
100004ca:	4293      	cmp	r3, r2
100004cc:	d803      	bhi.n	100004d6 <reg_mskd_lss()+0x1e>
100004ce:	2202      	movs	r2, #2
100004d0:	4b05      	ldr	r3, [pc, #20]	; (100004e8 <reg_mskd_lss()+0x30>)
100004d2:	605a      	str	r2, [r3, #4]
100004d4:	4770      	bx	lr
100004d6:	2204      	movs	r2, #4
100004d8:	4b03      	ldr	r3, [pc, #12]	; (100004e8 <reg_mskd_lss()+0x30>)
100004da:	605a      	str	r2, [r3, #4]
100004dc:	e7fa      	b.n	100004d4 <reg_mskd_lss()+0x1c>
100004de:	46c0      	nop			; (mov r8, r8)
100004e0:	10001d20 	.word	0x10001d20
100004e4:	37ffffff 	.word	0x37ffffff
100004e8:	10001dc0 	.word	0x10001dc0

100004ec <reg_mskd_leq()>:
100004ec:	21b8      	movs	r1, #184	; 0xb8
100004ee:	20f8      	movs	r0, #248	; 0xf8
100004f0:	4a0a      	ldr	r2, [pc, #40]	; (1000051c <reg_mskd_leq()+0x30>)
100004f2:	0589      	lsls	r1, r1, #22
100004f4:	6051      	str	r1, [r2, #4]
100004f6:	6853      	ldr	r3, [r2, #4]
100004f8:	0580      	lsls	r0, r0, #22
100004fa:	4003      	ands	r3, r0
100004fc:	428b      	cmp	r3, r1
100004fe:	d805      	bhi.n	1000050c <reg_mskd_leq()+0x20>
10000500:	6853      	ldr	r3, [r2, #4]
10000502:	4018      	ands	r0, r3
10000504:	23c0      	movs	r3, #192	; 0xc0
10000506:	059b      	lsls	r3, r3, #22
10000508:	4298      	cmp	r0, r3
1000050a:	d903      	bls.n	10000514 <reg_mskd_leq()+0x28>
1000050c:	2204      	movs	r2, #4
1000050e:	4b04      	ldr	r3, [pc, #16]	; (10000520 <reg_mskd_leq()+0x34>)
10000510:	605a      	str	r2, [r3, #4]
10000512:	4770      	bx	lr
10000514:	2202      	movs	r2, #2
10000516:	4b02      	ldr	r3, [pc, #8]	; (10000520 <reg_mskd_leq()+0x34>)
10000518:	605a      	str	r2, [r3, #4]
1000051a:	e7fa      	b.n	10000512 <reg_mskd_leq()+0x26>
1000051c:	10001d20 	.word	0x10001d20
10000520:	10001dc0 	.word	0x10001dc0

10000524 <reg_mskd_gtr()>:
10000524:	2298      	movs	r2, #152	; 0x98
10000526:	4b09      	ldr	r3, [pc, #36]	; (1000054c <reg_mskd_gtr()+0x28>)
10000528:	0592      	lsls	r2, r2, #22
1000052a:	605a      	str	r2, [r3, #4]
1000052c:	22f8      	movs	r2, #248	; 0xf8
1000052e:	685b      	ldr	r3, [r3, #4]
10000530:	0592      	lsls	r2, r2, #22
10000532:	4013      	ands	r3, r2
10000534:	2290      	movs	r2, #144	; 0x90
10000536:	0592      	lsls	r2, r2, #22
10000538:	4293      	cmp	r3, r2
1000053a:	d903      	bls.n	10000544 <reg_mskd_gtr()+0x20>
1000053c:	2202      	movs	r2, #2
1000053e:	4b04      	ldr	r3, [pc, #16]	; (10000550 <reg_mskd_gtr()+0x2c>)
10000540:	605a      	str	r2, [r3, #4]
10000542:	4770      	bx	lr
10000544:	2204      	movs	r2, #4
10000546:	4b02      	ldr	r3, [pc, #8]	; (10000550 <reg_mskd_gtr()+0x2c>)
10000548:	605a      	str	r2, [r3, #4]
1000054a:	e7fa      	b.n	10000542 <reg_mskd_gtr()+0x1e>
1000054c:	10001d20 	.word	0x10001d20
10000550:	10001dc0 	.word	0x10001dc0

10000554 <reg_mskd_geq()>:
10000554:	2388      	movs	r3, #136	; 0x88
10000556:	21f8      	movs	r1, #248	; 0xf8
10000558:	4a0a      	ldr	r2, [pc, #40]	; (10000584 <reg_mskd_geq()+0x30>)
1000055a:	059b      	lsls	r3, r3, #22
1000055c:	6053      	str	r3, [r2, #4]
1000055e:	6853      	ldr	r3, [r2, #4]
10000560:	4809      	ldr	r0, [pc, #36]	; (10000588 <reg_mskd_geq()+0x34>)
10000562:	0589      	lsls	r1, r1, #22
10000564:	400b      	ands	r3, r1
10000566:	4283      	cmp	r3, r0
10000568:	d904      	bls.n	10000574 <reg_mskd_geq()+0x20>
1000056a:	6853      	ldr	r3, [r2, #4]
1000056c:	4019      	ands	r1, r3
1000056e:	4b07      	ldr	r3, [pc, #28]	; (1000058c <reg_mskd_geq()+0x38>)
10000570:	4299      	cmp	r1, r3
10000572:	d803      	bhi.n	1000057c <reg_mskd_geq()+0x28>
10000574:	2204      	movs	r2, #4
10000576:	4b06      	ldr	r3, [pc, #24]	; (10000590 <reg_mskd_geq()+0x3c>)
10000578:	605a      	str	r2, [r3, #4]
1000057a:	4770      	bx	lr
1000057c:	2202      	movs	r2, #2
1000057e:	4b04      	ldr	r3, [pc, #16]	; (10000590 <reg_mskd_geq()+0x3c>)
10000580:	605a      	str	r2, [r3, #4]
10000582:	e7fa      	b.n	1000057a <reg_mskd_geq()+0x26>
10000584:	10001d20 	.word	0x10001d20
10000588:	1fffffff 	.word	0x1fffffff
1000058c:	21ffffff 	.word	0x21ffffff
10000590:	10001dc0 	.word	0x10001dc0

10000594 <pos_cmp_eq()>:
10000594:	2202      	movs	r2, #2
10000596:	4b01      	ldr	r3, [pc, #4]	; (1000059c <pos_cmp_eq()+0x8>)
10000598:	605a      	str	r2, [r3, #4]
1000059a:	4770      	bx	lr
1000059c:	10001dc0 	.word	0x10001dc0

100005a0 <pos_cmp_ne()>:
100005a0:	2202      	movs	r2, #2
100005a2:	4b01      	ldr	r3, [pc, #4]	; (100005a8 <pos_cmp_ne()+0x8>)
100005a4:	605a      	str	r2, [r3, #4]
100005a6:	4770      	bx	lr
100005a8:	10001dc0 	.word	0x10001dc0

100005ac <bits_extract_eq()>:
100005ac:	2240      	movs	r2, #64	; 0x40
100005ae:	4b05      	ldr	r3, [pc, #20]	; (100005c4 <bits_extract_eq()+0x18>)
100005b0:	605a      	str	r2, [r3, #4]
100005b2:	685a      	ldr	r2, [r3, #4]
100005b4:	2a40      	cmp	r2, #64	; 0x40
100005b6:	d002      	beq.n	100005be <bits_extract_eq()+0x12>
100005b8:	2204      	movs	r2, #4
100005ba:	605a      	str	r2, [r3, #4]
100005bc:	4770      	bx	lr
100005be:	3a3e      	subs	r2, #62	; 0x3e
100005c0:	605a      	str	r2, [r3, #4]
100005c2:	e7fb      	b.n	100005bc <bits_extract_eq()+0x10>
100005c4:	10001dc0 	.word	0x10001dc0

100005c8 <mskd_extract_eq()>:
100005c8:	2202      	movs	r2, #2
100005ca:	4b05      	ldr	r3, [pc, #20]	; (100005e0 <mskd_extract_eq()+0x18>)
100005cc:	605a      	str	r2, [r3, #4]
100005ce:	685a      	ldr	r2, [r3, #4]
100005d0:	2a02      	cmp	r2, #2
100005d2:	d002      	beq.n	100005da <mskd_extract_eq()+0x12>
100005d4:	2240      	movs	r2, #64	; 0x40
100005d6:	605a      	str	r2, [r3, #4]
100005d8:	4770      	bx	lr
100005da:	321e      	adds	r2, #30
100005dc:	605a      	str	r2, [r3, #4]
100005de:	e7fb      	b.n	100005d8 <mskd_extract_eq()+0x10>
100005e0:	10001dc0 	.word	0x10001dc0

100005e4 <mskd_extract_ne()>:
100005e4:	2204      	movs	r2, #4
100005e6:	4b05      	ldr	r3, [pc, #20]	; (100005fc <mskd_extract_ne()+0x18>)
100005e8:	605a      	str	r2, [r3, #4]
100005ea:	685a      	ldr	r2, [r3, #4]
100005ec:	2a04      	cmp	r2, #4
100005ee:	d002      	beq.n	100005f6 <mskd_extract_ne()+0x12>
100005f0:	2220      	movs	r2, #32
100005f2:	605a      	str	r2, [r3, #4]
100005f4:	4770      	bx	lr
100005f6:	323c      	adds	r2, #60	; 0x3c
100005f8:	605a      	str	r2, [r3, #4]
100005fa:	e7fb      	b.n	100005f4 <mskd_extract_ne()+0x10>
100005fc:	10001dc0 	.word	0x10001dc0

10000600 <mskd_extract_lss()>:
10000600:	22b0      	movs	r2, #176	; 0xb0
10000602:	4b07      	ldr	r3, [pc, #28]	; (10000620 <mskd_extract_lss()+0x20>)
10000604:	0552      	lsls	r2, r2, #21
10000606:	605a      	str	r2, [r3, #4]
10000608:	685a      	ldr	r2, [r3, #4]
1000060a:	4b06      	ldr	r3, [pc, #24]	; (10000624 <mskd_extract_lss()+0x24>)
1000060c:	429a      	cmp	r2, r3
1000060e:	d803      	bhi.n	10000618 <mskd_extract_lss()+0x18>
10000610:	2220      	movs	r2, #32
10000612:	4b05      	ldr	r3, [pc, #20]	; (10000628 <mskd_extract_lss()+0x28>)
10000614:	605a      	str	r2, [r3, #4]
10000616:	4770      	bx	lr
10000618:	2240      	movs	r2, #64	; 0x40
1000061a:	4b03      	ldr	r3, [pc, #12]	; (10000628 <mskd_extract_lss()+0x28>)
1000061c:	605a      	str	r2, [r3, #4]
1000061e:	e7fa      	b.n	10000616 <mskd_extract_lss()+0x16>
10000620:	10001d20 	.word	0x10001d20
10000624:	17ffffff 	.word	0x17ffffff
10000628:	10001dc0 	.word	0x10001dc0

1000062c <mskd_extract_leq()>:
1000062c:	23b8      	movs	r3, #184	; 0xb8
1000062e:	4a07      	ldr	r2, [pc, #28]	; (1000064c <mskd_extract_leq()+0x20>)
10000630:	059b      	lsls	r3, r3, #22
10000632:	6053      	str	r3, [r2, #4]
10000634:	6852      	ldr	r2, [r2, #4]
10000636:	429a      	cmp	r2, r3
10000638:	d803      	bhi.n	10000642 <mskd_extract_leq()+0x16>
1000063a:	2220      	movs	r2, #32
1000063c:	4b04      	ldr	r3, [pc, #16]	; (10000650 <mskd_extract_leq()+0x24>)
1000063e:	605a      	str	r2, [r3, #4]
10000640:	4770      	bx	lr
10000642:	2240      	movs	r2, #64	; 0x40
10000644:	4b02      	ldr	r3, [pc, #8]	; (10000650 <mskd_extract_leq()+0x24>)
10000646:	605a      	str	r2, [r3, #4]
10000648:	e7fa      	b.n	10000640 <mskd_extract_leq()+0x14>
1000064a:	46c0      	nop			; (mov r8, r8)
1000064c:	10001d20 	.word	0x10001d20
10000650:	10001dc0 	.word	0x10001dc0

10000654 <mskd_extract_gtr()>:
10000654:	2298      	movs	r2, #152	; 0x98
10000656:	4b08      	ldr	r3, [pc, #32]	; (10000678 <mskd_extract_gtr()+0x24>)
10000658:	0592      	lsls	r2, r2, #22
1000065a:	605a      	str	r2, [r3, #4]
1000065c:	685a      	ldr	r2, [r3, #4]
1000065e:	2390      	movs	r3, #144	; 0x90
10000660:	059b      	lsls	r3, r3, #22
10000662:	429a      	cmp	r2, r3
10000664:	d903      	bls.n	1000066e <mskd_extract_gtr()+0x1a>
10000666:	2220      	movs	r2, #32
10000668:	4b04      	ldr	r3, [pc, #16]	; (1000067c <mskd_extract_gtr()+0x28>)
1000066a:	605a      	str	r2, [r3, #4]
1000066c:	4770      	bx	lr
1000066e:	2240      	movs	r2, #64	; 0x40
10000670:	4b02      	ldr	r3, [pc, #8]	; (1000067c <mskd_extract_gtr()+0x28>)
10000672:	605a      	str	r2, [r3, #4]
10000674:	e7fa      	b.n	1000066c <mskd_extract_gtr()+0x18>
10000676:	46c0      	nop			; (mov r8, r8)
10000678:	10001d20 	.word	0x10001d20
1000067c:	10001dc0 	.word	0x10001dc0

10000680 <set_bits_global()>:
10000680:	2140      	movs	r1, #64	; 0x40
10000682:	4a02      	ldr	r2, [pc, #8]	; (1000068c <set_bits_global()+0xc>)
10000684:	6853      	ldr	r3, [r2, #4]
10000686:	430b      	orrs	r3, r1
10000688:	6053      	str	r3, [r2, #4]
1000068a:	4770      	bx	lr
1000068c:	10001dc0 	.word	0x10001dc0

10000690 <ins_mskd_global()>:
10000690:	2106      	movs	r1, #6
10000692:	4a03      	ldr	r2, [pc, #12]	; (100006a0 <ins_mskd_global()+0x10>)
10000694:	6853      	ldr	r3, [r2, #4]
10000696:	438b      	bics	r3, r1
10000698:	3904      	subs	r1, #4
1000069a:	430b      	orrs	r3, r1
1000069c:	6053      	str	r3, [r2, #4]
1000069e:	4770      	bx	lr
100006a0:	10001dc0 	.word	0x10001dc0

100006a4 <assign_array_global()>:
100006a4:	22bd      	movs	r2, #189	; 0xbd
100006a6:	4b01      	ldr	r3, [pc, #4]	; (100006ac <assign_array_global()+0x8>)
100006a8:	601a      	str	r2, [r3, #0]
100006aa:	4770      	bx	lr
100006ac:	10001c2c 	.word	0x10001c2c

100006b0 <shifted_global()>:
100006b0:	22b8      	movs	r2, #184	; 0xb8
100006b2:	4b04      	ldr	r3, [pc, #16]	; (100006c4 <shifted_global()+0x14>)
100006b4:	0592      	lsls	r2, r2, #22
100006b6:	605a      	str	r2, [r3, #4]
100006b8:	685b      	ldr	r3, [r3, #4]
100006ba:	4a03      	ldr	r2, [pc, #12]	; (100006c8 <shifted_global()+0x18>)
100006bc:	009b      	lsls	r3, r3, #2
100006be:	0edb      	lsrs	r3, r3, #27
100006c0:	62d3      	str	r3, [r2, #44]	; 0x2c
100006c2:	4770      	bx	lr
100006c4:	10001d20 	.word	0x10001d20
100006c8:	10001c00 	.word	0x10001c00

100006cc <assign_register_global()>:
100006cc:	2204      	movs	r2, #4
100006ce:	4b01      	ldr	r3, [pc, #4]	; (100006d4 <assign_register_global()+0x8>)
100006d0:	605a      	str	r2, [r3, #4]
100006d2:	4770      	bx	lr
100006d4:	10001dc0 	.word	0x10001dc0

100006d8 <copy_bits_equ()>:
100006d8:	2240      	movs	r2, #64	; 0x40
100006da:	4b05      	ldr	r3, [pc, #20]	; (100006f0 <copy_bits_equ()+0x18>)
100006dc:	605a      	str	r2, [r3, #4]
100006de:	6859      	ldr	r1, [r3, #4]
100006e0:	420a      	tst	r2, r1
100006e2:	d002      	beq.n	100006ea <copy_bits_equ()+0x12>
100006e4:	3a3e      	subs	r2, #62	; 0x3e
100006e6:	605a      	str	r2, [r3, #4]
100006e8:	4770      	bx	lr
100006ea:	2204      	movs	r2, #4
100006ec:	605a      	str	r2, [r3, #4]
100006ee:	e7fb      	b.n	100006e8 <copy_bits_equ()+0x10>
100006f0:	10001dc0 	.word	0x10001dc0

100006f4 <copy_bits_neq()>:
100006f4:	2240      	movs	r2, #64	; 0x40
100006f6:	4b05      	ldr	r3, [pc, #20]	; (1000070c <copy_bits_neq()+0x18>)
100006f8:	605a      	str	r2, [r3, #4]
100006fa:	6859      	ldr	r1, [r3, #4]
100006fc:	420a      	tst	r2, r1
100006fe:	d102      	bne.n	10000706 <copy_bits_neq()+0x12>
10000700:	3a3e      	subs	r2, #62	; 0x3e
10000702:	605a      	str	r2, [r3, #4]
10000704:	4770      	bx	lr
10000706:	2204      	movs	r2, #4
10000708:	605a      	str	r2, [r3, #4]
1000070a:	e7fb      	b.n	10000704 <copy_bits_neq()+0x10>
1000070c:	10001dc0 	.word	0x10001dc0

10000710 <copy_mskd_equ()>:
10000710:	22b0      	movs	r2, #176	; 0xb0
10000712:	21f8      	movs	r1, #248	; 0xf8
10000714:	4b07      	ldr	r3, [pc, #28]	; (10000734 <copy_mskd_equ()+0x24>)
10000716:	0552      	lsls	r2, r2, #21
10000718:	605a      	str	r2, [r3, #4]
1000071a:	685b      	ldr	r3, [r3, #4]
1000071c:	0589      	lsls	r1, r1, #22
1000071e:	400b      	ands	r3, r1
10000720:	4293      	cmp	r3, r2
10000722:	d003      	beq.n	1000072c <copy_mskd_equ()+0x1c>
10000724:	2204      	movs	r2, #4
10000726:	4b04      	ldr	r3, [pc, #16]	; (10000738 <copy_mskd_equ()+0x28>)
10000728:	605a      	str	r2, [r3, #4]
1000072a:	4770      	bx	lr
1000072c:	2202      	movs	r2, #2
1000072e:	4b02      	ldr	r3, [pc, #8]	; (10000738 <copy_mskd_equ()+0x28>)
10000730:	605a      	str	r2, [r3, #4]
10000732:	e7fa      	b.n	1000072a <copy_mskd_equ()+0x1a>
10000734:	10001d20 	.word	0x10001d20
10000738:	10001dc0 	.word	0x10001dc0

1000073c <copy_mskd_neq()>:
1000073c:	22d0      	movs	r2, #208	; 0xd0
1000073e:	21f8      	movs	r1, #248	; 0xf8
10000740:	4b07      	ldr	r3, [pc, #28]	; (10000760 <copy_mskd_neq()+0x24>)
10000742:	0552      	lsls	r2, r2, #21
10000744:	605a      	str	r2, [r3, #4]
10000746:	685b      	ldr	r3, [r3, #4]
10000748:	0589      	lsls	r1, r1, #22
1000074a:	400b      	ands	r3, r1
1000074c:	4293      	cmp	r3, r2
1000074e:	d003      	beq.n	10000758 <copy_mskd_neq()+0x1c>
10000750:	2202      	movs	r2, #2
10000752:	4b04      	ldr	r3, [pc, #16]	; (10000764 <copy_mskd_neq()+0x28>)
10000754:	605a      	str	r2, [r3, #4]
10000756:	4770      	bx	lr
10000758:	2204      	movs	r2, #4
1000075a:	4b02      	ldr	r3, [pc, #8]	; (10000764 <copy_mskd_neq()+0x28>)
1000075c:	605a      	str	r2, [r3, #4]
1000075e:	e7fa      	b.n	10000756 <copy_mskd_neq()+0x1a>
10000760:	10001d20 	.word	0x10001d20
10000764:	10001dc0 	.word	0x10001dc0

10000768 <copy_mskd_lss()>:
10000768:	22d8      	movs	r2, #216	; 0xd8
1000076a:	4b09      	ldr	r3, [pc, #36]	; (10000790 <copy_mskd_lss()+0x28>)
1000076c:	0592      	lsls	r2, r2, #22
1000076e:	605a      	str	r2, [r3, #4]
10000770:	22f8      	movs	r2, #248	; 0xf8
10000772:	685b      	ldr	r3, [r3, #4]
10000774:	0592      	lsls	r2, r2, #22
10000776:	4013      	ands	r3, r2
10000778:	4a06      	ldr	r2, [pc, #24]	; (10000794 <copy_mskd_lss()+0x2c>)
1000077a:	4293      	cmp	r3, r2
1000077c:	d803      	bhi.n	10000786 <copy_mskd_lss()+0x1e>
1000077e:	2202      	movs	r2, #2
10000780:	4b05      	ldr	r3, [pc, #20]	; (10000798 <copy_mskd_lss()+0x30>)
10000782:	605a      	str	r2, [r3, #4]
10000784:	4770      	bx	lr
10000786:	2204      	movs	r2, #4
10000788:	4b03      	ldr	r3, [pc, #12]	; (10000798 <copy_mskd_lss()+0x30>)
1000078a:	605a      	str	r2, [r3, #4]
1000078c:	e7fa      	b.n	10000784 <copy_mskd_lss()+0x1c>
1000078e:	46c0      	nop			; (mov r8, r8)
10000790:	10001d20 	.word	0x10001d20
10000794:	37ffffff 	.word	0x37ffffff
10000798:	10001dc0 	.word	0x10001dc0

1000079c <copy_mskd_leq()>:
1000079c:	22b8      	movs	r2, #184	; 0xb8
1000079e:	21f8      	movs	r1, #248	; 0xf8
100007a0:	4b07      	ldr	r3, [pc, #28]	; (100007c0 <copy_mskd_leq()+0x24>)
100007a2:	0592      	lsls	r2, r2, #22
100007a4:	605a      	str	r2, [r3, #4]
100007a6:	685b      	ldr	r3, [r3, #4]
100007a8:	0589      	lsls	r1, r1, #22
100007aa:	400b      	ands	r3, r1
100007ac:	4293      	cmp	r3, r2
100007ae:	d803      	bhi.n	100007b8 <copy_mskd_leq()+0x1c>
100007b0:	2202      	movs	r2, #2
100007b2:	4b04      	ldr	r3, [pc, #16]	; (100007c4 <copy_mskd_leq()+0x28>)
100007b4:	605a      	str	r2, [r3, #4]
100007b6:	4770      	bx	lr
100007b8:	2204      	movs	r2, #4
100007ba:	4b02      	ldr	r3, [pc, #8]	; (100007c4 <copy_mskd_leq()+0x28>)
100007bc:	605a      	str	r2, [r3, #4]
100007be:	e7fa      	b.n	100007b6 <copy_mskd_leq()+0x1a>
100007c0:	10001d20 	.word	0x10001d20
100007c4:	10001dc0 	.word	0x10001dc0

100007c8 <copy_mskd_gtr()>:
100007c8:	2298      	movs	r2, #152	; 0x98
100007ca:	4b09      	ldr	r3, [pc, #36]	; (100007f0 <copy_mskd_gtr()+0x28>)
100007cc:	0592      	lsls	r2, r2, #22
100007ce:	605a      	str	r2, [r3, #4]
100007d0:	22f8      	movs	r2, #248	; 0xf8
100007d2:	685b      	ldr	r3, [r3, #4]
100007d4:	0592      	lsls	r2, r2, #22
100007d6:	4013      	ands	r3, r2
100007d8:	2290      	movs	r2, #144	; 0x90
100007da:	0592      	lsls	r2, r2, #22
100007dc:	4293      	cmp	r3, r2
100007de:	d903      	bls.n	100007e8 <copy_mskd_gtr()+0x20>
100007e0:	2202      	movs	r2, #2
100007e2:	4b04      	ldr	r3, [pc, #16]	; (100007f4 <copy_mskd_gtr()+0x2c>)
100007e4:	605a      	str	r2, [r3, #4]
100007e6:	4770      	bx	lr
100007e8:	2204      	movs	r2, #4
100007ea:	4b02      	ldr	r3, [pc, #8]	; (100007f4 <copy_mskd_gtr()+0x2c>)
100007ec:	605a      	str	r2, [r3, #4]
100007ee:	e7fa      	b.n	100007e6 <copy_mskd_gtr()+0x1e>
100007f0:	10001d20 	.word	0x10001d20
100007f4:	10001dc0 	.word	0x10001dc0

100007f8 <copy_mskd_geq()>:
100007f8:	2288      	movs	r2, #136	; 0x88
100007fa:	4b09      	ldr	r3, [pc, #36]	; (10000820 <copy_mskd_geq()+0x28>)
100007fc:	0592      	lsls	r2, r2, #22
100007fe:	605a      	str	r2, [r3, #4]
10000800:	22f8      	movs	r2, #248	; 0xf8
10000802:	685b      	ldr	r3, [r3, #4]
10000804:	0592      	lsls	r2, r2, #22
10000806:	4013      	ands	r3, r2
10000808:	4a06      	ldr	r2, [pc, #24]	; (10000824 <copy_mskd_geq()+0x2c>)
1000080a:	4293      	cmp	r3, r2
1000080c:	d803      	bhi.n	10000816 <copy_mskd_geq()+0x1e>
1000080e:	2204      	movs	r2, #4
10000810:	4b05      	ldr	r3, [pc, #20]	; (10000828 <copy_mskd_geq()+0x30>)
10000812:	605a      	str	r2, [r3, #4]
10000814:	4770      	bx	lr
10000816:	2202      	movs	r2, #2
10000818:	4b03      	ldr	r3, [pc, #12]	; (10000828 <copy_mskd_geq()+0x30>)
1000081a:	605a      	str	r2, [r3, #4]
1000081c:	e7fa      	b.n	10000814 <copy_mskd_geq()+0x1c>
1000081e:	46c0      	nop			; (mov r8, r8)
10000820:	10001d20 	.word	0x10001d20
10000824:	21ffffff 	.word	0x21ffffff
10000828:	10001dc0 	.word	0x10001dc0

1000082c <copy_shifted()>:
1000082c:	22b0      	movs	r2, #176	; 0xb0
1000082e:	4b08      	ldr	r3, [pc, #32]	; (10000850 <copy_shifted()+0x24>)
10000830:	0552      	lsls	r2, r2, #21
10000832:	605a      	str	r2, [r3, #4]
10000834:	685b      	ldr	r3, [r3, #4]
10000836:	009b      	lsls	r3, r3, #2
10000838:	0edb      	lsrs	r3, r3, #27
1000083a:	2b0b      	cmp	r3, #11
1000083c:	d003      	beq.n	10000846 <copy_shifted()+0x1a>
1000083e:	2204      	movs	r2, #4
10000840:	4b04      	ldr	r3, [pc, #16]	; (10000854 <copy_shifted()+0x28>)
10000842:	605a      	str	r2, [r3, #4]
10000844:	4770      	bx	lr
10000846:	2202      	movs	r2, #2
10000848:	4b02      	ldr	r3, [pc, #8]	; (10000854 <copy_shifted()+0x28>)
1000084a:	605a      	str	r2, [r3, #4]
1000084c:	e7fa      	b.n	10000844 <copy_shifted()+0x18>
1000084e:	46c0      	nop			; (mov r8, r8)
10000850:	10001d20 	.word	0x10001d20
10000854:	10001dc0 	.word	0x10001dc0

10000858 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>:
10000858:	2266      	movs	r2, #102	; 0x66
1000085a:	4b01      	ldr	r3, [pc, #4]	; (10000860 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]+0x8>)
1000085c:	62da      	str	r2, [r3, #44]	; 0x2c
1000085e:	4770      	bx	lr
10000860:	10001c00 	.word	0x10001c00

10000864 <call_pos_ref()>:
10000864:	b510      	push	{r4, lr}
10000866:	2405      	movs	r4, #5
10000868:	b081      	sub	sp, #4
1000086a:	4668      	mov	r0, sp
1000086c:	9400      	str	r4, [sp, #0]
1000086e:	f7ff fff3 	bl	10000858 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
10000872:	4668      	mov	r0, sp
10000874:	9400      	str	r4, [sp, #0]
10000876:	f7ff ffef 	bl	10000858 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
1000087a:	b001      	add	sp, #4
1000087c:	bd10      	pop	{r4, pc}
1000087e:	46c0      	nop			; (mov r8, r8)

10000880 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>:
10000880:	2277      	movs	r2, #119	; 0x77
10000882:	4b01      	ldr	r3, [pc, #4]	; (10000888 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]+0x8>)
10000884:	62da      	str	r2, [r3, #44]	; 0x2c
10000886:	4770      	bx	lr
10000888:	10001c00 	.word	0x10001c00

1000088c <call_pos_ref_global()>:
1000088c:	2306      	movs	r3, #6
1000088e:	b500      	push	{lr}
10000890:	b081      	sub	sp, #4
10000892:	4668      	mov	r0, sp
10000894:	9300      	str	r3, [sp, #0]
10000896:	f7ff fff3 	bl	10000880 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>
1000089a:	b001      	add	sp, #4
1000089c:	bd00      	pop	{pc}
1000089e:	46c0      	nop			; (mov r8, r8)

100008a0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>:
100008a0:	2233      	movs	r2, #51	; 0x33
100008a2:	4b01      	ldr	r3, [pc, #4]	; (100008a8 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]+0x8>)
100008a4:	62da      	str	r2, [r3, #44]	; 0x2c
100008a6:	4770      	bx	lr
100008a8:	10001c00 	.word	0x10001c00

100008ac <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>:
100008ac:	2244      	movs	r2, #68	; 0x44
100008ae:	4b01      	ldr	r3, [pc, #4]	; (100008b4 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]+0x8>)
100008b0:	62da      	str	r2, [r3, #44]	; 0x2c
100008b2:	4770      	bx	lr
100008b4:	10001c00 	.word	0x10001c00

100008b8 <call_pos_val()>:
100008b8:	b500      	push	{lr}
100008ba:	2005      	movs	r0, #5
100008bc:	f7ff fff0 	bl	100008a0 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>
100008c0:	2006      	movs	r0, #6
100008c2:	f7ff fff3 	bl	100008ac <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>
100008c6:	bd00      	pop	{pc}

100008c8 <call_pos_val_global()>:
100008c8:	b500      	push	{lr}
100008ca:	2006      	movs	r0, #6
100008cc:	f7ff ffee 	bl	100008ac <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>
100008d0:	bd00      	pop	{pc}
100008d2:	46c0      	nop			; (mov r8, r8)

100008d4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
100008d4:	2106      	movs	r1, #6
100008d6:	4a03      	ldr	r2, [pc, #12]	; (100008e4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x10>)
100008d8:	6853      	ldr	r3, [r2, #4]
100008da:	438b      	bics	r3, r1
100008dc:	3904      	subs	r1, #4
100008de:	430b      	orrs	r3, r1
100008e0:	6053      	str	r3, [r2, #4]
100008e2:	4770      	bx	lr
100008e4:	10001dc0 	.word	0x10001dc0

100008e8 <call_mskd_val_const()>:
100008e8:	b500      	push	{lr}
100008ea:	2006      	movs	r0, #6
100008ec:	2102      	movs	r1, #2
100008ee:	f7ff fff1 	bl	100008d4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
100008f2:	bd00      	pop	{pc}

100008f4 <call_mskd_val_var()>:
100008f4:	b500      	push	{lr}
100008f6:	2006      	movs	r0, #6
100008f8:	2102      	movs	r1, #2
100008fa:	f7ff ffeb 	bl	100008d4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
100008fe:	bd00      	pop	{pc}

10000900 <call_mskd_val_global()>:
10000900:	b500      	push	{lr}
10000902:	2006      	movs	r0, #6
10000904:	2102      	movs	r1, #2
10000906:	f7ff ffe5 	bl	100008d4 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
1000090a:	bd00      	pop	{pc}

1000090c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
1000090c:	2240      	movs	r2, #64	; 0x40
1000090e:	4b01      	ldr	r3, [pc, #4]	; (10000914 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
10000910:	605a      	str	r2, [r3, #4]
10000912:	4770      	bx	lr
10000914:	10001dc0 	.word	0x10001dc0

10000918 <call_bits_val_const()>:
10000918:	b500      	push	{lr}
1000091a:	2040      	movs	r0, #64	; 0x40
1000091c:	f7ff fff6 	bl	1000090c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
10000920:	bd00      	pop	{pc}
10000922:	46c0      	nop			; (mov r8, r8)

10000924 <call_bits_val_var()>:
10000924:	b500      	push	{lr}
10000926:	2040      	movs	r0, #64	; 0x40
10000928:	f7ff fff0 	bl	1000090c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
1000092c:	bd00      	pop	{pc}
1000092e:	46c0      	nop			; (mov r8, r8)

10000930 <call_bits_val_global()>:
10000930:	b500      	push	{lr}
10000932:	2040      	movs	r0, #64	; 0x40
10000934:	f7ff ffea 	bl	1000090c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
10000938:	bd00      	pop	{pc}
1000093a:	46c0      	nop			; (mov r8, r8)

1000093c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
1000093c:	4b01      	ldr	r3, [pc, #4]	; (10000944 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0x8>)
1000093e:	6058      	str	r0, [r3, #4]
10000940:	4770      	bx	lr
10000942:	46c0      	nop			; (mov r8, r8)
10000944:	10001dc0 	.word	0x10001dc0

10000948 <call_bits_val_zero()>:
10000948:	b500      	push	{lr}
1000094a:	2000      	movs	r0, #0
1000094c:	f7ff fff6 	bl	1000093c <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
10000950:	bd00      	pop	{pc}
10000952:	46c0      	nop			; (mov r8, r8)

10000954 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
10000954:	6802      	ldr	r2, [r0, #0]
10000956:	4b01      	ldr	r3, [pc, #4]	; (1000095c <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0x8>)
10000958:	605a      	str	r2, [r3, #4]
1000095a:	4770      	bx	lr
1000095c:	10001dc0 	.word	0x10001dc0

10000960 <call_bits_ref_var()>:
10000960:	2301      	movs	r3, #1
10000962:	b500      	push	{lr}
10000964:	b081      	sub	sp, #4
10000966:	4668      	mov	r0, sp
10000968:	9300      	str	r3, [sp, #0]
1000096a:	f7ff fff3 	bl	10000954 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
1000096e:	b001      	add	sp, #4
10000970:	bd00      	pop	{pc}
10000972:	46c0      	nop			; (mov r8, r8)

10000974 <call_bits_ref_zero()>:
10000974:	2300      	movs	r3, #0
10000976:	b500      	push	{lr}
10000978:	b081      	sub	sp, #4
1000097a:	4668      	mov	r0, sp
1000097c:	9300      	str	r3, [sp, #0]
1000097e:	f7ff ffe9 	bl	10000954 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
10000982:	b001      	add	sp, #4
10000984:	bd00      	pop	{pc}
10000986:	46c0      	nop			; (mov r8, r8)

10000988 <call_bits_ref_const()>:
10000988:	2301      	movs	r3, #1
1000098a:	b500      	push	{lr}
1000098c:	b081      	sub	sp, #4
1000098e:	4668      	mov	r0, sp
10000990:	9300      	str	r3, [sp, #0]
10000992:	f7ff ffdf 	bl	10000954 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
10000996:	b001      	add	sp, #4
10000998:	bd00      	pop	{pc}
1000099a:	46c0      	nop			; (mov r8, r8)

1000099c <call_bits_ref_global()>:
1000099c:	2340      	movs	r3, #64	; 0x40
1000099e:	b500      	push	{lr}
100009a0:	b081      	sub	sp, #4
100009a2:	4668      	mov	r0, sp
100009a4:	9300      	str	r3, [sp, #0]
100009a6:	f7ff ffd5 	bl	10000954 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
100009aa:	b001      	add	sp, #4
100009ac:	bd00      	pop	{pc}
100009ae:	46c0      	nop			; (mov r8, r8)

100009b0 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
100009b0:	4a02      	ldr	r2, [pc, #8]	; (100009bc <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
100009b2:	6853      	ldr	r3, [r2, #4]
100009b4:	4383      	bics	r3, r0
100009b6:	430b      	orrs	r3, r1
100009b8:	6053      	str	r3, [r2, #4]
100009ba:	4770      	bx	lr
100009bc:	10001dc0 	.word	0x10001dc0

100009c0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
100009c0:	4a03      	ldr	r2, [pc, #12]	; (100009d0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x10>)
100009c2:	6801      	ldr	r1, [r0, #0]
100009c4:	6853      	ldr	r3, [r2, #4]
100009c6:	438b      	bics	r3, r1
100009c8:	6841      	ldr	r1, [r0, #4]
100009ca:	430b      	orrs	r3, r1
100009cc:	6053      	str	r3, [r2, #4]
100009ce:	4770      	bx	lr
100009d0:	10001dc0 	.word	0x10001dc0

100009d4 <call_mskd_ref_var()>:
100009d4:	b500      	push	{lr}
100009d6:	4b05      	ldr	r3, [pc, #20]	; (100009ec <call_mskd_ref_var()+0x18>)
100009d8:	b082      	sub	sp, #8
100009da:	4668      	mov	r0, sp
100009dc:	681a      	ldr	r2, [r3, #0]
100009de:	685b      	ldr	r3, [r3, #4]
100009e0:	9200      	str	r2, [sp, #0]
100009e2:	9301      	str	r3, [sp, #4]
100009e4:	f7ff ffec 	bl	100009c0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
100009e8:	b002      	add	sp, #8
100009ea:	bd00      	pop	{pc}
100009ec:	100016a8 	.word	0x100016a8

100009f0 <call_mskd_ref_const()>:
100009f0:	2306      	movs	r3, #6
100009f2:	b500      	push	{lr}
100009f4:	b082      	sub	sp, #8
100009f6:	9300      	str	r3, [sp, #0]
100009f8:	4668      	mov	r0, sp
100009fa:	3b02      	subs	r3, #2
100009fc:	9301      	str	r3, [sp, #4]
100009fe:	f7ff ffdf 	bl	100009c0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
10000a02:	b002      	add	sp, #8
10000a04:	bd00      	pop	{pc}
10000a06:	46c0      	nop			; (mov r8, r8)

10000a08 <call_mskd_ref_global()>:
10000a08:	2306      	movs	r3, #6
10000a0a:	b500      	push	{lr}
10000a0c:	b082      	sub	sp, #8
10000a0e:	9300      	str	r3, [sp, #0]
10000a10:	4668      	mov	r0, sp
10000a12:	3b04      	subs	r3, #4
10000a14:	9301      	str	r3, [sp, #4]
10000a16:	f7ff ffd3 	bl	100009c0 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
10000a1a:	b002      	add	sp, #8
10000a1c:	bd00      	pop	{pc}
10000a1e:	46c0      	nop			; (mov r8, r8)

10000a20 <periph_bits(mcu::Serial volatile*)>:
10000a20:	2240      	movs	r2, #64	; 0x40
10000a22:	6843      	ldr	r3, [r0, #4]
10000a24:	4313      	orrs	r3, r2
10000a26:	6043      	str	r3, [r0, #4]
10000a28:	4770      	bx	lr
10000a2a:	46c0      	nop			; (mov r8, r8)

10000a2c <call_periph_bits()>:
10000a2c:	b500      	push	{lr}
10000a2e:	4802      	ldr	r0, [pc, #8]	; (10000a38 <call_periph_bits()+0xc>)
10000a30:	f7ff fff6 	bl	10000a20 <periph_bits(mcu::Serial volatile*)>
10000a34:	bd00      	pop	{pc}
10000a36:	46c0      	nop			; (mov r8, r8)
10000a38:	10001dc0 	.word	0x10001dc0

10000a3c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
10000a3c:	6843      	ldr	r3, [r0, #4]
10000a3e:	4319      	orrs	r1, r3
10000a40:	6041      	str	r1, [r0, #4]
10000a42:	4770      	bx	lr

10000a44 <call_periph_bits_val()>:
10000a44:	b500      	push	{lr}
10000a46:	2140      	movs	r1, #64	; 0x40
10000a48:	4801      	ldr	r0, [pc, #4]	; (10000a50 <call_periph_bits_val()+0xc>)
10000a4a:	f7ff fff7 	bl	10000a3c <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
10000a4e:	bd00      	pop	{pc}
10000a50:	10001dc0 	.word	0x10001dc0

10000a54 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
10000a54:	6803      	ldr	r3, [r0, #0]
10000a56:	4319      	orrs	r1, r3
10000a58:	6001      	str	r1, [r0, #0]
10000a5a:	4770      	bx	lr

10000a5c <call_reg_bits_val()>:
10000a5c:	b500      	push	{lr}
10000a5e:	2140      	movs	r1, #64	; 0x40
10000a60:	4801      	ldr	r0, [pc, #4]	; (10000a68 <call_reg_bits_val()+0xc>)
10000a62:	f7ff fff7 	bl	10000a54 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
10000a66:	bd00      	pop	{pc}
10000a68:	10001dc4 	.word	0x10001dc4

10000a6c <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
10000a6c:	6843      	ldr	r3, [r0, #4]
10000a6e:	680a      	ldr	r2, [r1, #0]
10000a70:	4313      	orrs	r3, r2
10000a72:	6043      	str	r3, [r0, #4]
10000a74:	4770      	bx	lr
10000a76:	46c0      	nop			; (mov r8, r8)

10000a78 <call_periph_bits_ref()>:
10000a78:	2340      	movs	r3, #64	; 0x40
10000a7a:	b500      	push	{lr}
10000a7c:	b081      	sub	sp, #4
10000a7e:	4669      	mov	r1, sp
10000a80:	4802      	ldr	r0, [pc, #8]	; (10000a8c <call_periph_bits_ref()+0x14>)
10000a82:	9300      	str	r3, [sp, #0]
10000a84:	f7ff fff2 	bl	10000a6c <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
10000a88:	b001      	add	sp, #4
10000a8a:	bd00      	pop	{pc}
10000a8c:	10001dc0 	.word	0x10001dc0

10000a90 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
10000a90:	6803      	ldr	r3, [r0, #0]
10000a92:	680a      	ldr	r2, [r1, #0]
10000a94:	4313      	orrs	r3, r2
10000a96:	6003      	str	r3, [r0, #0]
10000a98:	4770      	bx	lr
10000a9a:	46c0      	nop			; (mov r8, r8)

10000a9c <call_reg_bits_ref()>:
10000a9c:	2340      	movs	r3, #64	; 0x40
10000a9e:	b500      	push	{lr}
10000aa0:	b081      	sub	sp, #4
10000aa2:	4669      	mov	r1, sp
10000aa4:	4802      	ldr	r0, [pc, #8]	; (10000ab0 <call_reg_bits_ref()+0x14>)
10000aa6:	9300      	str	r3, [sp, #0]
10000aa8:	f7ff fff2 	bl	10000a90 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
10000aac:	b001      	add	sp, #4
10000aae:	bd00      	pop	{pc}
10000ab0:	10001dc4 	.word	0x10001dc4

10000ab4 <periph_mskd(mcu::Serial volatile*)>:
10000ab4:	2206      	movs	r2, #6
10000ab6:	6843      	ldr	r3, [r0, #4]
10000ab8:	4393      	bics	r3, r2
10000aba:	3a04      	subs	r2, #4
10000abc:	4313      	orrs	r3, r2
10000abe:	6043      	str	r3, [r0, #4]
10000ac0:	4770      	bx	lr
10000ac2:	46c0      	nop			; (mov r8, r8)

10000ac4 <call_periph_mskd()>:
10000ac4:	b500      	push	{lr}
10000ac6:	4802      	ldr	r0, [pc, #8]	; (10000ad0 <call_periph_mskd()+0xc>)
10000ac8:	f7ff fff4 	bl	10000ab4 <periph_mskd(mcu::Serial volatile*)>
10000acc:	bd00      	pop	{pc}
10000ace:	46c0      	nop			; (mov r8, r8)
10000ad0:	10001dc0 	.word	0x10001dc0

10000ad4 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
10000ad4:	6843      	ldr	r3, [r0, #4]
10000ad6:	438b      	bics	r3, r1
10000ad8:	4313      	orrs	r3, r2
10000ada:	6043      	str	r3, [r0, #4]
10000adc:	4770      	bx	lr
10000ade:	46c0      	nop			; (mov r8, r8)

10000ae0 <call_periph_mskd_val()>:
10000ae0:	b500      	push	{lr}
10000ae2:	2106      	movs	r1, #6
10000ae4:	2202      	movs	r2, #2
10000ae6:	4802      	ldr	r0, [pc, #8]	; (10000af0 <call_periph_mskd_val()+0x10>)
10000ae8:	f7ff fff4 	bl	10000ad4 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
10000aec:	bd00      	pop	{pc}
10000aee:	46c0      	nop			; (mov r8, r8)
10000af0:	10001dc0 	.word	0x10001dc0

10000af4 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
10000af4:	6803      	ldr	r3, [r0, #0]
10000af6:	438b      	bics	r3, r1
10000af8:	4313      	orrs	r3, r2
10000afa:	6003      	str	r3, [r0, #0]
10000afc:	4770      	bx	lr
10000afe:	46c0      	nop			; (mov r8, r8)

10000b00 <call_reg_mskd_val()>:
10000b00:	b500      	push	{lr}
10000b02:	2106      	movs	r1, #6
10000b04:	2202      	movs	r2, #2
10000b06:	4802      	ldr	r0, [pc, #8]	; (10000b10 <call_reg_mskd_val()+0x10>)
10000b08:	f7ff fff4 	bl	10000af4 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
10000b0c:	bd00      	pop	{pc}
10000b0e:	46c0      	nop			; (mov r8, r8)
10000b10:	10001dc4 	.word	0x10001dc4

10000b14 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
10000b14:	6843      	ldr	r3, [r0, #4]
10000b16:	438b      	bics	r3, r1
10000b18:	4313      	orrs	r3, r2
10000b1a:	6043      	str	r3, [r0, #4]
10000b1c:	4770      	bx	lr
10000b1e:	46c0      	nop			; (mov r8, r8)

10000b20 <call_periph_mskd_ref()>:
10000b20:	b500      	push	{lr}
10000b22:	2106      	movs	r1, #6
10000b24:	2202      	movs	r2, #2
10000b26:	4802      	ldr	r0, [pc, #8]	; (10000b30 <call_periph_mskd_ref()+0x10>)
10000b28:	f7ff fff4 	bl	10000b14 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
10000b2c:	bd00      	pop	{pc}
10000b2e:	46c0      	nop			; (mov r8, r8)
10000b30:	10001dc0 	.word	0x10001dc0

10000b34 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
10000b34:	6803      	ldr	r3, [r0, #0]
10000b36:	438b      	bics	r3, r1
10000b38:	4313      	orrs	r3, r2
10000b3a:	6003      	str	r3, [r0, #0]
10000b3c:	4770      	bx	lr
10000b3e:	46c0      	nop			; (mov r8, r8)

10000b40 <call_reg_mskd_ref()>:
10000b40:	b500      	push	{lr}
10000b42:	2106      	movs	r1, #6
10000b44:	2202      	movs	r2, #2
10000b46:	4802      	ldr	r0, [pc, #8]	; (10000b50 <call_reg_mskd_ref()+0x10>)
10000b48:	f7ff fff4 	bl	10000b34 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
10000b4c:	bd00      	pop	{pc}
10000b4e:	46c0      	nop			; (mov r8, r8)
10000b50:	10001dc4 	.word	0x10001dc4

10000b54 <return_bits()>:
10000b54:	2020      	movs	r0, #32
10000b56:	4770      	bx	lr

10000b58 <call_return_bits()>:
10000b58:	b500      	push	{lr}
10000b5a:	f7ff fffb 	bl	10000b54 <return_bits()>
10000b5e:	4b05      	ldr	r3, [pc, #20]	; (10000b74 <call_return_bits()+0x1c>)
10000b60:	2820      	cmp	r0, #32
10000b62:	d003      	beq.n	10000b6c <call_return_bits()+0x14>
10000b64:	22c0      	movs	r2, #192	; 0xc0
10000b66:	04d2      	lsls	r2, r2, #19
10000b68:	605a      	str	r2, [r3, #4]
10000b6a:	bd00      	pop	{pc}
10000b6c:	22a8      	movs	r2, #168	; 0xa8
10000b6e:	0592      	lsls	r2, r2, #22
10000b70:	605a      	str	r2, [r3, #4]
10000b72:	e7fa      	b.n	10000b6a <call_return_bits()+0x12>
10000b74:	10001d20 	.word	0x10001d20

10000b78 <return_mskd()>:
10000b78:	2318      	movs	r3, #24
10000b7a:	6003      	str	r3, [r0, #0]
10000b7c:	3b10      	subs	r3, #16
10000b7e:	6043      	str	r3, [r0, #4]
10000b80:	4770      	bx	lr
10000b82:	46c0      	nop			; (mov r8, r8)

10000b84 <call_return_mskd()>:
10000b84:	b500      	push	{lr}
10000b86:	b082      	sub	sp, #8
10000b88:	4668      	mov	r0, sp
10000b8a:	f7ff fff5 	bl	10000b78 <return_mskd()>
10000b8e:	9a00      	ldr	r2, [sp, #0]
10000b90:	9b01      	ldr	r3, [sp, #4]
10000b92:	2a18      	cmp	r2, #24
10000b94:	d005      	beq.n	10000ba2 <call_return_mskd()+0x1e>
10000b96:	2298      	movs	r2, #152	; 0x98
10000b98:	4b05      	ldr	r3, [pc, #20]	; (10000bb0 <call_return_mskd()+0x2c>)
10000b9a:	0592      	lsls	r2, r2, #22
10000b9c:	605a      	str	r2, [r3, #4]
10000b9e:	b002      	add	sp, #8
10000ba0:	bd00      	pop	{pc}
10000ba2:	2b08      	cmp	r3, #8
10000ba4:	d1f7      	bne.n	10000b96 <call_return_mskd()+0x12>
10000ba6:	2288      	movs	r2, #136	; 0x88
10000ba8:	4b01      	ldr	r3, [pc, #4]	; (10000bb0 <call_return_mskd()+0x2c>)
10000baa:	0592      	lsls	r2, r2, #22
10000bac:	605a      	str	r2, [r3, #4]
10000bae:	e7f6      	b.n	10000b9e <call_return_mskd()+0x1a>
10000bb0:	10001d20 	.word	0x10001d20

10000bb4 <return_reg()>:
10000bb4:	2240      	movs	r2, #64	; 0x40
10000bb6:	4b02      	ldr	r3, [pc, #8]	; (10000bc0 <return_reg()+0xc>)
10000bb8:	4802      	ldr	r0, [pc, #8]	; (10000bc4 <return_reg()+0x10>)
10000bba:	605a      	str	r2, [r3, #4]
10000bbc:	4770      	bx	lr
10000bbe:	46c0      	nop			; (mov r8, r8)
10000bc0:	10001dc0 	.word	0x10001dc0
10000bc4:	10001dc4 	.word	0x10001dc4

10000bc8 <call_return_reg()>:
10000bc8:	b500      	push	{lr}
10000bca:	f7ff fff3 	bl	10000bb4 <return_reg()>
10000bce:	6803      	ldr	r3, [r0, #0]
10000bd0:	2b40      	cmp	r3, #64	; 0x40
10000bd2:	d004      	beq.n	10000bde <call_return_reg()+0x16>
10000bd4:	22b8      	movs	r2, #184	; 0xb8
10000bd6:	4b04      	ldr	r3, [pc, #16]	; (10000be8 <call_return_reg()+0x20>)
10000bd8:	0592      	lsls	r2, r2, #22
10000bda:	605a      	str	r2, [r3, #4]
10000bdc:	bd00      	pop	{pc}
10000bde:	22f0      	movs	r2, #240	; 0xf0
10000be0:	4b01      	ldr	r3, [pc, #4]	; (10000be8 <call_return_reg()+0x20>)
10000be2:	0552      	lsls	r2, r2, #21
10000be4:	605a      	str	r2, [r3, #4]
10000be6:	e7f9      	b.n	10000bdc <call_return_reg()+0x14>
10000be8:	10001d20 	.word	0x10001d20

10000bec <return_periph()>:
10000bec:	2340      	movs	r3, #64	; 0x40
10000bee:	4801      	ldr	r0, [pc, #4]	; (10000bf4 <return_periph()+0x8>)
10000bf0:	6043      	str	r3, [r0, #4]
10000bf2:	4770      	bx	lr
10000bf4:	10001dc0 	.word	0x10001dc0

10000bf8 <call_return_periph()>:
10000bf8:	b500      	push	{lr}
10000bfa:	f7ff fff7 	bl	10000bec <return_periph()>
10000bfe:	6843      	ldr	r3, [r0, #4]
10000c00:	2b40      	cmp	r3, #64	; 0x40
10000c02:	d004      	beq.n	10000c0e <call_return_periph()+0x16>
10000c04:	22a8      	movs	r2, #168	; 0xa8
10000c06:	4b04      	ldr	r3, [pc, #16]	; (10000c18 <call_return_periph()+0x20>)
10000c08:	0592      	lsls	r2, r2, #22
10000c0a:	605a      	str	r2, [r3, #4]
10000c0c:	bd00      	pop	{pc}
10000c0e:	2298      	movs	r2, #152	; 0x98
10000c10:	4b01      	ldr	r3, [pc, #4]	; (10000c18 <call_return_periph()+0x20>)
10000c12:	0592      	lsls	r2, r2, #22
10000c14:	605a      	str	r2, [r3, #4]
10000c16:	e7f9      	b.n	10000c0c <call_return_periph()+0x14>
10000c18:	10001d20 	.word	0x10001d20

10000c1c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
10000c1c:	4b06      	ldr	r3, [pc, #24]	; (10000c38 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
10000c1e:	2805      	cmp	r0, #5
10000c20:	d007      	beq.n	10000c32 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x16>
10000c22:	2806      	cmp	r0, #6
10000c24:	d002      	beq.n	10000c2c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x10>
10000c26:	2255      	movs	r2, #85	; 0x55
10000c28:	62da      	str	r2, [r3, #44]	; 0x2c
10000c2a:	4770      	bx	lr
10000c2c:	2244      	movs	r2, #68	; 0x44
10000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
10000c30:	e7fb      	b.n	10000c2a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
10000c32:	2233      	movs	r2, #51	; 0x33
10000c34:	62da      	str	r2, [r3, #44]	; 0x2c
10000c36:	e7f8      	b.n	10000c2a <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
10000c38:	10001c00 	.word	0x10001c00

10000c3c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
10000c3c:	6803      	ldr	r3, [r0, #0]
10000c3e:	2b05      	cmp	r3, #5
10000c40:	d009      	beq.n	10000c56 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1a>
10000c42:	2b06      	cmp	r3, #6
10000c44:	d003      	beq.n	10000c4e <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x12>
10000c46:	2288      	movs	r2, #136	; 0x88
10000c48:	4b05      	ldr	r3, [pc, #20]	; (10000c60 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
10000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
10000c4c:	4770      	bx	lr
10000c4e:	2277      	movs	r2, #119	; 0x77
10000c50:	4b03      	ldr	r3, [pc, #12]	; (10000c60 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
10000c52:	62da      	str	r2, [r3, #44]	; 0x2c
10000c54:	e7fa      	b.n	10000c4c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
10000c56:	2266      	movs	r2, #102	; 0x66
10000c58:	4b01      	ldr	r3, [pc, #4]	; (10000c60 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
10000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
10000c5c:	e7f6      	b.n	10000c4c <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
10000c5e:	46c0      	nop			; (mov r8, r8)
10000c60:	10001c00 	.word	0x10001c00

10000c64 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
10000c64:	4a02      	ldr	r2, [pc, #8]	; (10000c70 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
10000c66:	6853      	ldr	r3, [r2, #4]
10000c68:	4383      	bics	r3, r0
10000c6a:	430b      	orrs	r3, r1
10000c6c:	6053      	str	r3, [r2, #4]
10000c6e:	4770      	bx	lr
10000c70:	10001dc0 	.word	0x10001dc0

10000c74 <call_range_val(unsigned int)>:
10000c74:	0001      	movs	r1, r0
10000c76:	20f8      	movs	r0, #248	; 0xf8
10000c78:	b500      	push	{lr}
10000c7a:	0309      	lsls	r1, r1, #12
10000c7c:	0240      	lsls	r0, r0, #9
10000c7e:	f7ff fff1 	bl	10000c64 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
10000c82:	bd00      	pop	{pc}

10000c84 <call_range_val_port()>:
10000c84:	b500      	push	{lr}
10000c86:	201f      	movs	r0, #31
10000c88:	f7ff fff4 	bl	10000c74 <call_range_val(unsigned int)>
10000c8c:	bd00      	pop	{pc}
10000c8e:	46c0      	nop			; (mov r8, r8)

10000c90 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
10000c90:	4a02      	ldr	r2, [pc, #8]	; (10000c9c <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
10000c92:	6853      	ldr	r3, [r2, #4]
10000c94:	4383      	bics	r3, r0
10000c96:	430b      	orrs	r3, r1
10000c98:	6053      	str	r3, [r2, #4]
10000c9a:	4770      	bx	lr
10000c9c:	10001dc0 	.word	0x10001dc0

10000ca0 <call_range_ref(unsigned int)>:
10000ca0:	0001      	movs	r1, r0
10000ca2:	20f8      	movs	r0, #248	; 0xf8
10000ca4:	b500      	push	{lr}
10000ca6:	0309      	lsls	r1, r1, #12
10000ca8:	0240      	lsls	r0, r0, #9
10000caa:	f7ff fff1 	bl	10000c90 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
10000cae:	bd00      	pop	{pc}

10000cb0 <call_range_ref_port()>:
10000cb0:	b500      	push	{lr}
10000cb2:	200c      	movs	r0, #12
10000cb4:	f7ff fff4 	bl	10000ca0 <call_range_ref(unsigned int)>
10000cb8:	bd00      	pop	{pc}
10000cba:	46c0      	nop			; (mov r8, r8)

10000cbc <check_array_range_pass(unsigned int)>:
10000cbc:	4b04      	ldr	r3, [pc, #16]	; (10000cd0 <check_array_range_pass(unsigned int)+0x14>)
10000cbe:	2816      	cmp	r0, #22
10000cc0:	d802      	bhi.n	10000cc8 <check_array_range_pass(unsigned int)+0xc>
10000cc2:	227f      	movs	r2, #127	; 0x7f
10000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
10000cc6:	4770      	bx	lr
10000cc8:	2283      	movs	r2, #131	; 0x83
10000cca:	62da      	str	r2, [r3, #44]	; 0x2c
10000ccc:	e7fb      	b.n	10000cc6 <check_array_range_pass(unsigned int)+0xa>
10000cce:	46c0      	nop			; (mov r8, r8)
10000cd0:	10001c00 	.word	0x10001c00

10000cd4 <check_array_range_fail(unsigned int)>:
10000cd4:	4b04      	ldr	r3, [pc, #16]	; (10000ce8 <check_array_range_fail(unsigned int)+0x14>)
10000cd6:	2816      	cmp	r0, #22
10000cd8:	d802      	bhi.n	10000ce0 <check_array_range_fail(unsigned int)+0xc>
10000cda:	2295      	movs	r2, #149	; 0x95
10000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
10000cde:	4770      	bx	lr
10000ce0:	2297      	movs	r2, #151	; 0x97
10000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
10000ce4:	e7fb      	b.n	10000cde <check_array_range_fail(unsigned int)+0xa>
10000ce6:	46c0      	nop			; (mov r8, r8)
10000ce8:	10001c00 	.word	0x10001c00

10000cec <check_bits_range_pass(unsigned int)>:
10000cec:	4b04      	ldr	r3, [pc, #16]	; (10000d00 <check_bits_range_pass(unsigned int)+0x14>)
10000cee:	280f      	cmp	r0, #15
10000cf0:	d802      	bhi.n	10000cf8 <check_bits_range_pass(unsigned int)+0xc>
10000cf2:	229d      	movs	r2, #157	; 0x9d
10000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
10000cf6:	4770      	bx	lr
10000cf8:	22a3      	movs	r2, #163	; 0xa3
10000cfa:	62da      	str	r2, [r3, #44]	; 0x2c
10000cfc:	e7fb      	b.n	10000cf6 <check_bits_range_pass(unsigned int)+0xa>
10000cfe:	46c0      	nop			; (mov r8, r8)
10000d00:	10001c00 	.word	0x10001c00

10000d04 <check_bits_range_fail(unsigned int)>:
10000d04:	4b04      	ldr	r3, [pc, #16]	; (10000d18 <check_bits_range_fail(unsigned int)+0x14>)
10000d06:	280f      	cmp	r0, #15
10000d08:	d802      	bhi.n	10000d10 <check_bits_range_fail(unsigned int)+0xc>
10000d0a:	22a7      	movs	r2, #167	; 0xa7
10000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
10000d0e:	4770      	bx	lr
10000d10:	22ad      	movs	r2, #173	; 0xad
10000d12:	62da      	str	r2, [r3, #44]	; 0x2c
10000d14:	e7fb      	b.n	10000d0e <check_bits_range_fail(unsigned int)+0xa>
10000d16:	46c0      	nop			; (mov r8, r8)
10000d18:	10001c00 	.word	0x10001c00

10000d1c <check_mskd_range_pass(unsigned int)>:
10000d1c:	4b04      	ldr	r3, [pc, #16]	; (10000d30 <check_mskd_range_pass(unsigned int)+0x14>)
10000d1e:	281f      	cmp	r0, #31
10000d20:	d802      	bhi.n	10000d28 <check_mskd_range_pass(unsigned int)+0xc>
10000d22:	22b3      	movs	r2, #179	; 0xb3
10000d24:	62da      	str	r2, [r3, #44]	; 0x2c
10000d26:	4770      	bx	lr
10000d28:	22b5      	movs	r2, #181	; 0xb5
10000d2a:	62da      	str	r2, [r3, #44]	; 0x2c
10000d2c:	e7fb      	b.n	10000d26 <check_mskd_range_pass(unsigned int)+0xa>
10000d2e:	46c0      	nop			; (mov r8, r8)
10000d30:	10001c00 	.word	0x10001c00

10000d34 <check_mskd_range_fail(unsigned int)>:
10000d34:	4b04      	ldr	r3, [pc, #16]	; (10000d48 <check_mskd_range_fail(unsigned int)+0x14>)
10000d36:	281f      	cmp	r0, #31
10000d38:	d802      	bhi.n	10000d40 <check_mskd_range_fail(unsigned int)+0xc>
10000d3a:	22bf      	movs	r2, #191	; 0xbf
10000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
10000d3e:	4770      	bx	lr
10000d40:	22c1      	movs	r2, #193	; 0xc1
10000d42:	62da      	str	r2, [r3, #44]	; 0x2c
10000d44:	e7fb      	b.n	10000d3e <check_mskd_range_fail(unsigned int)+0xa>
10000d46:	46c0      	nop			; (mov r8, r8)
10000d48:	10001c00 	.word	0x10001c00

10000d4c <bits_extract_ne()>:
10000d4c:	2220      	movs	r2, #32
10000d4e:	4b05      	ldr	r3, [pc, #20]	; (10000d64 <bits_extract_ne()+0x18>)
10000d50:	605a      	str	r2, [r3, #4]
10000d52:	685a      	ldr	r2, [r3, #4]
10000d54:	2a20      	cmp	r2, #32
10000d56:	d002      	beq.n	10000d5e <bits_extract_ne()+0x12>
10000d58:	2202      	movs	r2, #2
10000d5a:	605a      	str	r2, [r3, #4]
10000d5c:	4770      	bx	lr
10000d5e:	2204      	movs	r2, #4
10000d60:	605a      	str	r2, [r3, #4]
10000d62:	e7fb      	b.n	10000d5c <bits_extract_ne()+0x10>
10000d64:	10001dc0 	.word	0x10001dc0

10000d68 <mskd_extract_geq()>:
10000d68:	22b0      	movs	r2, #176	; 0xb0
10000d6a:	4b07      	ldr	r3, [pc, #28]	; (10000d88 <mskd_extract_geq()+0x20>)
10000d6c:	0552      	lsls	r2, r2, #21
10000d6e:	605a      	str	r2, [r3, #4]
10000d70:	685a      	ldr	r2, [r3, #4]
10000d72:	4b06      	ldr	r3, [pc, #24]	; (10000d8c <mskd_extract_geq()+0x24>)
10000d74:	429a      	cmp	r2, r3
10000d76:	d803      	bhi.n	10000d80 <mskd_extract_geq()+0x18>
10000d78:	2240      	movs	r2, #64	; 0x40
10000d7a:	4b05      	ldr	r3, [pc, #20]	; (10000d90 <mskd_extract_geq()+0x28>)
10000d7c:	605a      	str	r2, [r3, #4]
10000d7e:	4770      	bx	lr
10000d80:	2220      	movs	r2, #32
10000d82:	4b03      	ldr	r3, [pc, #12]	; (10000d90 <mskd_extract_geq()+0x28>)
10000d84:	605a      	str	r2, [r3, #4]
10000d86:	e7fa      	b.n	10000d7e <mskd_extract_geq()+0x16>
10000d88:	10001d20 	.word	0x10001d20
10000d8c:	15ffffff 	.word	0x15ffffff
10000d90:	10001dc0 	.word	0x10001dc0

10000d94 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
10000d94:	22b8      	movs	r2, #184	; 0xb8
10000d96:	4b04      	ldr	r3, [pc, #16]	; (10000da8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
10000d98:	0592      	lsls	r2, r2, #22
10000d9a:	605a      	str	r2, [r3, #4]
10000d9c:	685b      	ldr	r3, [r3, #4]
10000d9e:	4018      	ands	r0, r3
10000da0:	40c8      	lsrs	r0, r1
10000da2:	4b02      	ldr	r3, [pc, #8]	; (10000dac <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
10000da4:	62d8      	str	r0, [r3, #44]	; 0x2c
10000da6:	4770      	bx	lr
10000da8:	10001d20 	.word	0x10001d20
10000dac:	10001c00 	.word	0x10001c00

10000db0 <call_shifted_const_val()>:
10000db0:	20f8      	movs	r0, #248	; 0xf8
10000db2:	b500      	push	{lr}
10000db4:	0580      	lsls	r0, r0, #22
10000db6:	2119      	movs	r1, #25
10000db8:	f7ff ffec 	bl	10000d94 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
10000dbc:	bd00      	pop	{pc}
10000dbe:	46c0      	nop			; (mov r8, r8)

10000dc0 <call_shifted_var_val()>:
10000dc0:	20f8      	movs	r0, #248	; 0xf8
10000dc2:	b500      	push	{lr}
10000dc4:	0580      	lsls	r0, r0, #22
10000dc6:	2119      	movs	r1, #25
10000dc8:	f7ff ffe4 	bl	10000d94 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
10000dcc:	bd00      	pop	{pc}
10000dce:	46c0      	nop			; (mov r8, r8)

10000dd0 <call_shifted_global_val()>:
10000dd0:	20f8      	movs	r0, #248	; 0xf8
10000dd2:	b500      	push	{lr}
10000dd4:	0580      	lsls	r0, r0, #22
10000dd6:	2119      	movs	r1, #25
10000dd8:	f7ff ffdc 	bl	10000d94 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
10000ddc:	bd00      	pop	{pc}
10000dde:	46c0      	nop			; (mov r8, r8)

10000de0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
10000de0:	22b8      	movs	r2, #184	; 0xb8
10000de2:	4b05      	ldr	r3, [pc, #20]	; (10000df8 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
10000de4:	0592      	lsls	r2, r2, #22
10000de6:	605a      	str	r2, [r3, #4]
10000de8:	6802      	ldr	r2, [r0, #0]
10000dea:	685b      	ldr	r3, [r3, #4]
10000dec:	4013      	ands	r3, r2
10000dee:	6842      	ldr	r2, [r0, #4]
10000df0:	40d3      	lsrs	r3, r2
10000df2:	4a02      	ldr	r2, [pc, #8]	; (10000dfc <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
10000df4:	62d3      	str	r3, [r2, #44]	; 0x2c
10000df6:	4770      	bx	lr
10000df8:	10001d20 	.word	0x10001d20
10000dfc:	10001c00 	.word	0x10001c00

10000e00 <call_shifted_const_ref()>:
10000e00:	b500      	push	{lr}
10000e02:	4b05      	ldr	r3, [pc, #20]	; (10000e18 <call_shifted_const_ref()+0x18>)
10000e04:	b082      	sub	sp, #8
10000e06:	4668      	mov	r0, sp
10000e08:	689a      	ldr	r2, [r3, #8]
10000e0a:	68db      	ldr	r3, [r3, #12]
10000e0c:	9200      	str	r2, [sp, #0]
10000e0e:	9301      	str	r3, [sp, #4]
10000e10:	f7ff ffe6 	bl	10000de0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
10000e14:	b002      	add	sp, #8
10000e16:	bd00      	pop	{pc}
10000e18:	100016a8 	.word	0x100016a8

10000e1c <call_shifted_var_ref()>:
10000e1c:	b500      	push	{lr}
10000e1e:	4b05      	ldr	r3, [pc, #20]	; (10000e34 <call_shifted_var_ref()+0x18>)
10000e20:	b082      	sub	sp, #8
10000e22:	4668      	mov	r0, sp
10000e24:	691a      	ldr	r2, [r3, #16]
10000e26:	695b      	ldr	r3, [r3, #20]
10000e28:	9200      	str	r2, [sp, #0]
10000e2a:	9301      	str	r3, [sp, #4]
10000e2c:	f7ff ffd8 	bl	10000de0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
10000e30:	b002      	add	sp, #8
10000e32:	bd00      	pop	{pc}
10000e34:	100016a8 	.word	0x100016a8

10000e38 <call_shifted_global_ref()>:
10000e38:	b500      	push	{lr}
10000e3a:	4b05      	ldr	r3, [pc, #20]	; (10000e50 <call_shifted_global_ref()+0x18>)
10000e3c:	b082      	sub	sp, #8
10000e3e:	4668      	mov	r0, sp
10000e40:	689a      	ldr	r2, [r3, #8]
10000e42:	68db      	ldr	r3, [r3, #12]
10000e44:	9200      	str	r2, [sp, #0]
10000e46:	9301      	str	r3, [sp, #4]
10000e48:	f7ff ffca 	bl	10000de0 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
10000e4c:	b002      	add	sp, #8
10000e4e:	bd00      	pop	{pc}
10000e50:	100016a8 	.word	0x100016a8

10000e54 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
10000e54:	0643      	lsls	r3, r0, #25
10000e56:	d503      	bpl.n	10000e60 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0xc>
10000e58:	2202      	movs	r2, #2
10000e5a:	4b03      	ldr	r3, [pc, #12]	; (10000e68 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x14>)
10000e5c:	605a      	str	r2, [r3, #4]
10000e5e:	4770      	bx	lr
10000e60:	2204      	movs	r2, #4
10000e62:	4b01      	ldr	r3, [pc, #4]	; (10000e68 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x14>)
10000e64:	605a      	str	r2, [r3, #4]
10000e66:	e7fa      	b.n	10000e5e <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0xa>
10000e68:	10001dc0 	.word	0x10001dc0

10000e6c <call_copy_bits_val()>:
10000e6c:	2240      	movs	r2, #64	; 0x40
10000e6e:	b500      	push	{lr}
10000e70:	4b02      	ldr	r3, [pc, #8]	; (10000e7c <call_copy_bits_val()+0x10>)
10000e72:	605a      	str	r2, [r3, #4]
10000e74:	6858      	ldr	r0, [r3, #4]
10000e76:	f7ff ffed 	bl	10000e54 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
10000e7a:	bd00      	pop	{pc}
10000e7c:	10001dc0 	.word	0x10001dc0

10000e80 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
10000e80:	6803      	ldr	r3, [r0, #0]
10000e82:	065b      	lsls	r3, r3, #25
10000e84:	d503      	bpl.n	10000e8e <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0xe>
10000e86:	2202      	movs	r2, #2
10000e88:	4b03      	ldr	r3, [pc, #12]	; (10000e98 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x18>)
10000e8a:	605a      	str	r2, [r3, #4]
10000e8c:	4770      	bx	lr
10000e8e:	2204      	movs	r2, #4
10000e90:	4b01      	ldr	r3, [pc, #4]	; (10000e98 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x18>)
10000e92:	605a      	str	r2, [r3, #4]
10000e94:	e7fa      	b.n	10000e8c <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0xc>
10000e96:	46c0      	nop			; (mov r8, r8)
10000e98:	10001dc0 	.word	0x10001dc0

10000e9c <call_copy_bits_ref()>:
10000e9c:	2240      	movs	r2, #64	; 0x40
10000e9e:	b500      	push	{lr}
10000ea0:	4b04      	ldr	r3, [pc, #16]	; (10000eb4 <call_copy_bits_ref()+0x18>)
10000ea2:	b081      	sub	sp, #4
10000ea4:	605a      	str	r2, [r3, #4]
10000ea6:	685b      	ldr	r3, [r3, #4]
10000ea8:	4668      	mov	r0, sp
10000eaa:	9300      	str	r3, [sp, #0]
10000eac:	f7ff ffe8 	bl	10000e80 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
10000eb0:	b001      	add	sp, #4
10000eb2:	bd00      	pop	{pc}
10000eb4:	10001dc0 	.word	0x10001dc0

10000eb8 <run>:
10000eb8:	b530      	push	{r4, r5, lr}
10000eba:	4cfc      	ldr	r4, [pc, #1008]	; (100012ac <run+0x3f4>)
10000ebc:	7823      	ldrb	r3, [r4, #0]
10000ebe:	2b00      	cmp	r3, #0
10000ec0:	d100      	bne.n	10000ec4 <run+0xc>
10000ec2:	e322      	b.n	1000150a <run+0x652>
10000ec4:	68a1      	ldr	r1, [r4, #8]
10000ec6:	7b23      	ldrb	r3, [r4, #12]
10000ec8:	2b00      	cmp	r3, #0
10000eca:	d103      	bne.n	10000ed4 <run+0x1c>
10000ecc:	4bf8      	ldr	r3, [pc, #992]	; (100012b0 <run+0x3f8>)
10000ece:	6163      	str	r3, [r4, #20]
10000ed0:	2301      	movs	r3, #1
10000ed2:	7323      	strb	r3, [r4, #12]
10000ed4:	7e23      	ldrb	r3, [r4, #24]
10000ed6:	2b00      	cmp	r3, #0
10000ed8:	d103      	bne.n	10000ee2 <run+0x2a>
10000eda:	4bf6      	ldr	r3, [pc, #984]	; (100012b4 <run+0x3fc>)
10000edc:	6223      	str	r3, [r4, #32]
10000ede:	2301      	movs	r3, #1
10000ee0:	7623      	strb	r3, [r4, #24]
10000ee2:	2200      	movs	r2, #0
10000ee4:	48f4      	ldr	r0, [pc, #976]	; (100012b8 <run+0x400>)
10000ee6:	f000 fb4d 	bl	10001584 <do_test>
10000eea:	2201      	movs	r2, #1
10000eec:	68a1      	ldr	r1, [r4, #8]
10000eee:	48f3      	ldr	r0, [pc, #972]	; (100012bc <run+0x404>)
10000ef0:	f000 fb48 	bl	10001584 <do_test>
10000ef4:	2202      	movs	r2, #2
10000ef6:	68a1      	ldr	r1, [r4, #8]
10000ef8:	48f1      	ldr	r0, [pc, #964]	; (100012c0 <run+0x408>)
10000efa:	f000 fb43 	bl	10001584 <do_test>
10000efe:	2203      	movs	r2, #3
10000f00:	68a1      	ldr	r1, [r4, #8]
10000f02:	48f0      	ldr	r0, [pc, #960]	; (100012c4 <run+0x40c>)
10000f04:	f000 fb3e 	bl	10001584 <do_test>
10000f08:	2204      	movs	r2, #4
10000f0a:	68a1      	ldr	r1, [r4, #8]
10000f0c:	48ee      	ldr	r0, [pc, #952]	; (100012c8 <run+0x410>)
10000f0e:	f000 fb39 	bl	10001584 <do_test>
10000f12:	2205      	movs	r2, #5
10000f14:	68a1      	ldr	r1, [r4, #8]
10000f16:	48ed      	ldr	r0, [pc, #948]	; (100012cc <run+0x414>)
10000f18:	f000 fb34 	bl	10001584 <do_test>
10000f1c:	2206      	movs	r2, #6
10000f1e:	68a1      	ldr	r1, [r4, #8]
10000f20:	48eb      	ldr	r0, [pc, #940]	; (100012d0 <run+0x418>)
10000f22:	f000 fb2f 	bl	10001584 <do_test>
10000f26:	2207      	movs	r2, #7
10000f28:	68a1      	ldr	r1, [r4, #8]
10000f2a:	48ea      	ldr	r0, [pc, #936]	; (100012d4 <run+0x41c>)
10000f2c:	f000 fb2a 	bl	10001584 <do_test>
10000f30:	2208      	movs	r2, #8
10000f32:	68a1      	ldr	r1, [r4, #8]
10000f34:	48e8      	ldr	r0, [pc, #928]	; (100012d8 <run+0x420>)
10000f36:	f000 fb25 	bl	10001584 <do_test>
10000f3a:	2209      	movs	r2, #9
10000f3c:	68a1      	ldr	r1, [r4, #8]
10000f3e:	48e7      	ldr	r0, [pc, #924]	; (100012dc <run+0x424>)
10000f40:	f000 fb20 	bl	10001584 <do_test>
10000f44:	220a      	movs	r2, #10
10000f46:	68a1      	ldr	r1, [r4, #8]
10000f48:	48e5      	ldr	r0, [pc, #916]	; (100012e0 <run+0x428>)
10000f4a:	f000 fb1b 	bl	10001584 <do_test>
10000f4e:	220b      	movs	r2, #11
10000f50:	68a1      	ldr	r1, [r4, #8]
10000f52:	48e4      	ldr	r0, [pc, #912]	; (100012e4 <run+0x42c>)
10000f54:	f000 fb16 	bl	10001584 <do_test>
10000f58:	220c      	movs	r2, #12
10000f5a:	68a1      	ldr	r1, [r4, #8]
10000f5c:	48e2      	ldr	r0, [pc, #904]	; (100012e8 <run+0x430>)
10000f5e:	f000 fb11 	bl	10001584 <do_test>
10000f62:	220d      	movs	r2, #13
10000f64:	68a1      	ldr	r1, [r4, #8]
10000f66:	48e1      	ldr	r0, [pc, #900]	; (100012ec <run+0x434>)
10000f68:	f000 fb0c 	bl	10001584 <do_test>
10000f6c:	220e      	movs	r2, #14
10000f6e:	68a1      	ldr	r1, [r4, #8]
10000f70:	48df      	ldr	r0, [pc, #892]	; (100012f0 <run+0x438>)
10000f72:	f000 fb07 	bl	10001584 <do_test>
10000f76:	220f      	movs	r2, #15
10000f78:	68a1      	ldr	r1, [r4, #8]
10000f7a:	48de      	ldr	r0, [pc, #888]	; (100012f4 <run+0x43c>)
10000f7c:	f000 fb02 	bl	10001584 <do_test>
10000f80:	2210      	movs	r2, #16
10000f82:	68a1      	ldr	r1, [r4, #8]
10000f84:	48dc      	ldr	r0, [pc, #880]	; (100012f8 <run+0x440>)
10000f86:	f000 fafd 	bl	10001584 <do_test>
10000f8a:	2211      	movs	r2, #17
10000f8c:	68a1      	ldr	r1, [r4, #8]
10000f8e:	48db      	ldr	r0, [pc, #876]	; (100012fc <run+0x444>)
10000f90:	f000 faf8 	bl	10001584 <do_test>
10000f94:	2212      	movs	r2, #18
10000f96:	68a1      	ldr	r1, [r4, #8]
10000f98:	48d9      	ldr	r0, [pc, #868]	; (10001300 <run+0x448>)
10000f9a:	f000 faf3 	bl	10001584 <do_test>
10000f9e:	2213      	movs	r2, #19
10000fa0:	68a1      	ldr	r1, [r4, #8]
10000fa2:	48d8      	ldr	r0, [pc, #864]	; (10001304 <run+0x44c>)
10000fa4:	f000 faee 	bl	10001584 <do_test>
10000fa8:	2214      	movs	r2, #20
10000faa:	68a1      	ldr	r1, [r4, #8]
10000fac:	48d6      	ldr	r0, [pc, #856]	; (10001308 <run+0x450>)
10000fae:	f000 fae9 	bl	10001584 <do_test>
10000fb2:	2215      	movs	r2, #21
10000fb4:	68a1      	ldr	r1, [r4, #8]
10000fb6:	48d5      	ldr	r0, [pc, #852]	; (1000130c <run+0x454>)
10000fb8:	f000 fae4 	bl	10001584 <do_test>
10000fbc:	2216      	movs	r2, #22
10000fbe:	68a1      	ldr	r1, [r4, #8]
10000fc0:	48d3      	ldr	r0, [pc, #844]	; (10001310 <run+0x458>)
10000fc2:	f000 fadf 	bl	10001584 <do_test>
10000fc6:	2217      	movs	r2, #23
10000fc8:	68a1      	ldr	r1, [r4, #8]
10000fca:	48d2      	ldr	r0, [pc, #840]	; (10001314 <run+0x45c>)
10000fcc:	f000 fada 	bl	10001584 <do_test>
10000fd0:	2218      	movs	r2, #24
10000fd2:	68a1      	ldr	r1, [r4, #8]
10000fd4:	48d0      	ldr	r0, [pc, #832]	; (10001318 <run+0x460>)
10000fd6:	f000 fad5 	bl	10001584 <do_test>
10000fda:	2219      	movs	r2, #25
10000fdc:	68a1      	ldr	r1, [r4, #8]
10000fde:	48cf      	ldr	r0, [pc, #828]	; (1000131c <run+0x464>)
10000fe0:	f000 fad0 	bl	10001584 <do_test>
10000fe4:	221a      	movs	r2, #26
10000fe6:	68a1      	ldr	r1, [r4, #8]
10000fe8:	48cd      	ldr	r0, [pc, #820]	; (10001320 <run+0x468>)
10000fea:	f000 facb 	bl	10001584 <do_test>
10000fee:	221b      	movs	r2, #27
10000ff0:	68a1      	ldr	r1, [r4, #8]
10000ff2:	48cc      	ldr	r0, [pc, #816]	; (10001324 <run+0x46c>)
10000ff4:	f000 fac6 	bl	10001584 <do_test>
10000ff8:	221c      	movs	r2, #28
10000ffa:	68a1      	ldr	r1, [r4, #8]
10000ffc:	48ca      	ldr	r0, [pc, #808]	; (10001328 <run+0x470>)
10000ffe:	f000 fac1 	bl	10001584 <do_test>
10001002:	221d      	movs	r2, #29
10001004:	68a1      	ldr	r1, [r4, #8]
10001006:	48c9      	ldr	r0, [pc, #804]	; (1000132c <run+0x474>)
10001008:	f000 fabc 	bl	10001584 <do_test>
1000100c:	221e      	movs	r2, #30
1000100e:	68a1      	ldr	r1, [r4, #8]
10001010:	48c7      	ldr	r0, [pc, #796]	; (10001330 <run+0x478>)
10001012:	f000 fab7 	bl	10001584 <do_test>
10001016:	221f      	movs	r2, #31
10001018:	68a1      	ldr	r1, [r4, #8]
1000101a:	48c6      	ldr	r0, [pc, #792]	; (10001334 <run+0x47c>)
1000101c:	f000 fab2 	bl	10001584 <do_test>
10001020:	2220      	movs	r2, #32
10001022:	68a1      	ldr	r1, [r4, #8]
10001024:	48c4      	ldr	r0, [pc, #784]	; (10001338 <run+0x480>)
10001026:	f000 faad 	bl	10001584 <do_test>
1000102a:	2221      	movs	r2, #33	; 0x21
1000102c:	68a1      	ldr	r1, [r4, #8]
1000102e:	48c3      	ldr	r0, [pc, #780]	; (1000133c <run+0x484>)
10001030:	f000 faa8 	bl	10001584 <do_test>
10001034:	2222      	movs	r2, #34	; 0x22
10001036:	68a1      	ldr	r1, [r4, #8]
10001038:	48c1      	ldr	r0, [pc, #772]	; (10001340 <run+0x488>)
1000103a:	f000 faa3 	bl	10001584 <do_test>
1000103e:	2223      	movs	r2, #35	; 0x23
10001040:	68a1      	ldr	r1, [r4, #8]
10001042:	48c0      	ldr	r0, [pc, #768]	; (10001344 <run+0x48c>)
10001044:	f000 fa9e 	bl	10001584 <do_test>
10001048:	2224      	movs	r2, #36	; 0x24
1000104a:	68a1      	ldr	r1, [r4, #8]
1000104c:	48be      	ldr	r0, [pc, #760]	; (10001348 <run+0x490>)
1000104e:	f000 fa99 	bl	10001584 <do_test>
10001052:	2225      	movs	r2, #37	; 0x25
10001054:	6961      	ldr	r1, [r4, #20]
10001056:	48bd      	ldr	r0, [pc, #756]	; (1000134c <run+0x494>)
10001058:	f000 fa94 	bl	10001584 <do_test>
1000105c:	2226      	movs	r2, #38	; 0x26
1000105e:	6961      	ldr	r1, [r4, #20]
10001060:	48bb      	ldr	r0, [pc, #748]	; (10001350 <run+0x498>)
10001062:	f000 fa8f 	bl	10001584 <do_test>
10001066:	2227      	movs	r2, #39	; 0x27
10001068:	6961      	ldr	r1, [r4, #20]
1000106a:	48ba      	ldr	r0, [pc, #744]	; (10001354 <run+0x49c>)
1000106c:	f000 fa8a 	bl	10001584 <do_test>
10001070:	2228      	movs	r2, #40	; 0x28
10001072:	68a1      	ldr	r1, [r4, #8]
10001074:	48b8      	ldr	r0, [pc, #736]	; (10001358 <run+0x4a0>)
10001076:	f000 fa85 	bl	10001584 <do_test>
1000107a:	2229      	movs	r2, #41	; 0x29
1000107c:	68a1      	ldr	r1, [r4, #8]
1000107e:	48b7      	ldr	r0, [pc, #732]	; (1000135c <run+0x4a4>)
10001080:	f000 fa80 	bl	10001584 <do_test>
10001084:	222a      	movs	r2, #42	; 0x2a
10001086:	68a1      	ldr	r1, [r4, #8]
10001088:	48b5      	ldr	r0, [pc, #724]	; (10001360 <run+0x4a8>)
1000108a:	f000 fa7b 	bl	10001584 <do_test>
1000108e:	222b      	movs	r2, #43	; 0x2b
10001090:	68a1      	ldr	r1, [r4, #8]
10001092:	48b4      	ldr	r0, [pc, #720]	; (10001364 <run+0x4ac>)
10001094:	f000 fa76 	bl	10001584 <do_test>
10001098:	222c      	movs	r2, #44	; 0x2c
1000109a:	68a1      	ldr	r1, [r4, #8]
1000109c:	48b2      	ldr	r0, [pc, #712]	; (10001368 <run+0x4b0>)
1000109e:	f000 fa71 	bl	10001584 <do_test>
100010a2:	222d      	movs	r2, #45	; 0x2d
100010a4:	6a21      	ldr	r1, [r4, #32]
100010a6:	48b1      	ldr	r0, [pc, #708]	; (1000136c <run+0x4b4>)
100010a8:	f000 fa6c 	bl	10001584 <do_test>
100010ac:	222e      	movs	r2, #46	; 0x2e
100010ae:	68a1      	ldr	r1, [r4, #8]
100010b0:	48af      	ldr	r0, [pc, #700]	; (10001370 <run+0x4b8>)
100010b2:	f000 fa67 	bl	10001584 <do_test>
100010b6:	222f      	movs	r2, #47	; 0x2f
100010b8:	68a1      	ldr	r1, [r4, #8]
100010ba:	48ae      	ldr	r0, [pc, #696]	; (10001374 <run+0x4bc>)
100010bc:	f000 fa62 	bl	10001584 <do_test>
100010c0:	2230      	movs	r2, #48	; 0x30
100010c2:	68a1      	ldr	r1, [r4, #8]
100010c4:	48ac      	ldr	r0, [pc, #688]	; (10001378 <run+0x4c0>)
100010c6:	f000 fa5d 	bl	10001584 <do_test>
100010ca:	2231      	movs	r2, #49	; 0x31
100010cc:	68a1      	ldr	r1, [r4, #8]
100010ce:	48ab      	ldr	r0, [pc, #684]	; (1000137c <run+0x4c4>)
100010d0:	f000 fa58 	bl	10001584 <do_test>
100010d4:	2232      	movs	r2, #50	; 0x32
100010d6:	68a1      	ldr	r1, [r4, #8]
100010d8:	48a9      	ldr	r0, [pc, #676]	; (10001380 <run+0x4c8>)
100010da:	f000 fa53 	bl	10001584 <do_test>
100010de:	2233      	movs	r2, #51	; 0x33
100010e0:	68a1      	ldr	r1, [r4, #8]
100010e2:	48a8      	ldr	r0, [pc, #672]	; (10001384 <run+0x4cc>)
100010e4:	f000 fa4e 	bl	10001584 <do_test>
100010e8:	2234      	movs	r2, #52	; 0x34
100010ea:	68a1      	ldr	r1, [r4, #8]
100010ec:	48a6      	ldr	r0, [pc, #664]	; (10001388 <run+0x4d0>)
100010ee:	f000 fa49 	bl	10001584 <do_test>
100010f2:	2235      	movs	r2, #53	; 0x35
100010f4:	68a1      	ldr	r1, [r4, #8]
100010f6:	48a5      	ldr	r0, [pc, #660]	; (1000138c <run+0x4d4>)
100010f8:	f000 fa44 	bl	10001584 <do_test>
100010fc:	2236      	movs	r2, #54	; 0x36
100010fe:	68a1      	ldr	r1, [r4, #8]
10001100:	48a3      	ldr	r0, [pc, #652]	; (10001390 <run+0x4d8>)
10001102:	f000 fa3f 	bl	10001584 <do_test>
10001106:	2237      	movs	r2, #55	; 0x37
10001108:	68a1      	ldr	r1, [r4, #8]
1000110a:	48a2      	ldr	r0, [pc, #648]	; (10001394 <run+0x4dc>)
1000110c:	f000 fa3a 	bl	10001584 <do_test>
10001110:	2238      	movs	r2, #56	; 0x38
10001112:	68a1      	ldr	r1, [r4, #8]
10001114:	48a0      	ldr	r0, [pc, #640]	; (10001398 <run+0x4e0>)
10001116:	f000 fa35 	bl	10001584 <do_test>
1000111a:	2239      	movs	r2, #57	; 0x39
1000111c:	68a1      	ldr	r1, [r4, #8]
1000111e:	489f      	ldr	r0, [pc, #636]	; (1000139c <run+0x4e4>)
10001120:	f000 fa30 	bl	10001584 <do_test>
10001124:	223a      	movs	r2, #58	; 0x3a
10001126:	68a1      	ldr	r1, [r4, #8]
10001128:	489d      	ldr	r0, [pc, #628]	; (100013a0 <run+0x4e8>)
1000112a:	f000 fa2b 	bl	10001584 <do_test>
1000112e:	223b      	movs	r2, #59	; 0x3b
10001130:	68a1      	ldr	r1, [r4, #8]
10001132:	489c      	ldr	r0, [pc, #624]	; (100013a4 <run+0x4ec>)
10001134:	f000 fa26 	bl	10001584 <do_test>
10001138:	223c      	movs	r2, #60	; 0x3c
1000113a:	68a1      	ldr	r1, [r4, #8]
1000113c:	489a      	ldr	r0, [pc, #616]	; (100013a8 <run+0x4f0>)
1000113e:	f000 fa21 	bl	10001584 <do_test>
10001142:	223d      	movs	r2, #61	; 0x3d
10001144:	68a1      	ldr	r1, [r4, #8]
10001146:	4899      	ldr	r0, [pc, #612]	; (100013ac <run+0x4f4>)
10001148:	f000 fa1c 	bl	10001584 <do_test>
1000114c:	223e      	movs	r2, #62	; 0x3e
1000114e:	68a1      	ldr	r1, [r4, #8]
10001150:	4897      	ldr	r0, [pc, #604]	; (100013b0 <run+0x4f8>)
10001152:	f000 fa17 	bl	10001584 <do_test>
10001156:	223f      	movs	r2, #63	; 0x3f
10001158:	68a1      	ldr	r1, [r4, #8]
1000115a:	4896      	ldr	r0, [pc, #600]	; (100013b4 <run+0x4fc>)
1000115c:	f000 fa12 	bl	10001584 <do_test>
10001160:	2240      	movs	r2, #64	; 0x40
10001162:	68a1      	ldr	r1, [r4, #8]
10001164:	4894      	ldr	r0, [pc, #592]	; (100013b8 <run+0x500>)
10001166:	f000 fa0d 	bl	10001584 <do_test>
1000116a:	2241      	movs	r2, #65	; 0x41
1000116c:	68a1      	ldr	r1, [r4, #8]
1000116e:	4893      	ldr	r0, [pc, #588]	; (100013bc <run+0x504>)
10001170:	f000 fa08 	bl	10001584 <do_test>
10001174:	2242      	movs	r2, #66	; 0x42
10001176:	6961      	ldr	r1, [r4, #20]
10001178:	4891      	ldr	r0, [pc, #580]	; (100013c0 <run+0x508>)
1000117a:	f000 fa03 	bl	10001584 <do_test>
1000117e:	2243      	movs	r2, #67	; 0x43
10001180:	6961      	ldr	r1, [r4, #20]
10001182:	4890      	ldr	r0, [pc, #576]	; (100013c4 <run+0x50c>)
10001184:	f000 f9fe 	bl	10001584 <do_test>
10001188:	2244      	movs	r2, #68	; 0x44
1000118a:	6961      	ldr	r1, [r4, #20]
1000118c:	488e      	ldr	r0, [pc, #568]	; (100013c8 <run+0x510>)
1000118e:	f000 f9f9 	bl	10001584 <do_test>
10001192:	2245      	movs	r2, #69	; 0x45
10001194:	68a1      	ldr	r1, [r4, #8]
10001196:	488d      	ldr	r0, [pc, #564]	; (100013cc <run+0x514>)
10001198:	f000 f9f4 	bl	10001584 <do_test>
1000119c:	2246      	movs	r2, #70	; 0x46
1000119e:	6a21      	ldr	r1, [r4, #32]
100011a0:	488b      	ldr	r0, [pc, #556]	; (100013d0 <run+0x518>)
100011a2:	f000 f9ef 	bl	10001584 <do_test>
100011a6:	2247      	movs	r2, #71	; 0x47
100011a8:	6a21      	ldr	r1, [r4, #32]
100011aa:	488a      	ldr	r0, [pc, #552]	; (100013d4 <run+0x51c>)
100011ac:	f000 f9ea 	bl	10001584 <do_test>
100011b0:	2248      	movs	r2, #72	; 0x48
100011b2:	68a1      	ldr	r1, [r4, #8]
100011b4:	4888      	ldr	r0, [pc, #544]	; (100013d8 <run+0x520>)
100011b6:	f000 f9e5 	bl	10001584 <do_test>
100011ba:	2249      	movs	r2, #73	; 0x49
100011bc:	68a1      	ldr	r1, [r4, #8]
100011be:	4887      	ldr	r0, [pc, #540]	; (100013dc <run+0x524>)
100011c0:	f000 f9e0 	bl	10001584 <do_test>
100011c4:	224a      	movs	r2, #74	; 0x4a
100011c6:	6a21      	ldr	r1, [r4, #32]
100011c8:	4885      	ldr	r0, [pc, #532]	; (100013e0 <run+0x528>)
100011ca:	f000 f9db 	bl	10001584 <do_test>
100011ce:	224b      	movs	r2, #75	; 0x4b
100011d0:	6a21      	ldr	r1, [r4, #32]
100011d2:	4884      	ldr	r0, [pc, #528]	; (100013e4 <run+0x52c>)
100011d4:	f000 f9d6 	bl	10001584 <do_test>
100011d8:	224c      	movs	r2, #76	; 0x4c
100011da:	68a1      	ldr	r1, [r4, #8]
100011dc:	4882      	ldr	r0, [pc, #520]	; (100013e8 <run+0x530>)
100011de:	f000 f9d1 	bl	10001584 <do_test>
100011e2:	224d      	movs	r2, #77	; 0x4d
100011e4:	68a1      	ldr	r1, [r4, #8]
100011e6:	4881      	ldr	r0, [pc, #516]	; (100013ec <run+0x534>)
100011e8:	f000 f9cc 	bl	10001584 <do_test>
100011ec:	224e      	movs	r2, #78	; 0x4e
100011ee:	68a1      	ldr	r1, [r4, #8]
100011f0:	487f      	ldr	r0, [pc, #508]	; (100013f0 <run+0x538>)
100011f2:	f000 f9c7 	bl	10001584 <do_test>
100011f6:	224f      	movs	r2, #79	; 0x4f
100011f8:	68a1      	ldr	r1, [r4, #8]
100011fa:	487e      	ldr	r0, [pc, #504]	; (100013f4 <run+0x53c>)
100011fc:	f000 f9c2 	bl	10001584 <do_test>
10001200:	2250      	movs	r2, #80	; 0x50
10001202:	68a1      	ldr	r1, [r4, #8]
10001204:	487c      	ldr	r0, [pc, #496]	; (100013f8 <run+0x540>)
10001206:	f000 f9bd 	bl	10001584 <do_test>
1000120a:	2251      	movs	r2, #81	; 0x51
1000120c:	68a1      	ldr	r1, [r4, #8]
1000120e:	487b      	ldr	r0, [pc, #492]	; (100013fc <run+0x544>)
10001210:	f000 f9b8 	bl	10001584 <do_test>
10001214:	4d7a      	ldr	r5, [pc, #488]	; (10001400 <run+0x548>)
10001216:	2252      	movs	r2, #82	; 0x52
10001218:	0028      	movs	r0, r5
1000121a:	68a1      	ldr	r1, [r4, #8]
1000121c:	f000 f9b2 	bl	10001584 <do_test>
10001220:	0028      	movs	r0, r5
10001222:	2253      	movs	r2, #83	; 0x53
10001224:	68a1      	ldr	r1, [r4, #8]
10001226:	f000 f9ad 	bl	10001584 <do_test>
1000122a:	2254      	movs	r2, #84	; 0x54
1000122c:	68a1      	ldr	r1, [r4, #8]
1000122e:	4875      	ldr	r0, [pc, #468]	; (10001404 <run+0x54c>)
10001230:	f000 f9a8 	bl	10001584 <do_test>
10001234:	2255      	movs	r2, #85	; 0x55
10001236:	68a1      	ldr	r1, [r4, #8]
10001238:	4873      	ldr	r0, [pc, #460]	; (10001408 <run+0x550>)
1000123a:	f000 f9a3 	bl	10001584 <do_test>
1000123e:	2256      	movs	r2, #86	; 0x56
10001240:	68a1      	ldr	r1, [r4, #8]
10001242:	4872      	ldr	r0, [pc, #456]	; (1000140c <run+0x554>)
10001244:	f000 f99e 	bl	10001584 <do_test>
10001248:	4d71      	ldr	r5, [pc, #452]	; (10001410 <run+0x558>)
1000124a:	2257      	movs	r2, #87	; 0x57
1000124c:	0028      	movs	r0, r5
1000124e:	68a1      	ldr	r1, [r4, #8]
10001250:	f000 f998 	bl	10001584 <do_test>
10001254:	2258      	movs	r2, #88	; 0x58
10001256:	68a1      	ldr	r1, [r4, #8]
10001258:	486e      	ldr	r0, [pc, #440]	; (10001414 <run+0x55c>)
1000125a:	f000 f993 	bl	10001584 <do_test>
1000125e:	0028      	movs	r0, r5
10001260:	2259      	movs	r2, #89	; 0x59
10001262:	68a1      	ldr	r1, [r4, #8]
10001264:	f000 f98e 	bl	10001584 <do_test>
10001268:	225a      	movs	r2, #90	; 0x5a
1000126a:	68a1      	ldr	r1, [r4, #8]
1000126c:	486a      	ldr	r0, [pc, #424]	; (10001418 <run+0x560>)
1000126e:	f000 f989 	bl	10001584 <do_test>
10001272:	225b      	movs	r2, #91	; 0x5b
10001274:	68a1      	ldr	r1, [r4, #8]
10001276:	4869      	ldr	r0, [pc, #420]	; (1000141c <run+0x564>)
10001278:	f000 f984 	bl	10001584 <do_test>
1000127c:	225c      	movs	r2, #92	; 0x5c
1000127e:	6a21      	ldr	r1, [r4, #32]
10001280:	4867      	ldr	r0, [pc, #412]	; (10001420 <run+0x568>)
10001282:	f000 f97f 	bl	10001584 <do_test>
10001286:	225d      	movs	r2, #93	; 0x5d
10001288:	6a21      	ldr	r1, [r4, #32]
1000128a:	4866      	ldr	r0, [pc, #408]	; (10001424 <run+0x56c>)
1000128c:	f000 f97a 	bl	10001584 <do_test>
10001290:	225e      	movs	r2, #94	; 0x5e
10001292:	68a1      	ldr	r1, [r4, #8]
10001294:	4864      	ldr	r0, [pc, #400]	; (10001428 <run+0x570>)
10001296:	f000 f975 	bl	10001584 <do_test>
1000129a:	225f      	movs	r2, #95	; 0x5f
1000129c:	6a21      	ldr	r1, [r4, #32]
1000129e:	4863      	ldr	r0, [pc, #396]	; (1000142c <run+0x574>)
100012a0:	f000 f970 	bl	10001584 <do_test>
100012a4:	2260      	movs	r2, #96	; 0x60
100012a6:	6a21      	ldr	r1, [r4, #32]
100012a8:	e0c2      	b.n	10001430 <run+0x578>
100012aa:	46c0      	nop			; (mov r8, r8)
100012ac:	100016c0 	.word	0x100016c0
100012b0:	10001d24 	.word	0x10001d24
100012b4:	10001c2c 	.word	0x10001c2c
100012b8:	1000009d 	.word	0x1000009d
100012bc:	100000a9 	.word	0x100000a9
100012c0:	100000b5 	.word	0x100000b5
100012c4:	100000c5 	.word	0x100000c5
100012c8:	100000d5 	.word	0x100000d5
100012cc:	100000e5 	.word	0x100000e5
100012d0:	100000f5 	.word	0x100000f5
100012d4:	10000105 	.word	0x10000105
100012d8:	10000115 	.word	0x10000115
100012dc:	10000125 	.word	0x10000125
100012e0:	10000135 	.word	0x10000135
100012e4:	10000141 	.word	0x10000141
100012e8:	1000014d 	.word	0x1000014d
100012ec:	10000159 	.word	0x10000159
100012f0:	10000165 	.word	0x10000165
100012f4:	10000175 	.word	0x10000175
100012f8:	10000185 	.word	0x10000185
100012fc:	10000195 	.word	0x10000195
10001300:	100001a5 	.word	0x100001a5
10001304:	100001b9 	.word	0x100001b9
10001308:	100001cd 	.word	0x100001cd
1000130c:	100001dd 	.word	0x100001dd
10001310:	100001ed 	.word	0x100001ed
10001314:	10000209 	.word	0x10000209
10001318:	10000225 	.word	0x10000225
1000131c:	10000231 	.word	0x10000231
10001320:	1000023d 	.word	0x1000023d
10001324:	1000024d 	.word	0x1000024d
10001328:	1000025d 	.word	0x1000025d
1000132c:	10000269 	.word	0x10000269
10001330:	10000275 	.word	0x10000275
10001334:	10000281 	.word	0x10000281
10001338:	1000028d 	.word	0x1000028d
1000133c:	1000029d 	.word	0x1000029d
10001340:	100002b1 	.word	0x100002b1
10001344:	100002d9 	.word	0x100002d9
10001348:	100002f5 	.word	0x100002f5
1000134c:	1000031d 	.word	0x1000031d
10001350:	10000339 	.word	0x10000339
10001354:	10000365 	.word	0x10000365
10001358:	10000391 	.word	0x10000391
1000135c:	100003d9 	.word	0x100003d9
10001360:	1000040d 	.word	0x1000040d
10001364:	10000435 	.word	0x10000435
10001368:	10000451 	.word	0x10000451
1000136c:	10000465 	.word	0x10000465
10001370:	10000919 	.word	0x10000919
10001374:	10000925 	.word	0x10000925
10001378:	10000949 	.word	0x10000949
1000137c:	10000989 	.word	0x10000989
10001380:	10000961 	.word	0x10000961
10001384:	10000975 	.word	0x10000975
10001388:	100008e9 	.word	0x100008e9
1000138c:	100008f5 	.word	0x100008f5
10001390:	100009f1 	.word	0x100009f1
10001394:	100009d5 	.word	0x100009d5
10001398:	10000a2d 	.word	0x10000a2d
1000139c:	10000a45 	.word	0x10000a45
100013a0:	10000a5d 	.word	0x10000a5d
100013a4:	10000a79 	.word	0x10000a79
100013a8:	10000a9d 	.word	0x10000a9d
100013ac:	10000ac5 	.word	0x10000ac5
100013b0:	10000ae1 	.word	0x10000ae1
100013b4:	10000b01 	.word	0x10000b01
100013b8:	10000b21 	.word	0x10000b21
100013bc:	10000b41 	.word	0x10000b41
100013c0:	10000b59 	.word	0x10000b59
100013c4:	10000b85 	.word	0x10000b85
100013c8:	10000bc9 	.word	0x10000bc9
100013cc:	10000bf9 	.word	0x10000bf9
100013d0:	100008b9 	.word	0x100008b9
100013d4:	10000865 	.word	0x10000865
100013d8:	10000c85 	.word	0x10000c85
100013dc:	10000cb1 	.word	0x10000cb1
100013e0:	10000481 	.word	0x10000481
100013e4:	1000049d 	.word	0x1000049d
100013e8:	100004b9 	.word	0x100004b9
100013ec:	100004ed 	.word	0x100004ed
100013f0:	10000525 	.word	0x10000525
100013f4:	10000555 	.word	0x10000555
100013f8:	10000595 	.word	0x10000595
100013fc:	100005a1 	.word	0x100005a1
10001400:	100005ad 	.word	0x100005ad
10001404:	100005c9 	.word	0x100005c9
10001408:	100005e5 	.word	0x100005e5
1000140c:	10000601 	.word	0x10000601
10001410:	1000062d 	.word	0x1000062d
10001414:	10000655 	.word	0x10000655
10001418:	10000681 	.word	0x10000681
1000141c:	10000691 	.word	0x10000691
10001420:	100006a5 	.word	0x100006a5
10001424:	100006b1 	.word	0x100006b1
10001428:	100006cd 	.word	0x100006cd
1000142c:	100008c9 	.word	0x100008c9
10001430:	4838      	ldr	r0, [pc, #224]	; (10001514 <run+0x65c>)
10001432:	f000 f8a7 	bl	10001584 <do_test>
10001436:	2261      	movs	r2, #97	; 0x61
10001438:	68a1      	ldr	r1, [r4, #8]
1000143a:	4837      	ldr	r0, [pc, #220]	; (10001518 <run+0x660>)
1000143c:	f000 f8a2 	bl	10001584 <do_test>
10001440:	2262      	movs	r2, #98	; 0x62
10001442:	68a1      	ldr	r1, [r4, #8]
10001444:	4835      	ldr	r0, [pc, #212]	; (1000151c <run+0x664>)
10001446:	f000 f89d 	bl	10001584 <do_test>
1000144a:	2263      	movs	r2, #99	; 0x63
1000144c:	68a1      	ldr	r1, [r4, #8]
1000144e:	4834      	ldr	r0, [pc, #208]	; (10001520 <run+0x668>)
10001450:	f000 f898 	bl	10001584 <do_test>
10001454:	2264      	movs	r2, #100	; 0x64
10001456:	68a1      	ldr	r1, [r4, #8]
10001458:	4832      	ldr	r0, [pc, #200]	; (10001524 <run+0x66c>)
1000145a:	f000 f893 	bl	10001584 <do_test>
1000145e:	2265      	movs	r2, #101	; 0x65
10001460:	6a21      	ldr	r1, [r4, #32]
10001462:	4831      	ldr	r0, [pc, #196]	; (10001528 <run+0x670>)
10001464:	f000 f88e 	bl	10001584 <do_test>
10001468:	2266      	movs	r2, #102	; 0x66
1000146a:	6a21      	ldr	r1, [r4, #32]
1000146c:	482f      	ldr	r0, [pc, #188]	; (1000152c <run+0x674>)
1000146e:	f000 f889 	bl	10001584 <do_test>
10001472:	2267      	movs	r2, #103	; 0x67
10001474:	6a21      	ldr	r1, [r4, #32]
10001476:	482e      	ldr	r0, [pc, #184]	; (10001530 <run+0x678>)
10001478:	f000 f884 	bl	10001584 <do_test>
1000147c:	2268      	movs	r2, #104	; 0x68
1000147e:	6a21      	ldr	r1, [r4, #32]
10001480:	482c      	ldr	r0, [pc, #176]	; (10001534 <run+0x67c>)
10001482:	f000 f87f 	bl	10001584 <do_test>
10001486:	2269      	movs	r2, #105	; 0x69
10001488:	6a21      	ldr	r1, [r4, #32]
1000148a:	482b      	ldr	r0, [pc, #172]	; (10001538 <run+0x680>)
1000148c:	f000 f87a 	bl	10001584 <do_test>
10001490:	226a      	movs	r2, #106	; 0x6a
10001492:	6a21      	ldr	r1, [r4, #32]
10001494:	4829      	ldr	r0, [pc, #164]	; (1000153c <run+0x684>)
10001496:	f000 f875 	bl	10001584 <do_test>
1000149a:	226b      	movs	r2, #107	; 0x6b
1000149c:	68a1      	ldr	r1, [r4, #8]
1000149e:	4828      	ldr	r0, [pc, #160]	; (10001540 <run+0x688>)
100014a0:	f000 f870 	bl	10001584 <do_test>
100014a4:	226c      	movs	r2, #108	; 0x6c
100014a6:	68a1      	ldr	r1, [r4, #8]
100014a8:	4826      	ldr	r0, [pc, #152]	; (10001544 <run+0x68c>)
100014aa:	f000 f86b 	bl	10001584 <do_test>
100014ae:	226d      	movs	r2, #109	; 0x6d
100014b0:	68a1      	ldr	r1, [r4, #8]
100014b2:	4825      	ldr	r0, [pc, #148]	; (10001548 <run+0x690>)
100014b4:	f000 f866 	bl	10001584 <do_test>
100014b8:	226e      	movs	r2, #110	; 0x6e
100014ba:	68a1      	ldr	r1, [r4, #8]
100014bc:	4823      	ldr	r0, [pc, #140]	; (1000154c <run+0x694>)
100014be:	f000 f861 	bl	10001584 <do_test>
100014c2:	226f      	movs	r2, #111	; 0x6f
100014c4:	68a1      	ldr	r1, [r4, #8]
100014c6:	4822      	ldr	r0, [pc, #136]	; (10001550 <run+0x698>)
100014c8:	f000 f85c 	bl	10001584 <do_test>
100014cc:	2270      	movs	r2, #112	; 0x70
100014ce:	68a1      	ldr	r1, [r4, #8]
100014d0:	4820      	ldr	r0, [pc, #128]	; (10001554 <run+0x69c>)
100014d2:	f000 f857 	bl	10001584 <do_test>
100014d6:	2271      	movs	r2, #113	; 0x71
100014d8:	68a1      	ldr	r1, [r4, #8]
100014da:	481f      	ldr	r0, [pc, #124]	; (10001558 <run+0x6a0>)
100014dc:	f000 f852 	bl	10001584 <do_test>
100014e0:	2272      	movs	r2, #114	; 0x72
100014e2:	68a1      	ldr	r1, [r4, #8]
100014e4:	481d      	ldr	r0, [pc, #116]	; (1000155c <run+0x6a4>)
100014e6:	f000 f84d 	bl	10001584 <do_test>
100014ea:	2273      	movs	r2, #115	; 0x73
100014ec:	68a1      	ldr	r1, [r4, #8]
100014ee:	481c      	ldr	r0, [pc, #112]	; (10001560 <run+0x6a8>)
100014f0:	f000 f848 	bl	10001584 <do_test>
100014f4:	2274      	movs	r2, #116	; 0x74
100014f6:	68a1      	ldr	r1, [r4, #8]
100014f8:	481a      	ldr	r0, [pc, #104]	; (10001564 <run+0x6ac>)
100014fa:	f000 f843 	bl	10001584 <do_test>
100014fe:	68a1      	ldr	r1, [r4, #8]
10001500:	2275      	movs	r2, #117	; 0x75
10001502:	4819      	ldr	r0, [pc, #100]	; (10001568 <run+0x6b0>)
10001504:	f000 f83e 	bl	10001584 <do_test>
10001508:	bd30      	pop	{r4, r5, pc}
1000150a:	2301      	movs	r3, #1
1000150c:	4917      	ldr	r1, [pc, #92]	; (1000156c <run+0x6b4>)
1000150e:	7023      	strb	r3, [r4, #0]
10001510:	60a1      	str	r1, [r4, #8]
10001512:	e4d8      	b.n	10000ec6 <run+0xe>
10001514:	1000088d 	.word	0x1000088d
10001518:	10000931 	.word	0x10000931
1000151c:	1000099d 	.word	0x1000099d
10001520:	10000901 	.word	0x10000901
10001524:	10000a09 	.word	0x10000a09
10001528:	10000db1 	.word	0x10000db1
1000152c:	10000dc1 	.word	0x10000dc1
10001530:	10000dd1 	.word	0x10000dd1
10001534:	10000e01 	.word	0x10000e01
10001538:	10000e1d 	.word	0x10000e1d
1000153c:	10000e39 	.word	0x10000e39
10001540:	100006d9 	.word	0x100006d9
10001544:	100006f5 	.word	0x100006f5
10001548:	10000711 	.word	0x10000711
1000154c:	1000073d 	.word	0x1000073d
10001550:	10000769 	.word	0x10000769
10001554:	1000079d 	.word	0x1000079d
10001558:	100007c9 	.word	0x100007c9
1000155c:	100007f9 	.word	0x100007f9
10001560:	1000082d 	.word	0x1000082d
10001564:	10000e6d 	.word	0x10000e6d
10001568:	10000e9d 	.word	0x10000e9d
1000156c:	10001dc4 	.word	0x10001dc4

10001570 <memset>:
10001570:	1882      	adds	r2, r0, r2
10001572:	4290      	cmp	r0, r2
10001574:	d205      	bcs.n	10001582 <memset+0x12>
10001576:	0003      	movs	r3, r0
10001578:	b2c9      	uxtb	r1, r1
1000157a:	7019      	strb	r1, [r3, #0]
1000157c:	3301      	adds	r3, #1
1000157e:	429a      	cmp	r2, r3
10001580:	d1fb      	bne.n	1000157a <memset+0xa>
10001582:	4770      	bx	lr

10001584 <do_test>:
10001584:	b5f0      	push	{r4, r5, r6, r7, lr}
10001586:	4646      	mov	r6, r8
10001588:	464f      	mov	r7, r9
1000158a:	46d6      	mov	lr, sl
1000158c:	2300      	movs	r3, #0
1000158e:	b5c0      	push	{r6, r7, lr}
10001590:	0017      	movs	r7, r2
10001592:	4a19      	ldr	r2, [pc, #100]	; (100015f8 <do_test+0x74>)
10001594:	4680      	mov	r8, r0
10001596:	6013      	str	r3, [r2, #0]
10001598:	6093      	str	r3, [r2, #8]
1000159a:	3305      	adds	r3, #5
1000159c:	6013      	str	r3, [r2, #0]
1000159e:	4b17      	ldr	r3, [pc, #92]	; (100015fc <do_test+0x78>)
100015a0:	000e      	movs	r6, r1
100015a2:	6053      	str	r3, [r2, #4]
100015a4:	6893      	ldr	r3, [r2, #8]
100015a6:	2b00      	cmp	r3, #0
100015a8:	d103      	bne.n	100015b2 <do_test+0x2e>
100015aa:	46c0      	nop			; (mov r8, r8)
100015ac:	6893      	ldr	r3, [r2, #8]
100015ae:	2b00      	cmp	r3, #0
100015b0:	d0fb      	beq.n	100015aa <do_test+0x26>
100015b2:	4b11      	ldr	r3, [pc, #68]	; (100015f8 <do_test+0x74>)
100015b4:	007d      	lsls	r5, r7, #1
100015b6:	4699      	mov	r9, r3
100015b8:	689c      	ldr	r4, [r3, #8]
100015ba:	2300      	movs	r3, #0
100015bc:	6033      	str	r3, [r6, #0]
100015be:	47c0      	blx	r8
100015c0:	6833      	ldr	r3, [r6, #0]
100015c2:	4a0f      	ldr	r2, [pc, #60]	; (10001600 <do_test+0x7c>)
100015c4:	00ff      	lsls	r7, r7, #3
100015c6:	50bb      	str	r3, [r7, r2]
100015c8:	2301      	movs	r3, #1
100015ca:	4692      	mov	sl, r2
100015cc:	425b      	negs	r3, r3
100015ce:	6033      	str	r3, [r6, #0]
100015d0:	47c0      	blx	r8
100015d2:	4652      	mov	r2, sl
100015d4:	6833      	ldr	r3, [r6, #0]
100015d6:	3501      	adds	r5, #1
100015d8:	00ad      	lsls	r5, r5, #2
100015da:	50ab      	str	r3, [r5, r2]
100015dc:	464b      	mov	r3, r9
100015de:	689a      	ldr	r2, [r3, #8]
100015e0:	4b08      	ldr	r3, [pc, #32]	; (10001604 <do_test+0x80>)
100015e2:	6819      	ldr	r1, [r3, #0]
100015e4:	468c      	mov	ip, r1
100015e6:	4464      	add	r4, ip
100015e8:	1aa4      	subs	r4, r4, r2
100015ea:	601c      	str	r4, [r3, #0]
100015ec:	bc1c      	pop	{r2, r3, r4}
100015ee:	4690      	mov	r8, r2
100015f0:	4699      	mov	r9, r3
100015f2:	46a2      	mov	sl, r4
100015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100015f6:	46c0      	nop			; (mov r8, r8)
100015f8:	e000e010 	.word	0xe000e010
100015fc:	00ffffff 	.word	0x00ffffff
10001600:	100016e8 	.word	0x100016e8
10001604:	100016e4 	.word	0x100016e4

10001608 <NMI_Handler>:
10001608:	e7fe      	b.n	10001608 <NMI_Handler>
1000160a:	46c0      	nop			; (mov r8, r8)

1000160c <HardFault_Handler>:
1000160c:	e7fe      	b.n	1000160c <HardFault_Handler>
1000160e:	46c0      	nop			; (mov r8, r8)

10001610 <SVCall_Handler>:
10001610:	e7fe      	b.n	10001610 <SVCall_Handler>
10001612:	46c0      	nop			; (mov r8, r8)

10001614 <PendSV_Handler>:
10001614:	e7fe      	b.n	10001614 <PendSV_Handler>
10001616:	46c0      	nop			; (mov r8, r8)

10001618 <SysTick_Handler>:
10001618:	e7fe      	b.n	10001618 <SysTick_Handler>
1000161a:	46c0      	nop			; (mov r8, r8)

1000161c <SPI0_IRQHandler>:
1000161c:	e7fe      	b.n	1000161c <SPI0_IRQHandler>
1000161e:	46c0      	nop			; (mov r8, r8)

10001620 <SPI1_IRQHandler>:
10001620:	e7fe      	b.n	10001620 <SPI1_IRQHandler>
10001622:	46c0      	nop			; (mov r8, r8)

10001624 <UART0_IRQHandler>:
10001624:	e7fe      	b.n	10001624 <UART0_IRQHandler>
10001626:	46c0      	nop			; (mov r8, r8)

10001628 <UART1_IRQHandler>:
10001628:	e7fe      	b.n	10001628 <UART1_IRQHandler>
1000162a:	46c0      	nop			; (mov r8, r8)

1000162c <UART2_IRQHandler>:
1000162c:	e7fe      	b.n	1000162c <UART2_IRQHandler>
1000162e:	46c0      	nop			; (mov r8, r8)

10001630 <Reserved1_IRQHandler>:
10001630:	e7fe      	b.n	10001630 <Reserved1_IRQHandler>
10001632:	46c0      	nop			; (mov r8, r8)

10001634 <SCT_IRQHandler>:
10001634:	e7fe      	b.n	10001634 <SCT_IRQHandler>
10001636:	46c0      	nop			; (mov r8, r8)

10001638 <MRT_IRQHandler>:
10001638:	e7fe      	b.n	10001638 <MRT_IRQHandler>
1000163a:	46c0      	nop			; (mov r8, r8)

1000163c <CMP_IRQHandler>:
1000163c:	e7fe      	b.n	1000163c <CMP_IRQHandler>
1000163e:	46c0      	nop			; (mov r8, r8)

10001640 <WDT_IRQHandler>:
10001640:	e7fe      	b.n	10001640 <WDT_IRQHandler>
10001642:	46c0      	nop			; (mov r8, r8)

10001644 <BOD_IRQHandler>:
10001644:	e7fe      	b.n	10001644 <BOD_IRQHandler>
10001646:	46c0      	nop			; (mov r8, r8)

10001648 <WKT_IRQHandler>:
10001648:	e7fe      	b.n	10001648 <WKT_IRQHandler>
1000164a:	46c0      	nop			; (mov r8, r8)

1000164c <Reserved11_IRQHandler>:
1000164c:	e7fe      	b.n	1000164c <Reserved11_IRQHandler>
1000164e:	46c0      	nop			; (mov r8, r8)

10001650 <PININT0_IRQHandler>:
10001650:	e7fe      	b.n	10001650 <PININT0_IRQHandler>
10001652:	46c0      	nop			; (mov r8, r8)

10001654 <PININT1_IRQHandler>:
10001654:	e7fe      	b.n	10001654 <PININT1_IRQHandler>
10001656:	46c0      	nop			; (mov r8, r8)

10001658 <PININT2_IRQHandler>:
10001658:	e7fe      	b.n	10001658 <PININT2_IRQHandler>
1000165a:	46c0      	nop			; (mov r8, r8)

1000165c <PININT3_IRQHandler>:
1000165c:	e7fe      	b.n	1000165c <PININT3_IRQHandler>
1000165e:	46c0      	nop			; (mov r8, r8)

10001660 <PININT4_IRQHandler>:
10001660:	e7fe      	b.n	10001660 <PININT4_IRQHandler>
10001662:	46c0      	nop			; (mov r8, r8)

10001664 <PININT5_IRQHandler>:
10001664:	e7fe      	b.n	10001664 <PININT5_IRQHandler>
10001666:	46c0      	nop			; (mov r8, r8)

10001668 <PININT6_IRQHandler>:
10001668:	e7fe      	b.n	10001668 <PININT6_IRQHandler>
1000166a:	46c0      	nop			; (mov r8, r8)

1000166c <PININT7_IRQHandler>:
1000166c:	e7fe      	b.n	1000166c <PININT7_IRQHandler>
1000166e:	46c0      	nop			; (mov r8, r8)

10001670 <init>:
10001670:	4806      	ldr	r0, [pc, #24]	; (1000168c <init+0x1c>)
10001672:	4a07      	ldr	r2, [pc, #28]	; (10001690 <init+0x20>)
10001674:	b500      	push	{lr}
10001676:	1a12      	subs	r2, r2, r0
10001678:	d002      	beq.n	10001680 <init+0x10>
1000167a:	2100      	movs	r1, #0
1000167c:	f7ff ff78 	bl	10001570 <memset>
10001680:	4a04      	ldr	r2, [pc, #16]	; (10001694 <init+0x24>)
10001682:	4b05      	ldr	r3, [pc, #20]	; (10001698 <init+0x28>)
10001684:	609a      	str	r2, [r3, #8]
10001686:	f000 f809 	bl	1000169c <main>
1000168a:	bd00      	pop	{pc}
1000168c:	100016c0 	.word	0x100016c0
10001690:	10001a88 	.word	0x10001a88
10001694:	10000000 	.word	0x10000000
10001698:	e000ed00 	.word	0xe000ed00

Disassembly of section .rodata:

100016a8 <.rodata>:
100016a8:	00000006 	.word	0x00000006
100016ac:	00000002 	.word	0x00000002
100016b0:	3e000000 	.word	0x3e000000
100016b4:	00000019 	.word	0x00000019
100016b8:	3e000000 	.word	0x3e000000
100016bc:	00000019 	.word	0x00000019

Disassembly of section .bss:

100016c0 <guard variable for run::serial2_config>:
	...

100016c8 <run::serial2_config>:
100016c8:	00000000                                ....

100016cc <guard variable for run::timer1_prescale>:
	...

100016d4 <run::timer1_prescale>:
100016d4:	00000000                                ....

100016d8 <guard variable for run::gpio1_words_3>:
	...

100016e0 <run::gpio1_words_3>:
100016e0:	00000000                                ....

100016e4 <elapsed_time>:
100016e4:	00000000                                ....

100016e8 <results>:
	...
