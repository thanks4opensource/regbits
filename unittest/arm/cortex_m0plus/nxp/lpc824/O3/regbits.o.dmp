
O3/regbits.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <zero_reg()>:
       0:	2200      	movs	r2, #0
       2:	4b01      	ldr	r3, [pc, #4]	; (8 <zero_reg()+0x8>)
       4:	605a      	str	r2, [r3, #4]
       6:	4770      	bx	lr
       8:	10001dc0 	.word	0x10001dc0

0000000c <zero_array()>:
       c:	2200      	movs	r2, #0
       e:	4b01      	ldr	r3, [pc, #4]	; (14 <zero_array()+0x8>)
      10:	62da      	str	r2, [r3, #44]	; 0x2c
      12:	4770      	bx	lr
      14:	10001c00 	.word	0x10001c00

00000018 <set_singl_bits_operator()>:
      18:	2140      	movs	r1, #64	; 0x40
      1a:	4a02      	ldr	r2, [pc, #8]	; (24 <set_singl_bits_operator()+0xc>)
      1c:	6853      	ldr	r3, [r2, #4]
      1e:	430b      	orrs	r3, r1
      20:	6053      	str	r3, [r2, #4]
      22:	4770      	bx	lr
      24:	10001dc0 	.word	0x10001dc0

00000028 <set_singl_bits_method()>:
      28:	2140      	movs	r1, #64	; 0x40
      2a:	4a02      	ldr	r2, [pc, #8]	; (34 <set_singl_bits_method()+0xc>)
      2c:	6853      	ldr	r3, [r2, #4]
      2e:	430b      	orrs	r3, r1
      30:	6053      	str	r3, [r2, #4]
      32:	4770      	bx	lr
      34:	10001dc0 	.word	0x10001dc0

00000038 <clr_singl_bits_operator()>:
      38:	2140      	movs	r1, #64	; 0x40
      3a:	4a02      	ldr	r2, [pc, #8]	; (44 <clr_singl_bits_operator()+0xc>)
      3c:	6853      	ldr	r3, [r2, #4]
      3e:	438b      	bics	r3, r1
      40:	6053      	str	r3, [r2, #4]
      42:	4770      	bx	lr
      44:	10001dc0 	.word	0x10001dc0

00000048 <clr_singl_bits_method()>:
      48:	2140      	movs	r1, #64	; 0x40
      4a:	4a02      	ldr	r2, [pc, #8]	; (54 <clr_singl_bits_method()+0xc>)
      4c:	6853      	ldr	r3, [r2, #4]
      4e:	438b      	bics	r3, r1
      50:	6053      	str	r3, [r2, #4]
      52:	4770      	bx	lr
      54:	10001dc0 	.word	0x10001dc0

00000058 <set_singl_mskd_operator()>:
      58:	2102      	movs	r1, #2
      5a:	4a02      	ldr	r2, [pc, #8]	; (64 <set_singl_mskd_operator()+0xc>)
      5c:	6853      	ldr	r3, [r2, #4]
      5e:	430b      	orrs	r3, r1
      60:	6053      	str	r3, [r2, #4]
      62:	4770      	bx	lr
      64:	10001dc0 	.word	0x10001dc0

00000068 <set_singl_mskd_method()>:
      68:	2102      	movs	r1, #2
      6a:	4a02      	ldr	r2, [pc, #8]	; (74 <set_singl_mskd_method()+0xc>)
      6c:	6853      	ldr	r3, [r2, #4]
      6e:	430b      	orrs	r3, r1
      70:	6053      	str	r3, [r2, #4]
      72:	4770      	bx	lr
      74:	10001dc0 	.word	0x10001dc0

00000078 <clr_singl_mskd_operator()>:
      78:	2102      	movs	r1, #2
      7a:	4a02      	ldr	r2, [pc, #8]	; (84 <clr_singl_mskd_operator()+0xc>)
      7c:	6853      	ldr	r3, [r2, #4]
      7e:	438b      	bics	r3, r1
      80:	6053      	str	r3, [r2, #4]
      82:	4770      	bx	lr
      84:	10001dc0 	.word	0x10001dc0

00000088 <clr_singl_mskd_method()>:
      88:	2102      	movs	r1, #2
      8a:	4a02      	ldr	r2, [pc, #8]	; (94 <clr_singl_mskd_method()+0xc>)
      8c:	6853      	ldr	r3, [r2, #4]
      8e:	438b      	bics	r3, r1
      90:	6053      	str	r3, [r2, #4]
      92:	4770      	bx	lr
      94:	10001dc0 	.word	0x10001dc0

00000098 <equ_singl_bits_operator()>:
      98:	2240      	movs	r2, #64	; 0x40
      9a:	4b01      	ldr	r3, [pc, #4]	; (a0 <equ_singl_bits_operator()+0x8>)
      9c:	605a      	str	r2, [r3, #4]
      9e:	4770      	bx	lr
      a0:	10001dc0 	.word	0x10001dc0

000000a4 <equ_singl_bits_method()>:
      a4:	2240      	movs	r2, #64	; 0x40
      a6:	4b01      	ldr	r3, [pc, #4]	; (ac <equ_singl_bits_method()+0x8>)
      a8:	605a      	str	r2, [r3, #4]
      aa:	4770      	bx	lr
      ac:	10001dc0 	.word	0x10001dc0

000000b0 <equ_singl_mskd_operator()>:
      b0:	2202      	movs	r2, #2
      b2:	4b01      	ldr	r3, [pc, #4]	; (b8 <equ_singl_mskd_operator()+0x8>)
      b4:	605a      	str	r2, [r3, #4]
      b6:	4770      	bx	lr
      b8:	10001dc0 	.word	0x10001dc0

000000bc <equ_singl_mskd_method()>:
      bc:	2202      	movs	r2, #2
      be:	4b01      	ldr	r3, [pc, #4]	; (c4 <equ_singl_mskd_method()+0x8>)
      c0:	605a      	str	r2, [r3, #4]
      c2:	4770      	bx	lr
      c4:	10001dc0 	.word	0x10001dc0

000000c8 <flp_singl_bits_operator()>:
      c8:	2140      	movs	r1, #64	; 0x40
      ca:	4a02      	ldr	r2, [pc, #8]	; (d4 <flp_singl_bits_operator()+0xc>)
      cc:	6853      	ldr	r3, [r2, #4]
      ce:	404b      	eors	r3, r1
      d0:	6053      	str	r3, [r2, #4]
      d2:	4770      	bx	lr
      d4:	10001dc0 	.word	0x10001dc0

000000d8 <flp_singl_bits_method()>:
      d8:	2140      	movs	r1, #64	; 0x40
      da:	4a02      	ldr	r2, [pc, #8]	; (e4 <flp_singl_bits_method()+0xc>)
      dc:	6853      	ldr	r3, [r2, #4]
      de:	404b      	eors	r3, r1
      e0:	6053      	str	r3, [r2, #4]
      e2:	4770      	bx	lr
      e4:	10001dc0 	.word	0x10001dc0

000000e8 <flp_singl_mskd_operator()>:
      e8:	2102      	movs	r1, #2
      ea:	4a02      	ldr	r2, [pc, #8]	; (f4 <flp_singl_mskd_operator()+0xc>)
      ec:	6853      	ldr	r3, [r2, #4]
      ee:	404b      	eors	r3, r1
      f0:	6053      	str	r3, [r2, #4]
      f2:	4770      	bx	lr
      f4:	10001dc0 	.word	0x10001dc0

000000f8 <flp_singl_mskd_method()>:
      f8:	2102      	movs	r1, #2
      fa:	4a02      	ldr	r2, [pc, #8]	; (104 <flp_singl_mskd_method()+0xc>)
      fc:	6853      	ldr	r3, [r2, #4]
      fe:	404b      	eors	r3, r1
     100:	6053      	str	r3, [r2, #4]
     102:	4770      	bx	lr
     104:	10001dc0 	.word	0x10001dc0

00000108 <ins_singl_mskd_operator()>:
     108:	2106      	movs	r1, #6
     10a:	4a03      	ldr	r2, [pc, #12]	; (118 <ins_singl_mskd_operator()+0x10>)
     10c:	6853      	ldr	r3, [r2, #4]
     10e:	438b      	bics	r3, r1
     110:	3902      	subs	r1, #2
     112:	430b      	orrs	r3, r1
     114:	6053      	str	r3, [r2, #4]
     116:	4770      	bx	lr
     118:	10001dc0 	.word	0x10001dc0

0000011c <ins_singl_mskd_method()>:
     11c:	2106      	movs	r1, #6
     11e:	4a03      	ldr	r2, [pc, #12]	; (12c <ins_singl_mskd_method()+0x10>)
     120:	6853      	ldr	r3, [r2, #4]
     122:	438b      	bics	r3, r1
     124:	3902      	subs	r1, #2
     126:	430b      	orrs	r3, r1
     128:	6053      	str	r3, [r2, #4]
     12a:	4770      	bx	lr
     12c:	10001dc0 	.word	0x10001dc0

00000130 <set_multi_bits_operator()>:
     130:	2121      	movs	r1, #33	; 0x21
     132:	4a02      	ldr	r2, [pc, #8]	; (13c <set_multi_bits_operator()+0xc>)
     134:	6853      	ldr	r3, [r2, #4]
     136:	430b      	orrs	r3, r1
     138:	6053      	str	r3, [r2, #4]
     13a:	4770      	bx	lr
     13c:	10001dc0 	.word	0x10001dc0

00000140 <set_multi_bits_method()>:
     140:	2121      	movs	r1, #33	; 0x21
     142:	4a02      	ldr	r2, [pc, #8]	; (14c <set_multi_bits_method()+0xc>)
     144:	6853      	ldr	r3, [r2, #4]
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
     14a:	4770      	bx	lr
     14c:	10001dc0 	.word	0x10001dc0

00000150 <ins_multi_mskd_operator()>:
     150:	4904      	ldr	r1, [pc, #16]	; (164 <ins_multi_mskd_operator()+0x14>)
     152:	4a05      	ldr	r2, [pc, #20]	; (168 <ins_multi_mskd_operator()+0x18>)
     154:	684b      	ldr	r3, [r1, #4]
     156:	401a      	ands	r2, r3
     158:	23c1      	movs	r3, #193	; 0xc1
     15a:	005b      	lsls	r3, r3, #1
     15c:	4313      	orrs	r3, r2
     15e:	604b      	str	r3, [r1, #4]
     160:	4770      	bx	lr
     162:	46c0      	nop			; (mov r8, r8)
     164:	10001dc0 	.word	0x10001dc0
     168:	fffff079 	.word	0xfffff079

0000016c <ins_multi_mskd_method()>:
     16c:	4904      	ldr	r1, [pc, #16]	; (180 <ins_multi_mskd_method()+0x14>)
     16e:	4a05      	ldr	r2, [pc, #20]	; (184 <ins_multi_mskd_method()+0x18>)
     170:	684b      	ldr	r3, [r1, #4]
     172:	401a      	ands	r2, r3
     174:	23c1      	movs	r3, #193	; 0xc1
     176:	005b      	lsls	r3, r3, #1
     178:	4313      	orrs	r3, r2
     17a:	604b      	str	r3, [r1, #4]
     17c:	4770      	bx	lr
     17e:	46c0      	nop			; (mov r8, r8)
     180:	10001dc0 	.word	0x10001dc0
     184:	fffff079 	.word	0xfffff079

00000188 <equ_multi_bits_operator()>:
     188:	2260      	movs	r2, #96	; 0x60
     18a:	4b01      	ldr	r3, [pc, #4]	; (190 <equ_multi_bits_operator()+0x8>)
     18c:	605a      	str	r2, [r3, #4]
     18e:	4770      	bx	lr
     190:	10001dc0 	.word	0x10001dc0

00000194 <equ_multi_bits_method()>:
     194:	2260      	movs	r2, #96	; 0x60
     196:	4b01      	ldr	r3, [pc, #4]	; (19c <equ_multi_bits_method()+0x8>)
     198:	605a      	str	r2, [r3, #4]
     19a:	4770      	bx	lr
     19c:	10001dc0 	.word	0x10001dc0

000001a0 <equ_multi_mskd_operator()>:
     1a0:	22c2      	movs	r2, #194	; 0xc2
     1a2:	4b02      	ldr	r3, [pc, #8]	; (1ac <equ_multi_mskd_operator()+0xc>)
     1a4:	0092      	lsls	r2, r2, #2
     1a6:	605a      	str	r2, [r3, #4]
     1a8:	4770      	bx	lr
     1aa:	46c0      	nop			; (mov r8, r8)
     1ac:	10001dc0 	.word	0x10001dc0

000001b0 <equ_multi_mskd_method()>:
     1b0:	22c2      	movs	r2, #194	; 0xc2
     1b2:	4b02      	ldr	r3, [pc, #8]	; (1bc <equ_multi_mskd_method()+0xc>)
     1b4:	0092      	lsls	r2, r2, #2
     1b6:	605a      	str	r2, [r3, #4]
     1b8:	4770      	bx	lr
     1ba:	46c0      	nop			; (mov r8, r8)
     1bc:	10001dc0 	.word	0x10001dc0

000001c0 <equ_bits_mskd_operator()>:
     1c0:	2222      	movs	r2, #34	; 0x22
     1c2:	4b01      	ldr	r3, [pc, #4]	; (1c8 <equ_bits_mskd_operator()+0x8>)
     1c4:	605a      	str	r2, [r3, #4]
     1c6:	4770      	bx	lr
     1c8:	10001dc0 	.word	0x10001dc0

000001cc <equ_bits_mskd_method()>:
     1cc:	2222      	movs	r2, #34	; 0x22
     1ce:	4b01      	ldr	r3, [pc, #4]	; (1d4 <equ_bits_mskd_method()+0x8>)
     1d0:	605a      	str	r2, [r3, #4]
     1d2:	4770      	bx	lr
     1d4:	10001dc0 	.word	0x10001dc0

000001d8 <equ_mskd_bits_operator()>:
     1d8:	2244      	movs	r2, #68	; 0x44
     1da:	4b01      	ldr	r3, [pc, #4]	; (1e0 <equ_mskd_bits_operator()+0x8>)
     1dc:	605a      	str	r2, [r3, #4]
     1de:	4770      	bx	lr
     1e0:	10001dc0 	.word	0x10001dc0

000001e4 <equ_mskd_bits_method()>:
     1e4:	2244      	movs	r2, #68	; 0x44
     1e6:	4b01      	ldr	r3, [pc, #4]	; (1ec <equ_mskd_bits_method()+0x8>)
     1e8:	605a      	str	r2, [r3, #4]
     1ea:	4770      	bx	lr
     1ec:	10001dc0 	.word	0x10001dc0

000001f0 <equ_bits_var()>:
     1f0:	2240      	movs	r2, #64	; 0x40
     1f2:	4b02      	ldr	r3, [pc, #8]	; (1fc <equ_bits_var()+0xc>)
     1f4:	605a      	str	r2, [r3, #4]
     1f6:	3a3f      	subs	r2, #63	; 0x3f
     1f8:	605a      	str	r2, [r3, #4]
     1fa:	4770      	bx	lr
     1fc:	10001dc0 	.word	0x10001dc0

00000200 <equ_mskd_var()>:
     200:	2202      	movs	r2, #2
     202:	4b03      	ldr	r3, [pc, #12]	; (210 <equ_mskd_var()+0x10>)
     204:	605a      	str	r2, [r3, #4]
     206:	327f      	adds	r2, #127	; 0x7f
     208:	32ff      	adds	r2, #255	; 0xff
     20a:	605a      	str	r2, [r3, #4]
     20c:	4770      	bx	lr
     20e:	46c0      	nop			; (mov r8, r8)
     210:	10001dc0 	.word	0x10001dc0

00000214 <cmp_equ_zero()>:
     214:	2200      	movs	r2, #0
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <cmp_equ_zero()+0x20>)
     218:	605a      	str	r2, [r3, #4]
     21a:	685b      	ldr	r3, [r3, #4]
     21c:	2b00      	cmp	r3, #0
     21e:	d104      	bne.n	22a <cmp_equ_zero()+0x16>
     220:	22e8      	movs	r2, #232	; 0xe8
     222:	4b05      	ldr	r3, [pc, #20]	; (238 <cmp_equ_zero()+0x24>)
     224:	0592      	lsls	r2, r2, #22
     226:	605a      	str	r2, [r3, #4]
     228:	4770      	bx	lr
     22a:	2288      	movs	r2, #136	; 0x88
     22c:	4b02      	ldr	r3, [pc, #8]	; (238 <cmp_equ_zero()+0x24>)
     22e:	0592      	lsls	r2, r2, #22
     230:	605a      	str	r2, [r3, #4]
     232:	e7f9      	b.n	228 <cmp_equ_zero()+0x14>
     234:	10001dc0 	.word	0x10001dc0
     238:	10001d20 	.word	0x10001d20

0000023c <cmp_neq_zero()>:
     23c:	2200      	movs	r2, #0
     23e:	4b05      	ldr	r3, [pc, #20]	; (254 <cmp_neq_zero()+0x18>)
     240:	605a      	str	r2, [r3, #4]
     242:	685a      	ldr	r2, [r3, #4]
     244:	2a00      	cmp	r2, #0
     246:	d002      	beq.n	24e <cmp_neq_zero()+0x12>
     248:	2204      	movs	r2, #4
     24a:	605a      	str	r2, [r3, #4]
     24c:	4770      	bx	lr
     24e:	2220      	movs	r2, #32
     250:	605a      	str	r2, [r3, #4]
     252:	e7fb      	b.n	24c <cmp_neq_zero()+0x10>
     254:	10001dc0 	.word	0x10001dc0

00000258 <cmp_equ_bits()>:
     258:	2340      	movs	r3, #64	; 0x40
     25a:	4a07      	ldr	r2, [pc, #28]	; (278 <cmp_equ_bits()+0x20>)
     25c:	6053      	str	r3, [r2, #4]
     25e:	6852      	ldr	r2, [r2, #4]
     260:	4213      	tst	r3, r2
     262:	d004      	beq.n	26e <cmp_equ_bits()+0x16>
     264:	22b0      	movs	r2, #176	; 0xb0
     266:	4b05      	ldr	r3, [pc, #20]	; (27c <cmp_equ_bits()+0x24>)
     268:	0552      	lsls	r2, r2, #21
     26a:	605a      	str	r2, [r3, #4]
     26c:	4770      	bx	lr
     26e:	22d0      	movs	r2, #208	; 0xd0
     270:	4b02      	ldr	r3, [pc, #8]	; (27c <cmp_equ_bits()+0x24>)
     272:	0552      	lsls	r2, r2, #21
     274:	605a      	str	r2, [r3, #4]
     276:	e7f9      	b.n	26c <cmp_equ_bits()+0x14>
     278:	10001dc0 	.word	0x10001dc0
     27c:	10001d20 	.word	0x10001d20

00000280 <cmp_neq_bits()>:
     280:	2240      	movs	r2, #64	; 0x40
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <cmp_neq_bits()+0x18>)
     284:	605a      	str	r2, [r3, #4]
     286:	6859      	ldr	r1, [r3, #4]
     288:	420a      	tst	r2, r1
     28a:	d102      	bne.n	292 <cmp_neq_bits()+0x12>
     28c:	3a3e      	subs	r2, #62	; 0x3e
     28e:	605a      	str	r2, [r3, #4]
     290:	4770      	bx	lr
     292:	2220      	movs	r2, #32
     294:	605a      	str	r2, [r3, #4]
     296:	e7fb      	b.n	290 <cmp_neq_bits()+0x10>
     298:	10001dc0 	.word	0x10001dc0

0000029c <cmp_equ_multi_bits()>:
     29c:	2360      	movs	r3, #96	; 0x60
     29e:	4a08      	ldr	r2, [pc, #32]	; (2c0 <cmp_equ_multi_bits()+0x24>)
     2a0:	6053      	str	r3, [r2, #4]
     2a2:	6852      	ldr	r2, [r2, #4]
     2a4:	4013      	ands	r3, r2
     2a6:	2b60      	cmp	r3, #96	; 0x60
     2a8:	d004      	beq.n	2b4 <cmp_equ_multi_bits()+0x18>
     2aa:	22b8      	movs	r2, #184	; 0xb8
     2ac:	4b05      	ldr	r3, [pc, #20]	; (2c4 <cmp_equ_multi_bits()+0x28>)
     2ae:	0592      	lsls	r2, r2, #22
     2b0:	605a      	str	r2, [r3, #4]
     2b2:	4770      	bx	lr
     2b4:	2288      	movs	r2, #136	; 0x88
     2b6:	4b03      	ldr	r3, [pc, #12]	; (2c4 <cmp_equ_multi_bits()+0x28>)
     2b8:	0592      	lsls	r2, r2, #22
     2ba:	605a      	str	r2, [r3, #4]
     2bc:	e7f9      	b.n	2b2 <cmp_equ_multi_bits()+0x16>
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	10001dc0 	.word	0x10001dc0
     2c4:	10001d20 	.word	0x10001d20

000002c8 <cmp_neq_multi_bits()>:
     2c8:	2360      	movs	r3, #96	; 0x60
     2ca:	4a08      	ldr	r2, [pc, #32]	; (2ec <cmp_neq_multi_bits()+0x24>)
     2cc:	6053      	str	r3, [r2, #4]
     2ce:	6852      	ldr	r2, [r2, #4]
     2d0:	4013      	ands	r3, r2
     2d2:	2b60      	cmp	r3, #96	; 0x60
     2d4:	d004      	beq.n	2e0 <cmp_neq_multi_bits()+0x18>
     2d6:	22e8      	movs	r2, #232	; 0xe8
     2d8:	4b05      	ldr	r3, [pc, #20]	; (2f0 <cmp_neq_multi_bits()+0x28>)
     2da:	0592      	lsls	r2, r2, #22
     2dc:	605a      	str	r2, [r3, #4]
     2de:	4770      	bx	lr
     2e0:	22f8      	movs	r2, #248	; 0xf8
     2e2:	4b03      	ldr	r3, [pc, #12]	; (2f0 <cmp_neq_multi_bits()+0x28>)
     2e4:	0592      	lsls	r2, r2, #22
     2e6:	605a      	str	r2, [r3, #4]
     2e8:	e7f9      	b.n	2de <cmp_neq_multi_bits()+0x16>
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	10001dc0 	.word	0x10001dc0
     2f0:	10001d20 	.word	0x10001d20

000002f4 <cmp_equ_mskd()>:
     2f4:	22e8      	movs	r2, #232	; 0xe8
     2f6:	4b0e      	ldr	r3, [pc, #56]	; (330 <cmp_equ_mskd()+0x3c>)
     2f8:	0252      	lsls	r2, r2, #9
     2fa:	605a      	str	r2, [r3, #4]
     2fc:	22f8      	movs	r2, #248	; 0xf8
     2fe:	685b      	ldr	r3, [r3, #4]
     300:	0252      	lsls	r2, r2, #9
     302:	4013      	ands	r3, r2
     304:	2288      	movs	r2, #136	; 0x88
     306:	490b      	ldr	r1, [pc, #44]	; (334 <cmp_equ_mskd()+0x40>)
     308:	0252      	lsls	r2, r2, #9
     30a:	4293      	cmp	r3, r2
     30c:	d007      	beq.n	31e <cmp_equ_mskd()+0x2a>
     30e:	684b      	ldr	r3, [r1, #4]
     310:	4a09      	ldr	r2, [pc, #36]	; (338 <cmp_equ_mskd()+0x44>)
     312:	401a      	ands	r2, r3
     314:	2388      	movs	r3, #136	; 0x88
     316:	059b      	lsls	r3, r3, #22
     318:	4313      	orrs	r3, r2
     31a:	604b      	str	r3, [r1, #4]
     31c:	4770      	bx	lr
     31e:	684b      	ldr	r3, [r1, #4]
     320:	4a05      	ldr	r2, [pc, #20]	; (338 <cmp_equ_mskd()+0x44>)
     322:	401a      	ands	r2, r3
     324:	23e0      	movs	r3, #224	; 0xe0
     326:	051b      	lsls	r3, r3, #20
     328:	4313      	orrs	r3, r2
     32a:	604b      	str	r3, [r1, #4]
     32c:	e7f6      	b.n	31c <cmp_equ_mskd()+0x28>
     32e:	46c0      	nop			; (mov r8, r8)
     330:	10001dc0 	.word	0x10001dc0
     334:	10001d20 	.word	0x10001d20
     338:	c1ffffff 	.word	0xc1ffffff

0000033c <cmp_neq_mskd()>:
     33c:	22e8      	movs	r2, #232	; 0xe8
     33e:	21f8      	movs	r1, #248	; 0xf8
     340:	4b0a      	ldr	r3, [pc, #40]	; (36c <cmp_neq_mskd()+0x30>)
     342:	0252      	lsls	r2, r2, #9
     344:	605a      	str	r2, [r3, #4]
     346:	685a      	ldr	r2, [r3, #4]
     348:	0249      	lsls	r1, r1, #9
     34a:	400a      	ands	r2, r1
     34c:	2188      	movs	r1, #136	; 0x88
     34e:	0249      	lsls	r1, r1, #9
     350:	428a      	cmp	r2, r1
     352:	d006      	beq.n	362 <cmp_neq_mskd()+0x26>
     354:	2106      	movs	r1, #6
     356:	685a      	ldr	r2, [r3, #4]
     358:	438a      	bics	r2, r1
     35a:	3902      	subs	r1, #2
     35c:	430a      	orrs	r2, r1
     35e:	605a      	str	r2, [r3, #4]
     360:	4770      	bx	lr
     362:	2140      	movs	r1, #64	; 0x40
     364:	685a      	ldr	r2, [r3, #4]
     366:	430a      	orrs	r2, r1
     368:	605a      	str	r2, [r3, #4]
     36a:	e7f9      	b.n	360 <cmp_neq_mskd()+0x24>
     36c:	10001dc0 	.word	0x10001dc0

00000370 <cmp_equ_reg()>:
     370:	2222      	movs	r2, #34	; 0x22
     372:	4b07      	ldr	r3, [pc, #28]	; (390 <cmp_equ_reg()+0x20>)
     374:	605a      	str	r2, [r3, #4]
     376:	685b      	ldr	r3, [r3, #4]
     378:	2b22      	cmp	r3, #34	; 0x22
     37a:	d004      	beq.n	386 <cmp_equ_reg()+0x16>
     37c:	22b8      	movs	r2, #184	; 0xb8
     37e:	4b05      	ldr	r3, [pc, #20]	; (394 <cmp_equ_reg()+0x24>)
     380:	0592      	lsls	r2, r2, #22
     382:	605a      	str	r2, [r3, #4]
     384:	4770      	bx	lr
     386:	22a8      	movs	r2, #168	; 0xa8
     388:	4b02      	ldr	r3, [pc, #8]	; (394 <cmp_equ_reg()+0x24>)
     38a:	0592      	lsls	r2, r2, #22
     38c:	605a      	str	r2, [r3, #4]
     38e:	e7f9      	b.n	384 <cmp_equ_reg()+0x14>
     390:	10001dc0 	.word	0x10001dc0
     394:	10001d20 	.word	0x10001d20

00000398 <cmp_neq_reg()>:
     398:	2222      	movs	r2, #34	; 0x22
     39a:	4b05      	ldr	r3, [pc, #20]	; (3b0 <cmp_neq_reg()+0x18>)
     39c:	605a      	str	r2, [r3, #4]
     39e:	685a      	ldr	r2, [r3, #4]
     3a0:	2a22      	cmp	r2, #34	; 0x22
     3a2:	d002      	beq.n	3aa <cmp_neq_reg()+0x12>
     3a4:	2202      	movs	r2, #2
     3a6:	605a      	str	r2, [r3, #4]
     3a8:	4770      	bx	lr
     3aa:	2220      	movs	r2, #32
     3ac:	605a      	str	r2, [r3, #4]
     3ae:	e7fb      	b.n	3a8 <cmp_neq_reg()+0x10>
     3b0:	10001dc0 	.word	0x10001dc0

000003b4 <constexpr_bits_array()>:
     3b4:	2206      	movs	r2, #6
     3b6:	2180      	movs	r1, #128	; 0x80
     3b8:	4b02      	ldr	r3, [pc, #8]	; (3c4 <constexpr_bits_array()+0x10>)
     3ba:	0189      	lsls	r1, r1, #6
     3bc:	62da      	str	r2, [r3, #44]	; 0x2c
     3be:	329a      	adds	r2, #154	; 0x9a
     3c0:	5099      	str	r1, [r3, r2]
     3c2:	4770      	bx	lr
     3c4:	10001c00 	.word	0x10001c00

000003c8 <runtime_bits_array()>:
     3c8:	2303      	movs	r3, #3
     3ca:	4a05      	ldr	r2, [pc, #20]	; (3e0 <runtime_bits_array()+0x18>)
     3cc:	b081      	sub	sp, #4
     3ce:	4694      	mov	ip, r2
     3d0:	2221      	movs	r2, #33	; 0x21
     3d2:	9300      	str	r3, [sp, #0]
     3d4:	9b00      	ldr	r3, [sp, #0]
     3d6:	009b      	lsls	r3, r3, #2
     3d8:	4463      	add	r3, ip
     3da:	621a      	str	r2, [r3, #32]
     3dc:	b001      	add	sp, #4
     3de:	4770      	bx	lr
     3e0:	10001c00 	.word	0x10001c00

000003e4 <prescaler_low()>:
     3e4:	2277      	movs	r2, #119	; 0x77
     3e6:	4b04      	ldr	r3, [pc, #16]	; (3f8 <prescaler_low()+0x14>)
     3e8:	605a      	str	r2, [r3, #4]
     3ea:	685a      	ldr	r2, [r3, #4]
     3ec:	237f      	movs	r3, #127	; 0x7f
     3ee:	4013      	ands	r3, r2
     3f0:	4a02      	ldr	r2, [pc, #8]	; (3fc <prescaler_low()+0x18>)
     3f2:	62d3      	str	r3, [r2, #44]	; 0x2c
     3f4:	4770      	bx	lr
     3f6:	46c0      	nop			; (mov r8, r8)
     3f8:	10001d20 	.word	0x10001d20
     3fc:	10001c00 	.word	0x10001c00

00000400 <prescaler_high()>:
     400:	22e8      	movs	r2, #232	; 0xe8
     402:	4b04      	ldr	r3, [pc, #16]	; (414 <prescaler_high()+0x14>)
     404:	0592      	lsls	r2, r2, #22
     406:	605a      	str	r2, [r3, #4]
     408:	685b      	ldr	r3, [r3, #4]
     40a:	4a03      	ldr	r2, [pc, #12]	; (418 <prescaler_high()+0x18>)
     40c:	009b      	lsls	r3, r3, #2
     40e:	0edb      	lsrs	r3, r3, #27
     410:	62d3      	str	r3, [r2, #44]	; 0x2c
     412:	4770      	bx	lr
     414:	10001d20 	.word	0x10001d20
     418:	10001c00 	.word	0x10001c00

0000041c <reg_mskd_lss()>:
     41c:	22d8      	movs	r2, #216	; 0xd8
     41e:	4b09      	ldr	r3, [pc, #36]	; (444 <reg_mskd_lss()+0x28>)
     420:	0592      	lsls	r2, r2, #22
     422:	605a      	str	r2, [r3, #4]
     424:	22f8      	movs	r2, #248	; 0xf8
     426:	685b      	ldr	r3, [r3, #4]
     428:	0592      	lsls	r2, r2, #22
     42a:	4013      	ands	r3, r2
     42c:	4a06      	ldr	r2, [pc, #24]	; (448 <reg_mskd_lss()+0x2c>)
     42e:	4293      	cmp	r3, r2
     430:	d803      	bhi.n	43a <reg_mskd_lss()+0x1e>
     432:	2202      	movs	r2, #2
     434:	4b05      	ldr	r3, [pc, #20]	; (44c <reg_mskd_lss()+0x30>)
     436:	605a      	str	r2, [r3, #4]
     438:	4770      	bx	lr
     43a:	2204      	movs	r2, #4
     43c:	4b03      	ldr	r3, [pc, #12]	; (44c <reg_mskd_lss()+0x30>)
     43e:	605a      	str	r2, [r3, #4]
     440:	e7fa      	b.n	438 <reg_mskd_lss()+0x1c>
     442:	46c0      	nop			; (mov r8, r8)
     444:	10001d20 	.word	0x10001d20
     448:	37ffffff 	.word	0x37ffffff
     44c:	10001dc0 	.word	0x10001dc0

00000450 <reg_mskd_leq()>:
     450:	21b8      	movs	r1, #184	; 0xb8
     452:	20f8      	movs	r0, #248	; 0xf8
     454:	4a0a      	ldr	r2, [pc, #40]	; (480 <reg_mskd_leq()+0x30>)
     456:	0589      	lsls	r1, r1, #22
     458:	6051      	str	r1, [r2, #4]
     45a:	6853      	ldr	r3, [r2, #4]
     45c:	0580      	lsls	r0, r0, #22
     45e:	4003      	ands	r3, r0
     460:	428b      	cmp	r3, r1
     462:	d805      	bhi.n	470 <reg_mskd_leq()+0x20>
     464:	6853      	ldr	r3, [r2, #4]
     466:	4018      	ands	r0, r3
     468:	23c0      	movs	r3, #192	; 0xc0
     46a:	059b      	lsls	r3, r3, #22
     46c:	4298      	cmp	r0, r3
     46e:	d903      	bls.n	478 <reg_mskd_leq()+0x28>
     470:	2204      	movs	r2, #4
     472:	4b04      	ldr	r3, [pc, #16]	; (484 <reg_mskd_leq()+0x34>)
     474:	605a      	str	r2, [r3, #4]
     476:	4770      	bx	lr
     478:	2202      	movs	r2, #2
     47a:	4b02      	ldr	r3, [pc, #8]	; (484 <reg_mskd_leq()+0x34>)
     47c:	605a      	str	r2, [r3, #4]
     47e:	e7fa      	b.n	476 <reg_mskd_leq()+0x26>
     480:	10001d20 	.word	0x10001d20
     484:	10001dc0 	.word	0x10001dc0

00000488 <reg_mskd_gtr()>:
     488:	2298      	movs	r2, #152	; 0x98
     48a:	4b09      	ldr	r3, [pc, #36]	; (4b0 <reg_mskd_gtr()+0x28>)
     48c:	0592      	lsls	r2, r2, #22
     48e:	605a      	str	r2, [r3, #4]
     490:	22f8      	movs	r2, #248	; 0xf8
     492:	685b      	ldr	r3, [r3, #4]
     494:	0592      	lsls	r2, r2, #22
     496:	4013      	ands	r3, r2
     498:	2290      	movs	r2, #144	; 0x90
     49a:	0592      	lsls	r2, r2, #22
     49c:	4293      	cmp	r3, r2
     49e:	d903      	bls.n	4a8 <reg_mskd_gtr()+0x20>
     4a0:	2202      	movs	r2, #2
     4a2:	4b04      	ldr	r3, [pc, #16]	; (4b4 <reg_mskd_gtr()+0x2c>)
     4a4:	605a      	str	r2, [r3, #4]
     4a6:	4770      	bx	lr
     4a8:	2204      	movs	r2, #4
     4aa:	4b02      	ldr	r3, [pc, #8]	; (4b4 <reg_mskd_gtr()+0x2c>)
     4ac:	605a      	str	r2, [r3, #4]
     4ae:	e7fa      	b.n	4a6 <reg_mskd_gtr()+0x1e>
     4b0:	10001d20 	.word	0x10001d20
     4b4:	10001dc0 	.word	0x10001dc0

000004b8 <reg_mskd_geq()>:
     4b8:	2388      	movs	r3, #136	; 0x88
     4ba:	21f8      	movs	r1, #248	; 0xf8
     4bc:	4a0a      	ldr	r2, [pc, #40]	; (4e8 <reg_mskd_geq()+0x30>)
     4be:	059b      	lsls	r3, r3, #22
     4c0:	6053      	str	r3, [r2, #4]
     4c2:	6853      	ldr	r3, [r2, #4]
     4c4:	4809      	ldr	r0, [pc, #36]	; (4ec <reg_mskd_geq()+0x34>)
     4c6:	0589      	lsls	r1, r1, #22
     4c8:	400b      	ands	r3, r1
     4ca:	4283      	cmp	r3, r0
     4cc:	d904      	bls.n	4d8 <reg_mskd_geq()+0x20>
     4ce:	6853      	ldr	r3, [r2, #4]
     4d0:	4019      	ands	r1, r3
     4d2:	4b07      	ldr	r3, [pc, #28]	; (4f0 <reg_mskd_geq()+0x38>)
     4d4:	4299      	cmp	r1, r3
     4d6:	d803      	bhi.n	4e0 <reg_mskd_geq()+0x28>
     4d8:	2204      	movs	r2, #4
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <reg_mskd_geq()+0x3c>)
     4dc:	605a      	str	r2, [r3, #4]
     4de:	4770      	bx	lr
     4e0:	2202      	movs	r2, #2
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <reg_mskd_geq()+0x3c>)
     4e4:	605a      	str	r2, [r3, #4]
     4e6:	e7fa      	b.n	4de <reg_mskd_geq()+0x26>
     4e8:	10001d20 	.word	0x10001d20
     4ec:	1fffffff 	.word	0x1fffffff
     4f0:	21ffffff 	.word	0x21ffffff
     4f4:	10001dc0 	.word	0x10001dc0

000004f8 <pos_cmp_eq()>:
     4f8:	2202      	movs	r2, #2
     4fa:	4b01      	ldr	r3, [pc, #4]	; (500 <pos_cmp_eq()+0x8>)
     4fc:	605a      	str	r2, [r3, #4]
     4fe:	4770      	bx	lr
     500:	10001dc0 	.word	0x10001dc0

00000504 <pos_cmp_ne()>:
     504:	2202      	movs	r2, #2
     506:	4b01      	ldr	r3, [pc, #4]	; (50c <pos_cmp_ne()+0x8>)
     508:	605a      	str	r2, [r3, #4]
     50a:	4770      	bx	lr
     50c:	10001dc0 	.word	0x10001dc0

00000510 <bits_extract_eq()>:
     510:	2240      	movs	r2, #64	; 0x40
     512:	4b05      	ldr	r3, [pc, #20]	; (528 <bits_extract_eq()+0x18>)
     514:	605a      	str	r2, [r3, #4]
     516:	685a      	ldr	r2, [r3, #4]
     518:	2a40      	cmp	r2, #64	; 0x40
     51a:	d002      	beq.n	522 <bits_extract_eq()+0x12>
     51c:	2204      	movs	r2, #4
     51e:	605a      	str	r2, [r3, #4]
     520:	4770      	bx	lr
     522:	3a3e      	subs	r2, #62	; 0x3e
     524:	605a      	str	r2, [r3, #4]
     526:	e7fb      	b.n	520 <bits_extract_eq()+0x10>
     528:	10001dc0 	.word	0x10001dc0

0000052c <mskd_extract_eq()>:
     52c:	2202      	movs	r2, #2
     52e:	4b05      	ldr	r3, [pc, #20]	; (544 <mskd_extract_eq()+0x18>)
     530:	605a      	str	r2, [r3, #4]
     532:	685a      	ldr	r2, [r3, #4]
     534:	2a02      	cmp	r2, #2
     536:	d002      	beq.n	53e <mskd_extract_eq()+0x12>
     538:	2240      	movs	r2, #64	; 0x40
     53a:	605a      	str	r2, [r3, #4]
     53c:	4770      	bx	lr
     53e:	321e      	adds	r2, #30
     540:	605a      	str	r2, [r3, #4]
     542:	e7fb      	b.n	53c <mskd_extract_eq()+0x10>
     544:	10001dc0 	.word	0x10001dc0

00000548 <mskd_extract_ne()>:
     548:	2204      	movs	r2, #4
     54a:	4b05      	ldr	r3, [pc, #20]	; (560 <mskd_extract_ne()+0x18>)
     54c:	605a      	str	r2, [r3, #4]
     54e:	685a      	ldr	r2, [r3, #4]
     550:	2a04      	cmp	r2, #4
     552:	d002      	beq.n	55a <mskd_extract_ne()+0x12>
     554:	2220      	movs	r2, #32
     556:	605a      	str	r2, [r3, #4]
     558:	4770      	bx	lr
     55a:	323c      	adds	r2, #60	; 0x3c
     55c:	605a      	str	r2, [r3, #4]
     55e:	e7fb      	b.n	558 <mskd_extract_ne()+0x10>
     560:	10001dc0 	.word	0x10001dc0

00000564 <mskd_extract_lss()>:
     564:	22b0      	movs	r2, #176	; 0xb0
     566:	4b07      	ldr	r3, [pc, #28]	; (584 <mskd_extract_lss()+0x20>)
     568:	0552      	lsls	r2, r2, #21
     56a:	605a      	str	r2, [r3, #4]
     56c:	685a      	ldr	r2, [r3, #4]
     56e:	4b06      	ldr	r3, [pc, #24]	; (588 <mskd_extract_lss()+0x24>)
     570:	429a      	cmp	r2, r3
     572:	d803      	bhi.n	57c <mskd_extract_lss()+0x18>
     574:	2220      	movs	r2, #32
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <mskd_extract_lss()+0x28>)
     578:	605a      	str	r2, [r3, #4]
     57a:	4770      	bx	lr
     57c:	2240      	movs	r2, #64	; 0x40
     57e:	4b03      	ldr	r3, [pc, #12]	; (58c <mskd_extract_lss()+0x28>)
     580:	605a      	str	r2, [r3, #4]
     582:	e7fa      	b.n	57a <mskd_extract_lss()+0x16>
     584:	10001d20 	.word	0x10001d20
     588:	17ffffff 	.word	0x17ffffff
     58c:	10001dc0 	.word	0x10001dc0

00000590 <mskd_extract_leq()>:
     590:	23b8      	movs	r3, #184	; 0xb8
     592:	4a07      	ldr	r2, [pc, #28]	; (5b0 <mskd_extract_leq()+0x20>)
     594:	059b      	lsls	r3, r3, #22
     596:	6053      	str	r3, [r2, #4]
     598:	6852      	ldr	r2, [r2, #4]
     59a:	429a      	cmp	r2, r3
     59c:	d803      	bhi.n	5a6 <mskd_extract_leq()+0x16>
     59e:	2220      	movs	r2, #32
     5a0:	4b04      	ldr	r3, [pc, #16]	; (5b4 <mskd_extract_leq()+0x24>)
     5a2:	605a      	str	r2, [r3, #4]
     5a4:	4770      	bx	lr
     5a6:	2240      	movs	r2, #64	; 0x40
     5a8:	4b02      	ldr	r3, [pc, #8]	; (5b4 <mskd_extract_leq()+0x24>)
     5aa:	605a      	str	r2, [r3, #4]
     5ac:	e7fa      	b.n	5a4 <mskd_extract_leq()+0x14>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	10001d20 	.word	0x10001d20
     5b4:	10001dc0 	.word	0x10001dc0

000005b8 <mskd_extract_gtr()>:
     5b8:	2298      	movs	r2, #152	; 0x98
     5ba:	4b08      	ldr	r3, [pc, #32]	; (5dc <mskd_extract_gtr()+0x24>)
     5bc:	0592      	lsls	r2, r2, #22
     5be:	605a      	str	r2, [r3, #4]
     5c0:	685a      	ldr	r2, [r3, #4]
     5c2:	2390      	movs	r3, #144	; 0x90
     5c4:	059b      	lsls	r3, r3, #22
     5c6:	429a      	cmp	r2, r3
     5c8:	d903      	bls.n	5d2 <mskd_extract_gtr()+0x1a>
     5ca:	2220      	movs	r2, #32
     5cc:	4b04      	ldr	r3, [pc, #16]	; (5e0 <mskd_extract_gtr()+0x28>)
     5ce:	605a      	str	r2, [r3, #4]
     5d0:	4770      	bx	lr
     5d2:	2240      	movs	r2, #64	; 0x40
     5d4:	4b02      	ldr	r3, [pc, #8]	; (5e0 <mskd_extract_gtr()+0x28>)
     5d6:	605a      	str	r2, [r3, #4]
     5d8:	e7fa      	b.n	5d0 <mskd_extract_gtr()+0x18>
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	10001d20 	.word	0x10001d20
     5e0:	10001dc0 	.word	0x10001dc0

000005e4 <set_bits_global()>:
     5e4:	2140      	movs	r1, #64	; 0x40
     5e6:	4a02      	ldr	r2, [pc, #8]	; (5f0 <set_bits_global()+0xc>)
     5e8:	6853      	ldr	r3, [r2, #4]
     5ea:	430b      	orrs	r3, r1
     5ec:	6053      	str	r3, [r2, #4]
     5ee:	4770      	bx	lr
     5f0:	10001dc0 	.word	0x10001dc0

000005f4 <ins_mskd_global()>:
     5f4:	2106      	movs	r1, #6
     5f6:	4a03      	ldr	r2, [pc, #12]	; (604 <ins_mskd_global()+0x10>)
     5f8:	6853      	ldr	r3, [r2, #4]
     5fa:	438b      	bics	r3, r1
     5fc:	3904      	subs	r1, #4
     5fe:	430b      	orrs	r3, r1
     600:	6053      	str	r3, [r2, #4]
     602:	4770      	bx	lr
     604:	10001dc0 	.word	0x10001dc0

00000608 <assign_array_global()>:
     608:	22bd      	movs	r2, #189	; 0xbd
     60a:	4b01      	ldr	r3, [pc, #4]	; (610 <assign_array_global()+0x8>)
     60c:	601a      	str	r2, [r3, #0]
     60e:	4770      	bx	lr
     610:	10001c2c 	.word	0x10001c2c

00000614 <shifted_global()>:
     614:	22b8      	movs	r2, #184	; 0xb8
     616:	4b04      	ldr	r3, [pc, #16]	; (628 <shifted_global()+0x14>)
     618:	0592      	lsls	r2, r2, #22
     61a:	605a      	str	r2, [r3, #4]
     61c:	685b      	ldr	r3, [r3, #4]
     61e:	4a03      	ldr	r2, [pc, #12]	; (62c <shifted_global()+0x18>)
     620:	009b      	lsls	r3, r3, #2
     622:	0edb      	lsrs	r3, r3, #27
     624:	62d3      	str	r3, [r2, #44]	; 0x2c
     626:	4770      	bx	lr
     628:	10001d20 	.word	0x10001d20
     62c:	10001c00 	.word	0x10001c00

00000630 <assign_register_global()>:
     630:	2204      	movs	r2, #4
     632:	4b01      	ldr	r3, [pc, #4]	; (638 <assign_register_global()+0x8>)
     634:	605a      	str	r2, [r3, #4]
     636:	4770      	bx	lr
     638:	10001dc0 	.word	0x10001dc0

0000063c <copy_bits_equ()>:
     63c:	2240      	movs	r2, #64	; 0x40
     63e:	4b05      	ldr	r3, [pc, #20]	; (654 <copy_bits_equ()+0x18>)
     640:	605a      	str	r2, [r3, #4]
     642:	6859      	ldr	r1, [r3, #4]
     644:	420a      	tst	r2, r1
     646:	d002      	beq.n	64e <copy_bits_equ()+0x12>
     648:	3a3e      	subs	r2, #62	; 0x3e
     64a:	605a      	str	r2, [r3, #4]
     64c:	4770      	bx	lr
     64e:	2204      	movs	r2, #4
     650:	605a      	str	r2, [r3, #4]
     652:	e7fb      	b.n	64c <copy_bits_equ()+0x10>
     654:	10001dc0 	.word	0x10001dc0

00000658 <copy_bits_neq()>:
     658:	2240      	movs	r2, #64	; 0x40
     65a:	4b05      	ldr	r3, [pc, #20]	; (670 <copy_bits_neq()+0x18>)
     65c:	605a      	str	r2, [r3, #4]
     65e:	6859      	ldr	r1, [r3, #4]
     660:	420a      	tst	r2, r1
     662:	d102      	bne.n	66a <copy_bits_neq()+0x12>
     664:	3a3e      	subs	r2, #62	; 0x3e
     666:	605a      	str	r2, [r3, #4]
     668:	4770      	bx	lr
     66a:	2204      	movs	r2, #4
     66c:	605a      	str	r2, [r3, #4]
     66e:	e7fb      	b.n	668 <copy_bits_neq()+0x10>
     670:	10001dc0 	.word	0x10001dc0

00000674 <copy_mskd_equ()>:
     674:	22b0      	movs	r2, #176	; 0xb0
     676:	21f8      	movs	r1, #248	; 0xf8
     678:	4b07      	ldr	r3, [pc, #28]	; (698 <copy_mskd_equ()+0x24>)
     67a:	0552      	lsls	r2, r2, #21
     67c:	605a      	str	r2, [r3, #4]
     67e:	685b      	ldr	r3, [r3, #4]
     680:	0589      	lsls	r1, r1, #22
     682:	400b      	ands	r3, r1
     684:	4293      	cmp	r3, r2
     686:	d003      	beq.n	690 <copy_mskd_equ()+0x1c>
     688:	2204      	movs	r2, #4
     68a:	4b04      	ldr	r3, [pc, #16]	; (69c <copy_mskd_equ()+0x28>)
     68c:	605a      	str	r2, [r3, #4]
     68e:	4770      	bx	lr
     690:	2202      	movs	r2, #2
     692:	4b02      	ldr	r3, [pc, #8]	; (69c <copy_mskd_equ()+0x28>)
     694:	605a      	str	r2, [r3, #4]
     696:	e7fa      	b.n	68e <copy_mskd_equ()+0x1a>
     698:	10001d20 	.word	0x10001d20
     69c:	10001dc0 	.word	0x10001dc0

000006a0 <copy_mskd_neq()>:
     6a0:	22d0      	movs	r2, #208	; 0xd0
     6a2:	21f8      	movs	r1, #248	; 0xf8
     6a4:	4b07      	ldr	r3, [pc, #28]	; (6c4 <copy_mskd_neq()+0x24>)
     6a6:	0552      	lsls	r2, r2, #21
     6a8:	605a      	str	r2, [r3, #4]
     6aa:	685b      	ldr	r3, [r3, #4]
     6ac:	0589      	lsls	r1, r1, #22
     6ae:	400b      	ands	r3, r1
     6b0:	4293      	cmp	r3, r2
     6b2:	d003      	beq.n	6bc <copy_mskd_neq()+0x1c>
     6b4:	2202      	movs	r2, #2
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <copy_mskd_neq()+0x28>)
     6b8:	605a      	str	r2, [r3, #4]
     6ba:	4770      	bx	lr
     6bc:	2204      	movs	r2, #4
     6be:	4b02      	ldr	r3, [pc, #8]	; (6c8 <copy_mskd_neq()+0x28>)
     6c0:	605a      	str	r2, [r3, #4]
     6c2:	e7fa      	b.n	6ba <copy_mskd_neq()+0x1a>
     6c4:	10001d20 	.word	0x10001d20
     6c8:	10001dc0 	.word	0x10001dc0

000006cc <copy_mskd_lss()>:
     6cc:	22d8      	movs	r2, #216	; 0xd8
     6ce:	4b09      	ldr	r3, [pc, #36]	; (6f4 <copy_mskd_lss()+0x28>)
     6d0:	0592      	lsls	r2, r2, #22
     6d2:	605a      	str	r2, [r3, #4]
     6d4:	22f8      	movs	r2, #248	; 0xf8
     6d6:	685b      	ldr	r3, [r3, #4]
     6d8:	0592      	lsls	r2, r2, #22
     6da:	4013      	ands	r3, r2
     6dc:	4a06      	ldr	r2, [pc, #24]	; (6f8 <copy_mskd_lss()+0x2c>)
     6de:	4293      	cmp	r3, r2
     6e0:	d803      	bhi.n	6ea <copy_mskd_lss()+0x1e>
     6e2:	2202      	movs	r2, #2
     6e4:	4b05      	ldr	r3, [pc, #20]	; (6fc <copy_mskd_lss()+0x30>)
     6e6:	605a      	str	r2, [r3, #4]
     6e8:	4770      	bx	lr
     6ea:	2204      	movs	r2, #4
     6ec:	4b03      	ldr	r3, [pc, #12]	; (6fc <copy_mskd_lss()+0x30>)
     6ee:	605a      	str	r2, [r3, #4]
     6f0:	e7fa      	b.n	6e8 <copy_mskd_lss()+0x1c>
     6f2:	46c0      	nop			; (mov r8, r8)
     6f4:	10001d20 	.word	0x10001d20
     6f8:	37ffffff 	.word	0x37ffffff
     6fc:	10001dc0 	.word	0x10001dc0

00000700 <copy_mskd_leq()>:
     700:	22b8      	movs	r2, #184	; 0xb8
     702:	21f8      	movs	r1, #248	; 0xf8
     704:	4b07      	ldr	r3, [pc, #28]	; (724 <copy_mskd_leq()+0x24>)
     706:	0592      	lsls	r2, r2, #22
     708:	605a      	str	r2, [r3, #4]
     70a:	685b      	ldr	r3, [r3, #4]
     70c:	0589      	lsls	r1, r1, #22
     70e:	400b      	ands	r3, r1
     710:	4293      	cmp	r3, r2
     712:	d803      	bhi.n	71c <copy_mskd_leq()+0x1c>
     714:	2202      	movs	r2, #2
     716:	4b04      	ldr	r3, [pc, #16]	; (728 <copy_mskd_leq()+0x28>)
     718:	605a      	str	r2, [r3, #4]
     71a:	4770      	bx	lr
     71c:	2204      	movs	r2, #4
     71e:	4b02      	ldr	r3, [pc, #8]	; (728 <copy_mskd_leq()+0x28>)
     720:	605a      	str	r2, [r3, #4]
     722:	e7fa      	b.n	71a <copy_mskd_leq()+0x1a>
     724:	10001d20 	.word	0x10001d20
     728:	10001dc0 	.word	0x10001dc0

0000072c <copy_mskd_gtr()>:
     72c:	2298      	movs	r2, #152	; 0x98
     72e:	4b09      	ldr	r3, [pc, #36]	; (754 <copy_mskd_gtr()+0x28>)
     730:	0592      	lsls	r2, r2, #22
     732:	605a      	str	r2, [r3, #4]
     734:	22f8      	movs	r2, #248	; 0xf8
     736:	685b      	ldr	r3, [r3, #4]
     738:	0592      	lsls	r2, r2, #22
     73a:	4013      	ands	r3, r2
     73c:	2290      	movs	r2, #144	; 0x90
     73e:	0592      	lsls	r2, r2, #22
     740:	4293      	cmp	r3, r2
     742:	d903      	bls.n	74c <copy_mskd_gtr()+0x20>
     744:	2202      	movs	r2, #2
     746:	4b04      	ldr	r3, [pc, #16]	; (758 <copy_mskd_gtr()+0x2c>)
     748:	605a      	str	r2, [r3, #4]
     74a:	4770      	bx	lr
     74c:	2204      	movs	r2, #4
     74e:	4b02      	ldr	r3, [pc, #8]	; (758 <copy_mskd_gtr()+0x2c>)
     750:	605a      	str	r2, [r3, #4]
     752:	e7fa      	b.n	74a <copy_mskd_gtr()+0x1e>
     754:	10001d20 	.word	0x10001d20
     758:	10001dc0 	.word	0x10001dc0

0000075c <copy_mskd_geq()>:
     75c:	2288      	movs	r2, #136	; 0x88
     75e:	4b09      	ldr	r3, [pc, #36]	; (784 <copy_mskd_geq()+0x28>)
     760:	0592      	lsls	r2, r2, #22
     762:	605a      	str	r2, [r3, #4]
     764:	22f8      	movs	r2, #248	; 0xf8
     766:	685b      	ldr	r3, [r3, #4]
     768:	0592      	lsls	r2, r2, #22
     76a:	4013      	ands	r3, r2
     76c:	4a06      	ldr	r2, [pc, #24]	; (788 <copy_mskd_geq()+0x2c>)
     76e:	4293      	cmp	r3, r2
     770:	d803      	bhi.n	77a <copy_mskd_geq()+0x1e>
     772:	2204      	movs	r2, #4
     774:	4b05      	ldr	r3, [pc, #20]	; (78c <copy_mskd_geq()+0x30>)
     776:	605a      	str	r2, [r3, #4]
     778:	4770      	bx	lr
     77a:	2202      	movs	r2, #2
     77c:	4b03      	ldr	r3, [pc, #12]	; (78c <copy_mskd_geq()+0x30>)
     77e:	605a      	str	r2, [r3, #4]
     780:	e7fa      	b.n	778 <copy_mskd_geq()+0x1c>
     782:	46c0      	nop			; (mov r8, r8)
     784:	10001d20 	.word	0x10001d20
     788:	21ffffff 	.word	0x21ffffff
     78c:	10001dc0 	.word	0x10001dc0

00000790 <copy_shifted()>:
     790:	22b0      	movs	r2, #176	; 0xb0
     792:	4b08      	ldr	r3, [pc, #32]	; (7b4 <copy_shifted()+0x24>)
     794:	0552      	lsls	r2, r2, #21
     796:	605a      	str	r2, [r3, #4]
     798:	685b      	ldr	r3, [r3, #4]
     79a:	009b      	lsls	r3, r3, #2
     79c:	0edb      	lsrs	r3, r3, #27
     79e:	2b0b      	cmp	r3, #11
     7a0:	d003      	beq.n	7aa <copy_shifted()+0x1a>
     7a2:	2204      	movs	r2, #4
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <copy_shifted()+0x28>)
     7a6:	605a      	str	r2, [r3, #4]
     7a8:	4770      	bx	lr
     7aa:	2202      	movs	r2, #2
     7ac:	4b02      	ldr	r3, [pc, #8]	; (7b8 <copy_shifted()+0x28>)
     7ae:	605a      	str	r2, [r3, #4]
     7b0:	e7fa      	b.n	7a8 <copy_shifted()+0x18>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	10001d20 	.word	0x10001d20
     7b8:	10001dc0 	.word	0x10001dc0

000007bc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>:
     7bc:	2266      	movs	r2, #102	; 0x66
     7be:	4b01      	ldr	r3, [pc, #4]	; (7c4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]+0x8>)
     7c0:	62da      	str	r2, [r3, #44]	; 0x2c
     7c2:	4770      	bx	lr
     7c4:	10001c00 	.word	0x10001c00

000007c8 <call_pos_ref()>:
     7c8:	b510      	push	{r4, lr}
     7ca:	2405      	movs	r4, #5
     7cc:	b081      	sub	sp, #4
     7ce:	4668      	mov	r0, sp
     7d0:	9400      	str	r4, [sp, #0]
     7d2:	f7ff fff3 	bl	7bc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
     7d6:	4668      	mov	r0, sp
     7d8:	9400      	str	r4, [sp, #0]
     7da:	f7ff ffef 	bl	7bc <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.40]>
     7de:	b001      	add	sp, #4
     7e0:	bd10      	pop	{r4, pc}
     7e2:	46c0      	nop			; (mov r8, r8)

000007e4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>:
     7e4:	2277      	movs	r2, #119	; 0x77
     7e6:	4b01      	ldr	r3, [pc, #4]	; (7ec <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]+0x8>)
     7e8:	62da      	str	r2, [r3, #44]	; 0x2c
     7ea:	4770      	bx	lr
     7ec:	10001c00 	.word	0x10001c00

000007f0 <call_pos_ref_global()>:
     7f0:	2306      	movs	r3, #6
     7f2:	b500      	push	{lr}
     7f4:	b081      	sub	sp, #4
     7f6:	4668      	mov	r0, sp
     7f8:	9300      	str	r3, [sp, #0]
     7fa:	f7ff fff3 	bl	7e4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&) [clone .constprop.41]>
     7fe:	b001      	add	sp, #4
     800:	bd00      	pop	{pc}
     802:	46c0      	nop			; (mov r8, r8)

00000804 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>:
     804:	2233      	movs	r2, #51	; 0x33
     806:	4b01      	ldr	r3, [pc, #4]	; (80c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]+0x8>)
     808:	62da      	str	r2, [r3, #44]	; 0x2c
     80a:	4770      	bx	lr
     80c:	10001c00 	.word	0x10001c00

00000810 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>:
     810:	2244      	movs	r2, #68	; 0x44
     812:	4b01      	ldr	r3, [pc, #4]	; (818 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]+0x8>)
     814:	62da      	str	r2, [r3, #44]	; 0x2c
     816:	4770      	bx	lr
     818:	10001c00 	.word	0x10001c00

0000081c <call_pos_val()>:
     81c:	b500      	push	{lr}
     81e:	2005      	movs	r0, #5
     820:	f7ff fff0 	bl	804 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.42]>
     824:	2006      	movs	r0, #6
     826:	f7ff fff3 	bl	810 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>
     82a:	bd00      	pop	{pc}

0000082c <call_pos_val_global()>:
     82c:	b500      	push	{lr}
     82e:	2006      	movs	r0, #6
     830:	f7ff ffee 	bl	810 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>) [clone .constprop.43]>
     834:	bd00      	pop	{pc}
     836:	46c0      	nop			; (mov r8, r8)

00000838 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>:
     838:	2106      	movs	r1, #6
     83a:	4a03      	ldr	r2, [pc, #12]	; (848 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]+0x10>)
     83c:	6853      	ldr	r3, [r2, #4]
     83e:	438b      	bics	r3, r1
     840:	3904      	subs	r1, #4
     842:	430b      	orrs	r3, r1
     844:	6053      	str	r3, [r2, #4]
     846:	4770      	bx	lr
     848:	10001dc0 	.word	0x10001dc0

0000084c <call_mskd_val_const()>:
     84c:	b500      	push	{lr}
     84e:	2006      	movs	r0, #6
     850:	2102      	movs	r1, #2
     852:	f7ff fff1 	bl	838 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     856:	bd00      	pop	{pc}

00000858 <call_mskd_val_var()>:
     858:	b500      	push	{lr}
     85a:	2006      	movs	r0, #6
     85c:	2102      	movs	r1, #2
     85e:	f7ff ffeb 	bl	838 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     862:	bd00      	pop	{pc}

00000864 <call_mskd_val_global()>:
     864:	b500      	push	{lr}
     866:	2006      	movs	r0, #6
     868:	2102      	movs	r1, #2
     86a:	f7ff ffe5 	bl	838 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>) [clone .constprop.44]>
     86e:	bd00      	pop	{pc}

00000870 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>:
     870:	2240      	movs	r2, #64	; 0x40
     872:	4b01      	ldr	r3, [pc, #4]	; (878 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]+0x8>)
     874:	605a      	str	r2, [r3, #4]
     876:	4770      	bx	lr
     878:	10001dc0 	.word	0x10001dc0

0000087c <call_bits_val_const()>:
     87c:	b500      	push	{lr}
     87e:	2040      	movs	r0, #64	; 0x40
     880:	f7ff fff6 	bl	870 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     884:	bd00      	pop	{pc}
     886:	46c0      	nop			; (mov r8, r8)

00000888 <call_bits_val_var()>:
     888:	b500      	push	{lr}
     88a:	2040      	movs	r0, #64	; 0x40
     88c:	f7ff fff0 	bl	870 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     890:	bd00      	pop	{pc}
     892:	46c0      	nop			; (mov r8, r8)

00000894 <call_bits_val_global()>:
     894:	b500      	push	{lr}
     896:	2040      	movs	r0, #64	; 0x40
     898:	f7ff ffea 	bl	870 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>) [clone .constprop.45]>
     89c:	bd00      	pop	{pc}
     89e:	46c0      	nop			; (mov r8, r8)

000008a0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     8a0:	4b01      	ldr	r3, [pc, #4]	; (8a8 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)+0x8>)
     8a2:	6058      	str	r0, [r3, #4]
     8a4:	4770      	bx	lr
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	10001dc0 	.word	0x10001dc0

000008ac <call_bits_val_zero()>:
     8ac:	b500      	push	{lr}
     8ae:	2000      	movs	r0, #0
     8b0:	f7ff fffe 	bl	8a0 <bits_val(regbits::Bits<unsigned long, mcu::Serial::Config>)>
     8b4:	bd00      	pop	{pc}
     8b6:	46c0      	nop			; (mov r8, r8)

000008b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     8b8:	6802      	ldr	r2, [r0, #0]
     8ba:	4b01      	ldr	r3, [pc, #4]	; (8c0 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)+0x8>)
     8bc:	605a      	str	r2, [r3, #4]
     8be:	4770      	bx	lr
     8c0:	10001dc0 	.word	0x10001dc0

000008c4 <call_bits_ref_var()>:
     8c4:	2301      	movs	r3, #1
     8c6:	b500      	push	{lr}
     8c8:	b081      	sub	sp, #4
     8ca:	4668      	mov	r0, sp
     8cc:	9300      	str	r3, [sp, #0]
     8ce:	f7ff fffe 	bl	8b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8d2:	b001      	add	sp, #4
     8d4:	bd00      	pop	{pc}
     8d6:	46c0      	nop			; (mov r8, r8)

000008d8 <call_bits_ref_zero()>:
     8d8:	2300      	movs	r3, #0
     8da:	b500      	push	{lr}
     8dc:	b081      	sub	sp, #4
     8de:	4668      	mov	r0, sp
     8e0:	9300      	str	r3, [sp, #0]
     8e2:	f7ff fffe 	bl	8b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8e6:	b001      	add	sp, #4
     8e8:	bd00      	pop	{pc}
     8ea:	46c0      	nop			; (mov r8, r8)

000008ec <call_bits_ref_const()>:
     8ec:	2301      	movs	r3, #1
     8ee:	b500      	push	{lr}
     8f0:	b081      	sub	sp, #4
     8f2:	4668      	mov	r0, sp
     8f4:	9300      	str	r3, [sp, #0]
     8f6:	f7ff fffe 	bl	8b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     8fa:	b001      	add	sp, #4
     8fc:	bd00      	pop	{pc}
     8fe:	46c0      	nop			; (mov r8, r8)

00000900 <call_bits_ref_global()>:
     900:	2340      	movs	r3, #64	; 0x40
     902:	b500      	push	{lr}
     904:	b081      	sub	sp, #4
     906:	4668      	mov	r0, sp
     908:	9300      	str	r3, [sp, #0]
     90a:	f7ff fffe 	bl	8b8 <bits_ref(regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     90e:	b001      	add	sp, #4
     910:	bd00      	pop	{pc}
     912:	46c0      	nop			; (mov r8, r8)

00000914 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     914:	4a02      	ldr	r2, [pc, #8]	; (920 <mskd_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     916:	6853      	ldr	r3, [r2, #4]
     918:	4383      	bics	r3, r0
     91a:	430b      	orrs	r3, r1
     91c:	6053      	str	r3, [r2, #4]
     91e:	4770      	bx	lr
     920:	10001dc0 	.word	0x10001dc0

00000924 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>:
     924:	4a03      	ldr	r2, [pc, #12]	; (934 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)+0x10>)
     926:	6801      	ldr	r1, [r0, #0]
     928:	6853      	ldr	r3, [r2, #4]
     92a:	438b      	bics	r3, r1
     92c:	6841      	ldr	r1, [r0, #4]
     92e:	430b      	orrs	r3, r1
     930:	6053      	str	r3, [r2, #4]
     932:	4770      	bx	lr
     934:	10001dc0 	.word	0x10001dc0

00000938 <call_mskd_ref_var()>:
     938:	b500      	push	{lr}
     93a:	4b05      	ldr	r3, [pc, #20]	; (950 <call_mskd_ref_var()+0x18>)
     93c:	b082      	sub	sp, #8
     93e:	4668      	mov	r0, sp
     940:	681a      	ldr	r2, [r3, #0]
     942:	685b      	ldr	r3, [r3, #4]
     944:	9200      	str	r2, [sp, #0]
     946:	9301      	str	r3, [sp, #4]
     948:	f7ff fffe 	bl	924 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     94c:	b002      	add	sp, #8
     94e:	bd00      	pop	{pc}
     950:	00000000 	.word	0x00000000

00000954 <call_mskd_ref_const()>:
     954:	2306      	movs	r3, #6
     956:	b500      	push	{lr}
     958:	b082      	sub	sp, #8
     95a:	9300      	str	r3, [sp, #0]
     95c:	4668      	mov	r0, sp
     95e:	3b02      	subs	r3, #2
     960:	9301      	str	r3, [sp, #4]
     962:	f7ff fffe 	bl	924 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     966:	b002      	add	sp, #8
     968:	bd00      	pop	{pc}
     96a:	46c0      	nop			; (mov r8, r8)

0000096c <call_mskd_ref_global()>:
     96c:	2306      	movs	r3, #6
     96e:	b500      	push	{lr}
     970:	b082      	sub	sp, #8
     972:	9300      	str	r3, [sp, #0]
     974:	4668      	mov	r0, sp
     976:	3b04      	subs	r3, #4
     978:	9301      	str	r3, [sp, #4]
     97a:	f7ff fffe 	bl	924 <mskd_ref(regbits::Mskd<unsigned long, mcu::Serial::Config> const&)>
     97e:	b002      	add	sp, #8
     980:	bd00      	pop	{pc}
     982:	46c0      	nop			; (mov r8, r8)

00000984 <periph_bits(mcu::Serial volatile*)>:
     984:	2240      	movs	r2, #64	; 0x40
     986:	6843      	ldr	r3, [r0, #4]
     988:	4313      	orrs	r3, r2
     98a:	6043      	str	r3, [r0, #4]
     98c:	4770      	bx	lr
     98e:	46c0      	nop			; (mov r8, r8)

00000990 <call_periph_bits()>:
     990:	b500      	push	{lr}
     992:	4802      	ldr	r0, [pc, #8]	; (99c <call_periph_bits()+0xc>)
     994:	f7ff fffe 	bl	984 <periph_bits(mcu::Serial volatile*)>
     998:	bd00      	pop	{pc}
     99a:	46c0      	nop			; (mov r8, r8)
     99c:	10001dc0 	.word	0x10001dc0

000009a0 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     9a0:	6843      	ldr	r3, [r0, #4]
     9a2:	4319      	orrs	r1, r3
     9a4:	6041      	str	r1, [r0, #4]
     9a6:	4770      	bx	lr

000009a8 <call_periph_bits_val()>:
     9a8:	b500      	push	{lr}
     9aa:	2140      	movs	r1, #64	; 0x40
     9ac:	4801      	ldr	r0, [pc, #4]	; (9b4 <call_periph_bits_val()+0xc>)
     9ae:	f7ff fffe 	bl	9a0 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     9b2:	bd00      	pop	{pc}
     9b4:	10001dc0 	.word	0x10001dc0

000009b8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>:
     9b8:	6803      	ldr	r3, [r0, #0]
     9ba:	4319      	orrs	r1, r3
     9bc:	6001      	str	r1, [r0, #0]
     9be:	4770      	bx	lr

000009c0 <call_reg_bits_val()>:
     9c0:	b500      	push	{lr}
     9c2:	2140      	movs	r1, #64	; 0x40
     9c4:	4801      	ldr	r0, [pc, #4]	; (9cc <call_reg_bits_val()+0xc>)
     9c6:	f7ff fffe 	bl	9b8 <reg_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config>)>
     9ca:	bd00      	pop	{pc}
     9cc:	10001dc4 	.word	0x10001dc4

000009d0 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     9d0:	6843      	ldr	r3, [r0, #4]
     9d2:	680a      	ldr	r2, [r1, #0]
     9d4:	4313      	orrs	r3, r2
     9d6:	6043      	str	r3, [r0, #4]
     9d8:	4770      	bx	lr
     9da:	46c0      	nop			; (mov r8, r8)

000009dc <call_periph_bits_ref()>:
     9dc:	2340      	movs	r3, #64	; 0x40
     9de:	b500      	push	{lr}
     9e0:	b081      	sub	sp, #4
     9e2:	4669      	mov	r1, sp
     9e4:	4802      	ldr	r0, [pc, #8]	; (9f0 <call_periph_bits_ref()+0x14>)
     9e6:	9300      	str	r3, [sp, #0]
     9e8:	f7ff fffe 	bl	9d0 <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     9ec:	b001      	add	sp, #4
     9ee:	bd00      	pop	{pc}
     9f0:	10001dc0 	.word	0x10001dc0

000009f4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>:
     9f4:	6803      	ldr	r3, [r0, #0]
     9f6:	680a      	ldr	r2, [r1, #0]
     9f8:	4313      	orrs	r3, r2
     9fa:	6003      	str	r3, [r0, #0]
     9fc:	4770      	bx	lr
     9fe:	46c0      	nop			; (mov r8, r8)

00000a00 <call_reg_bits_ref()>:
     a00:	2340      	movs	r3, #64	; 0x40
     a02:	b500      	push	{lr}
     a04:	b081      	sub	sp, #4
     a06:	4669      	mov	r1, sp
     a08:	4802      	ldr	r0, [pc, #8]	; (a14 <call_reg_bits_ref()+0x14>)
     a0a:	9300      	str	r3, [sp, #0]
     a0c:	f7ff fffe 	bl	9f4 <reg_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Bits<unsigned long, mcu::Serial::Config> const&)>
     a10:	b001      	add	sp, #4
     a12:	bd00      	pop	{pc}
     a14:	10001dc4 	.word	0x10001dc4

00000a18 <periph_mskd(mcu::Serial volatile*)>:
     a18:	2206      	movs	r2, #6
     a1a:	6843      	ldr	r3, [r0, #4]
     a1c:	4393      	bics	r3, r2
     a1e:	3a04      	subs	r2, #4
     a20:	4313      	orrs	r3, r2
     a22:	6043      	str	r3, [r0, #4]
     a24:	4770      	bx	lr
     a26:	46c0      	nop			; (mov r8, r8)

00000a28 <call_periph_mskd()>:
     a28:	b500      	push	{lr}
     a2a:	4802      	ldr	r0, [pc, #8]	; (a34 <call_periph_mskd()+0xc>)
     a2c:	f7ff fffe 	bl	a18 <periph_mskd(mcu::Serial volatile*)>
     a30:	bd00      	pop	{pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	10001dc0 	.word	0x10001dc0

00000a38 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a38:	6843      	ldr	r3, [r0, #4]
     a3a:	438b      	bics	r3, r1
     a3c:	4313      	orrs	r3, r2
     a3e:	6043      	str	r3, [r0, #4]
     a40:	4770      	bx	lr
     a42:	46c0      	nop			; (mov r8, r8)

00000a44 <call_periph_mskd_val()>:
     a44:	b500      	push	{lr}
     a46:	2106      	movs	r1, #6
     a48:	2202      	movs	r2, #2
     a4a:	4802      	ldr	r0, [pc, #8]	; (a54 <call_periph_mskd_val()+0x10>)
     a4c:	f7ff fffe 	bl	a38 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a50:	bd00      	pop	{pc}
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	10001dc0 	.word	0x10001dc0

00000a58 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a58:	6803      	ldr	r3, [r0, #0]
     a5a:	438b      	bics	r3, r1
     a5c:	4313      	orrs	r3, r2
     a5e:	6003      	str	r3, [r0, #0]
     a60:	4770      	bx	lr
     a62:	46c0      	nop			; (mov r8, r8)

00000a64 <call_reg_mskd_val()>:
     a64:	b500      	push	{lr}
     a66:	2106      	movs	r1, #6
     a68:	2202      	movs	r2, #2
     a6a:	4802      	ldr	r0, [pc, #8]	; (a74 <call_reg_mskd_val()+0x10>)
     a6c:	f7ff fffe 	bl	a58 <reg_mskd_val(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a70:	bd00      	pop	{pc}
     a72:	46c0      	nop			; (mov r8, r8)
     a74:	10001dc4 	.word	0x10001dc4

00000a78 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a78:	6843      	ldr	r3, [r0, #4]
     a7a:	438b      	bics	r3, r1
     a7c:	4313      	orrs	r3, r2
     a7e:	6043      	str	r3, [r0, #4]
     a80:	4770      	bx	lr
     a82:	46c0      	nop			; (mov r8, r8)

00000a84 <call_periph_mskd_ref()>:
     a84:	b500      	push	{lr}
     a86:	2106      	movs	r1, #6
     a88:	2202      	movs	r2, #2
     a8a:	4802      	ldr	r0, [pc, #8]	; (a94 <call_periph_mskd_ref()+0x10>)
     a8c:	f7ff fffe 	bl	a78 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     a90:	bd00      	pop	{pc}
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	10001dc0 	.word	0x10001dc0

00000a98 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     a98:	6803      	ldr	r3, [r0, #0]
     a9a:	438b      	bics	r3, r1
     a9c:	4313      	orrs	r3, r2
     a9e:	6003      	str	r3, [r0, #0]
     aa0:	4770      	bx	lr
     aa2:	46c0      	nop			; (mov r8, r8)

00000aa4 <call_reg_mskd_ref()>:
     aa4:	b500      	push	{lr}
     aa6:	2106      	movs	r1, #6
     aa8:	2202      	movs	r2, #2
     aaa:	4802      	ldr	r0, [pc, #8]	; (ab4 <call_reg_mskd_ref()+0x10>)
     aac:	f7ff fffe 	bl	a98 <reg_mskd_ref(regbits::Reg<unsigned long, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     ab0:	bd00      	pop	{pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	10001dc4 	.word	0x10001dc4

00000ab8 <return_bits()>:
     ab8:	2020      	movs	r0, #32
     aba:	4770      	bx	lr

00000abc <call_return_bits()>:
     abc:	b500      	push	{lr}
     abe:	f7ff fffe 	bl	ab8 <return_bits()>
     ac2:	4b05      	ldr	r3, [pc, #20]	; (ad8 <call_return_bits()+0x1c>)
     ac4:	2820      	cmp	r0, #32
     ac6:	d003      	beq.n	ad0 <call_return_bits()+0x14>
     ac8:	22c0      	movs	r2, #192	; 0xc0
     aca:	04d2      	lsls	r2, r2, #19
     acc:	605a      	str	r2, [r3, #4]
     ace:	bd00      	pop	{pc}
     ad0:	22a8      	movs	r2, #168	; 0xa8
     ad2:	0592      	lsls	r2, r2, #22
     ad4:	605a      	str	r2, [r3, #4]
     ad6:	e7fa      	b.n	ace <call_return_bits()+0x12>
     ad8:	10001d20 	.word	0x10001d20

00000adc <return_mskd()>:
     adc:	2318      	movs	r3, #24
     ade:	6003      	str	r3, [r0, #0]
     ae0:	3b10      	subs	r3, #16
     ae2:	6043      	str	r3, [r0, #4]
     ae4:	4770      	bx	lr
     ae6:	46c0      	nop			; (mov r8, r8)

00000ae8 <call_return_mskd()>:
     ae8:	b500      	push	{lr}
     aea:	b082      	sub	sp, #8
     aec:	4668      	mov	r0, sp
     aee:	f7ff fffe 	bl	adc <return_mskd()>
     af2:	9a00      	ldr	r2, [sp, #0]
     af4:	9b01      	ldr	r3, [sp, #4]
     af6:	2a18      	cmp	r2, #24
     af8:	d005      	beq.n	b06 <call_return_mskd()+0x1e>
     afa:	2298      	movs	r2, #152	; 0x98
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <call_return_mskd()+0x2c>)
     afe:	0592      	lsls	r2, r2, #22
     b00:	605a      	str	r2, [r3, #4]
     b02:	b002      	add	sp, #8
     b04:	bd00      	pop	{pc}
     b06:	2b08      	cmp	r3, #8
     b08:	d1f7      	bne.n	afa <call_return_mskd()+0x12>
     b0a:	2288      	movs	r2, #136	; 0x88
     b0c:	4b01      	ldr	r3, [pc, #4]	; (b14 <call_return_mskd()+0x2c>)
     b0e:	0592      	lsls	r2, r2, #22
     b10:	605a      	str	r2, [r3, #4]
     b12:	e7f6      	b.n	b02 <call_return_mskd()+0x1a>
     b14:	10001d20 	.word	0x10001d20

00000b18 <return_reg()>:
     b18:	2240      	movs	r2, #64	; 0x40
     b1a:	4b02      	ldr	r3, [pc, #8]	; (b24 <return_reg()+0xc>)
     b1c:	4802      	ldr	r0, [pc, #8]	; (b28 <return_reg()+0x10>)
     b1e:	605a      	str	r2, [r3, #4]
     b20:	4770      	bx	lr
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	10001dc0 	.word	0x10001dc0
     b28:	10001dc4 	.word	0x10001dc4

00000b2c <call_return_reg()>:
     b2c:	b500      	push	{lr}
     b2e:	f7ff fffe 	bl	b18 <return_reg()>
     b32:	6803      	ldr	r3, [r0, #0]
     b34:	2b40      	cmp	r3, #64	; 0x40
     b36:	d004      	beq.n	b42 <call_return_reg()+0x16>
     b38:	22b8      	movs	r2, #184	; 0xb8
     b3a:	4b04      	ldr	r3, [pc, #16]	; (b4c <call_return_reg()+0x20>)
     b3c:	0592      	lsls	r2, r2, #22
     b3e:	605a      	str	r2, [r3, #4]
     b40:	bd00      	pop	{pc}
     b42:	22f0      	movs	r2, #240	; 0xf0
     b44:	4b01      	ldr	r3, [pc, #4]	; (b4c <call_return_reg()+0x20>)
     b46:	0552      	lsls	r2, r2, #21
     b48:	605a      	str	r2, [r3, #4]
     b4a:	e7f9      	b.n	b40 <call_return_reg()+0x14>
     b4c:	10001d20 	.word	0x10001d20

00000b50 <return_periph()>:
     b50:	2340      	movs	r3, #64	; 0x40
     b52:	4801      	ldr	r0, [pc, #4]	; (b58 <return_periph()+0x8>)
     b54:	6043      	str	r3, [r0, #4]
     b56:	4770      	bx	lr
     b58:	10001dc0 	.word	0x10001dc0

00000b5c <call_return_periph()>:
     b5c:	b500      	push	{lr}
     b5e:	f7ff fffe 	bl	b50 <return_periph()>
     b62:	6843      	ldr	r3, [r0, #4]
     b64:	2b40      	cmp	r3, #64	; 0x40
     b66:	d004      	beq.n	b72 <call_return_periph()+0x16>
     b68:	22a8      	movs	r2, #168	; 0xa8
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <call_return_periph()+0x20>)
     b6c:	0592      	lsls	r2, r2, #22
     b6e:	605a      	str	r2, [r3, #4]
     b70:	bd00      	pop	{pc}
     b72:	2298      	movs	r2, #152	; 0x98
     b74:	4b01      	ldr	r3, [pc, #4]	; (b7c <call_return_periph()+0x20>)
     b76:	0592      	lsls	r2, r2, #22
     b78:	605a      	str	r2, [r3, #4]
     b7a:	e7f9      	b.n	b70 <call_return_periph()+0x14>
     b7c:	10001d20 	.word	0x10001d20

00000b80 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)>:
     b80:	4b06      	ldr	r3, [pc, #24]	; (b9c <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x1c>)
     b82:	2805      	cmp	r0, #5
     b84:	d007      	beq.n	b96 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x16>
     b86:	2806      	cmp	r0, #6
     b88:	d002      	beq.n	b90 <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0x10>
     b8a:	2255      	movs	r2, #85	; 0x55
     b8c:	62da      	str	r2, [r3, #44]	; 0x2c
     b8e:	4770      	bx	lr
     b90:	2244      	movs	r2, #68	; 0x44
     b92:	62da      	str	r2, [r3, #44]	; 0x2c
     b94:	e7fb      	b.n	b8e <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
     b96:	2233      	movs	r2, #51	; 0x33
     b98:	62da      	str	r2, [r3, #44]	; 0x2c
     b9a:	e7f8      	b.n	b8e <pos_val(regbits::Pos<unsigned long, mcu::Serial::Config>)+0xe>
     b9c:	10001c00 	.word	0x10001c00

00000ba0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)>:
     ba0:	6803      	ldr	r3, [r0, #0]
     ba2:	2b05      	cmp	r3, #5
     ba4:	d009      	beq.n	bba <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x1a>
     ba6:	2b06      	cmp	r3, #6
     ba8:	d003      	beq.n	bb2 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x12>
     baa:	2288      	movs	r2, #136	; 0x88
     bac:	4b05      	ldr	r3, [pc, #20]	; (bc4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     bae:	62da      	str	r2, [r3, #44]	; 0x2c
     bb0:	4770      	bx	lr
     bb2:	2277      	movs	r2, #119	; 0x77
     bb4:	4b03      	ldr	r3, [pc, #12]	; (bc4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     bb6:	62da      	str	r2, [r3, #44]	; 0x2c
     bb8:	e7fa      	b.n	bb0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
     bba:	2266      	movs	r2, #102	; 0x66
     bbc:	4b01      	ldr	r3, [pc, #4]	; (bc4 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x24>)
     bbe:	62da      	str	r2, [r3, #44]	; 0x2c
     bc0:	e7f6      	b.n	bb0 <pos_ref(regbits::Pos<unsigned long, mcu::Serial::Config> const&)+0x10>
     bc2:	46c0      	nop			; (mov r8, r8)
     bc4:	10001c00 	.word	0x10001c00

00000bc8 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     bc8:	4a02      	ldr	r2, [pc, #8]	; (bd4 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     bca:	6853      	ldr	r3, [r2, #4]
     bcc:	4383      	bics	r3, r0
     bce:	430b      	orrs	r3, r1
     bd0:	6053      	str	r3, [r2, #4]
     bd2:	4770      	bx	lr
     bd4:	10001dc0 	.word	0x10001dc0

00000bd8 <call_range_val(unsigned int)>:
     bd8:	0001      	movs	r1, r0
     bda:	20f8      	movs	r0, #248	; 0xf8
     bdc:	b500      	push	{lr}
     bde:	0309      	lsls	r1, r1, #12
     be0:	0240      	lsls	r0, r0, #9
     be2:	f7ff fffe 	bl	bc8 <runtime_range_val(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     be6:	bd00      	pop	{pc}

00000be8 <call_range_val_port()>:
     be8:	b500      	push	{lr}
     bea:	201f      	movs	r0, #31
     bec:	f7ff fffe 	bl	bd8 <call_range_val(unsigned int)>
     bf0:	bd00      	pop	{pc}
     bf2:	46c0      	nop			; (mov r8, r8)

00000bf4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>:
     bf4:	4a02      	ldr	r2, [pc, #8]	; (c00 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)+0xc>)
     bf6:	6853      	ldr	r3, [r2, #4]
     bf8:	4383      	bics	r3, r0
     bfa:	430b      	orrs	r3, r1
     bfc:	6053      	str	r3, [r2, #4]
     bfe:	4770      	bx	lr
     c00:	10001dc0 	.word	0x10001dc0

00000c04 <call_range_ref(unsigned int)>:
     c04:	0001      	movs	r1, r0
     c06:	20f8      	movs	r0, #248	; 0xf8
     c08:	b500      	push	{lr}
     c0a:	0309      	lsls	r1, r1, #12
     c0c:	0240      	lsls	r0, r0, #9
     c0e:	f7ff fffe 	bl	bf4 <runtime_range_ref(regbits::Mskd<unsigned long, mcu::Serial::Config>)>
     c12:	bd00      	pop	{pc}

00000c14 <call_range_ref_port()>:
     c14:	b500      	push	{lr}
     c16:	200c      	movs	r0, #12
     c18:	f7ff fffe 	bl	c04 <call_range_ref(unsigned int)>
     c1c:	bd00      	pop	{pc}
     c1e:	46c0      	nop			; (mov r8, r8)

00000c20 <check_array_range_pass(unsigned int)>:
     c20:	4b04      	ldr	r3, [pc, #16]	; (c34 <check_array_range_pass(unsigned int)+0x14>)
     c22:	2816      	cmp	r0, #22
     c24:	d802      	bhi.n	c2c <check_array_range_pass(unsigned int)+0xc>
     c26:	227f      	movs	r2, #127	; 0x7f
     c28:	62da      	str	r2, [r3, #44]	; 0x2c
     c2a:	4770      	bx	lr
     c2c:	2283      	movs	r2, #131	; 0x83
     c2e:	62da      	str	r2, [r3, #44]	; 0x2c
     c30:	e7fb      	b.n	c2a <check_array_range_pass(unsigned int)+0xa>
     c32:	46c0      	nop			; (mov r8, r8)
     c34:	10001c00 	.word	0x10001c00

00000c38 <check_array_range_fail(unsigned int)>:
     c38:	4b04      	ldr	r3, [pc, #16]	; (c4c <check_array_range_fail(unsigned int)+0x14>)
     c3a:	2816      	cmp	r0, #22
     c3c:	d802      	bhi.n	c44 <check_array_range_fail(unsigned int)+0xc>
     c3e:	2295      	movs	r2, #149	; 0x95
     c40:	62da      	str	r2, [r3, #44]	; 0x2c
     c42:	4770      	bx	lr
     c44:	2297      	movs	r2, #151	; 0x97
     c46:	62da      	str	r2, [r3, #44]	; 0x2c
     c48:	e7fb      	b.n	c42 <check_array_range_fail(unsigned int)+0xa>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	10001c00 	.word	0x10001c00

00000c50 <check_bits_range_pass(unsigned int)>:
     c50:	4b04      	ldr	r3, [pc, #16]	; (c64 <check_bits_range_pass(unsigned int)+0x14>)
     c52:	280f      	cmp	r0, #15
     c54:	d802      	bhi.n	c5c <check_bits_range_pass(unsigned int)+0xc>
     c56:	229d      	movs	r2, #157	; 0x9d
     c58:	62da      	str	r2, [r3, #44]	; 0x2c
     c5a:	4770      	bx	lr
     c5c:	22a3      	movs	r2, #163	; 0xa3
     c5e:	62da      	str	r2, [r3, #44]	; 0x2c
     c60:	e7fb      	b.n	c5a <check_bits_range_pass(unsigned int)+0xa>
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	10001c00 	.word	0x10001c00

00000c68 <check_bits_range_fail(unsigned int)>:
     c68:	4b04      	ldr	r3, [pc, #16]	; (c7c <check_bits_range_fail(unsigned int)+0x14>)
     c6a:	280f      	cmp	r0, #15
     c6c:	d802      	bhi.n	c74 <check_bits_range_fail(unsigned int)+0xc>
     c6e:	22a7      	movs	r2, #167	; 0xa7
     c70:	62da      	str	r2, [r3, #44]	; 0x2c
     c72:	4770      	bx	lr
     c74:	22ad      	movs	r2, #173	; 0xad
     c76:	62da      	str	r2, [r3, #44]	; 0x2c
     c78:	e7fb      	b.n	c72 <check_bits_range_fail(unsigned int)+0xa>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	10001c00 	.word	0x10001c00

00000c80 <check_mskd_range_pass(unsigned int)>:
     c80:	4b04      	ldr	r3, [pc, #16]	; (c94 <check_mskd_range_pass(unsigned int)+0x14>)
     c82:	281f      	cmp	r0, #31
     c84:	d802      	bhi.n	c8c <check_mskd_range_pass(unsigned int)+0xc>
     c86:	22b3      	movs	r2, #179	; 0xb3
     c88:	62da      	str	r2, [r3, #44]	; 0x2c
     c8a:	4770      	bx	lr
     c8c:	22b5      	movs	r2, #181	; 0xb5
     c8e:	62da      	str	r2, [r3, #44]	; 0x2c
     c90:	e7fb      	b.n	c8a <check_mskd_range_pass(unsigned int)+0xa>
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	10001c00 	.word	0x10001c00

00000c98 <check_mskd_range_fail(unsigned int)>:
     c98:	4b04      	ldr	r3, [pc, #16]	; (cac <check_mskd_range_fail(unsigned int)+0x14>)
     c9a:	281f      	cmp	r0, #31
     c9c:	d802      	bhi.n	ca4 <check_mskd_range_fail(unsigned int)+0xc>
     c9e:	22bf      	movs	r2, #191	; 0xbf
     ca0:	62da      	str	r2, [r3, #44]	; 0x2c
     ca2:	4770      	bx	lr
     ca4:	22c1      	movs	r2, #193	; 0xc1
     ca6:	62da      	str	r2, [r3, #44]	; 0x2c
     ca8:	e7fb      	b.n	ca2 <check_mskd_range_fail(unsigned int)+0xa>
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	10001c00 	.word	0x10001c00

00000cb0 <bits_extract_ne()>:
     cb0:	2220      	movs	r2, #32
     cb2:	4b05      	ldr	r3, [pc, #20]	; (cc8 <bits_extract_ne()+0x18>)
     cb4:	605a      	str	r2, [r3, #4]
     cb6:	685a      	ldr	r2, [r3, #4]
     cb8:	2a20      	cmp	r2, #32
     cba:	d002      	beq.n	cc2 <bits_extract_ne()+0x12>
     cbc:	2202      	movs	r2, #2
     cbe:	605a      	str	r2, [r3, #4]
     cc0:	4770      	bx	lr
     cc2:	2204      	movs	r2, #4
     cc4:	605a      	str	r2, [r3, #4]
     cc6:	e7fb      	b.n	cc0 <bits_extract_ne()+0x10>
     cc8:	10001dc0 	.word	0x10001dc0

00000ccc <mskd_extract_geq()>:
     ccc:	22b0      	movs	r2, #176	; 0xb0
     cce:	4b07      	ldr	r3, [pc, #28]	; (cec <mskd_extract_geq()+0x20>)
     cd0:	0552      	lsls	r2, r2, #21
     cd2:	605a      	str	r2, [r3, #4]
     cd4:	685a      	ldr	r2, [r3, #4]
     cd6:	4b06      	ldr	r3, [pc, #24]	; (cf0 <mskd_extract_geq()+0x24>)
     cd8:	429a      	cmp	r2, r3
     cda:	d803      	bhi.n	ce4 <mskd_extract_geq()+0x18>
     cdc:	2240      	movs	r2, #64	; 0x40
     cde:	4b05      	ldr	r3, [pc, #20]	; (cf4 <mskd_extract_geq()+0x28>)
     ce0:	605a      	str	r2, [r3, #4]
     ce2:	4770      	bx	lr
     ce4:	2220      	movs	r2, #32
     ce6:	4b03      	ldr	r3, [pc, #12]	; (cf4 <mskd_extract_geq()+0x28>)
     ce8:	605a      	str	r2, [r3, #4]
     cea:	e7fa      	b.n	ce2 <mskd_extract_geq()+0x16>
     cec:	10001d20 	.word	0x10001d20
     cf0:	15ffffff 	.word	0x15ffffff
     cf4:	10001dc0 	.word	0x10001dc0

00000cf8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>:
     cf8:	22b8      	movs	r2, #184	; 0xb8
     cfa:	4b04      	ldr	r3, [pc, #16]	; (d0c <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x14>)
     cfc:	0592      	lsls	r2, r2, #22
     cfe:	605a      	str	r2, [r3, #4]
     d00:	685b      	ldr	r3, [r3, #4]
     d02:	4018      	ands	r0, r3
     d04:	40c8      	lsrs	r0, r1
     d06:	4b02      	ldr	r3, [pc, #8]	; (d10 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)+0x18>)
     d08:	62d8      	str	r0, [r3, #44]	; 0x2c
     d0a:	4770      	bx	lr
     d0c:	10001d20 	.word	0x10001d20
     d10:	10001c00 	.word	0x10001c00

00000d14 <call_shifted_const_val()>:
     d14:	20f8      	movs	r0, #248	; 0xf8
     d16:	b500      	push	{lr}
     d18:	0580      	lsls	r0, r0, #22
     d1a:	2119      	movs	r1, #25
     d1c:	f7ff fffe 	bl	cf8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     d20:	bd00      	pop	{pc}
     d22:	46c0      	nop			; (mov r8, r8)

00000d24 <call_shifted_var_val()>:
     d24:	20f8      	movs	r0, #248	; 0xf8
     d26:	b500      	push	{lr}
     d28:	0580      	lsls	r0, r0, #22
     d2a:	2119      	movs	r1, #25
     d2c:	f7ff fffe 	bl	cf8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     d30:	bd00      	pop	{pc}
     d32:	46c0      	nop			; (mov r8, r8)

00000d34 <call_shifted_global_val()>:
     d34:	20f8      	movs	r0, #248	; 0xf8
     d36:	b500      	push	{lr}
     d38:	0580      	lsls	r0, r0, #22
     d3a:	2119      	movs	r1, #25
     d3c:	f7ff fffe 	bl	cf8 <shifted_val(regbits::Shft<unsigned long, mcu::Timer::Prescale>)>
     d40:	bd00      	pop	{pc}
     d42:	46c0      	nop			; (mov r8, r8)

00000d44 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>:
     d44:	22b8      	movs	r2, #184	; 0xb8
     d46:	4b05      	ldr	r3, [pc, #20]	; (d5c <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x18>)
     d48:	0592      	lsls	r2, r2, #22
     d4a:	605a      	str	r2, [r3, #4]
     d4c:	6802      	ldr	r2, [r0, #0]
     d4e:	685b      	ldr	r3, [r3, #4]
     d50:	4013      	ands	r3, r2
     d52:	6842      	ldr	r2, [r0, #4]
     d54:	40d3      	lsrs	r3, r2
     d56:	4a02      	ldr	r2, [pc, #8]	; (d60 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)+0x1c>)
     d58:	62d3      	str	r3, [r2, #44]	; 0x2c
     d5a:	4770      	bx	lr
     d5c:	10001d20 	.word	0x10001d20
     d60:	10001c00 	.word	0x10001c00

00000d64 <call_shifted_const_ref()>:
     d64:	b500      	push	{lr}
     d66:	4b05      	ldr	r3, [pc, #20]	; (d7c <call_shifted_const_ref()+0x18>)
     d68:	b082      	sub	sp, #8
     d6a:	4668      	mov	r0, sp
     d6c:	689a      	ldr	r2, [r3, #8]
     d6e:	68db      	ldr	r3, [r3, #12]
     d70:	9200      	str	r2, [sp, #0]
     d72:	9301      	str	r3, [sp, #4]
     d74:	f7ff fffe 	bl	d44 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d78:	b002      	add	sp, #8
     d7a:	bd00      	pop	{pc}
     d7c:	00000000 	.word	0x00000000

00000d80 <call_shifted_var_ref()>:
     d80:	b500      	push	{lr}
     d82:	4b05      	ldr	r3, [pc, #20]	; (d98 <call_shifted_var_ref()+0x18>)
     d84:	b082      	sub	sp, #8
     d86:	4668      	mov	r0, sp
     d88:	691a      	ldr	r2, [r3, #16]
     d8a:	695b      	ldr	r3, [r3, #20]
     d8c:	9200      	str	r2, [sp, #0]
     d8e:	9301      	str	r3, [sp, #4]
     d90:	f7ff fffe 	bl	d44 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     d94:	b002      	add	sp, #8
     d96:	bd00      	pop	{pc}
     d98:	00000000 	.word	0x00000000

00000d9c <call_shifted_global_ref()>:
     d9c:	b500      	push	{lr}
     d9e:	4b05      	ldr	r3, [pc, #20]	; (db4 <call_shifted_global_ref()+0x18>)
     da0:	b082      	sub	sp, #8
     da2:	4668      	mov	r0, sp
     da4:	689a      	ldr	r2, [r3, #8]
     da6:	68db      	ldr	r3, [r3, #12]
     da8:	9200      	str	r2, [sp, #0]
     daa:	9301      	str	r3, [sp, #4]
     dac:	f7ff fffe 	bl	d44 <shifted_ref(regbits::Shft<unsigned long, mcu::Timer::Prescale> const&)>
     db0:	b002      	add	sp, #8
     db2:	bd00      	pop	{pc}
     db4:	00000000 	.word	0x00000000

00000db8 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>:
     db8:	0643      	lsls	r3, r0, #25
     dba:	d503      	bpl.n	dc4 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0xc>
     dbc:	2202      	movs	r2, #2
     dbe:	4b03      	ldr	r3, [pc, #12]	; (dcc <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x14>)
     dc0:	605a      	str	r2, [r3, #4]
     dc2:	4770      	bx	lr
     dc4:	2204      	movs	r2, #4
     dc6:	4b01      	ldr	r3, [pc, #4]	; (dcc <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0x14>)
     dc8:	605a      	str	r2, [r3, #4]
     dca:	e7fa      	b.n	dc2 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)+0xa>
     dcc:	10001dc0 	.word	0x10001dc0

00000dd0 <call_copy_bits_val()>:
     dd0:	2240      	movs	r2, #64	; 0x40
     dd2:	b500      	push	{lr}
     dd4:	4b02      	ldr	r3, [pc, #8]	; (de0 <call_copy_bits_val()+0x10>)
     dd6:	605a      	str	r2, [r3, #4]
     dd8:	6858      	ldr	r0, [r3, #4]
     dda:	f7ff fffe 	bl	db8 <copy_bits_val(regbits::Reg<unsigned long, mcu::Serial::Config>)>
     dde:	bd00      	pop	{pc}
     de0:	10001dc0 	.word	0x10001dc0

00000de4 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>:
     de4:	6803      	ldr	r3, [r0, #0]
     de6:	065b      	lsls	r3, r3, #25
     de8:	d503      	bpl.n	df2 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0xe>
     dea:	2202      	movs	r2, #2
     dec:	4b03      	ldr	r3, [pc, #12]	; (dfc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x18>)
     dee:	605a      	str	r2, [r3, #4]
     df0:	4770      	bx	lr
     df2:	2204      	movs	r2, #4
     df4:	4b01      	ldr	r3, [pc, #4]	; (dfc <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0x18>)
     df6:	605a      	str	r2, [r3, #4]
     df8:	e7fa      	b.n	df0 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)+0xc>
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	10001dc0 	.word	0x10001dc0

00000e00 <call_copy_bits_ref()>:
     e00:	2240      	movs	r2, #64	; 0x40
     e02:	b500      	push	{lr}
     e04:	4b04      	ldr	r3, [pc, #16]	; (e18 <call_copy_bits_ref()+0x18>)
     e06:	b081      	sub	sp, #4
     e08:	605a      	str	r2, [r3, #4]
     e0a:	685b      	ldr	r3, [r3, #4]
     e0c:	4668      	mov	r0, sp
     e0e:	9300      	str	r3, [sp, #0]
     e10:	f7ff fffe 	bl	de4 <copy_bits_ref(regbits::Reg<unsigned long, mcu::Serial::Config> const&)>
     e14:	b001      	add	sp, #4
     e16:	bd00      	pop	{pc}
     e18:	10001dc0 	.word	0x10001dc0

00000e1c <run>:
     e1c:	b530      	push	{r4, r5, lr}
     e1e:	4cfc      	ldr	r4, [pc, #1008]	; (1210 <run+0x3f4>)
     e20:	7823      	ldrb	r3, [r4, #0]
     e22:	2b00      	cmp	r3, #0
     e24:	d100      	bne.n	e28 <run+0xc>
     e26:	e322      	b.n	146e <run+0x652>
     e28:	68a1      	ldr	r1, [r4, #8]
     e2a:	7b23      	ldrb	r3, [r4, #12]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d103      	bne.n	e38 <run+0x1c>
     e30:	4bf8      	ldr	r3, [pc, #992]	; (1214 <run+0x3f8>)
     e32:	6163      	str	r3, [r4, #20]
     e34:	2301      	movs	r3, #1
     e36:	7323      	strb	r3, [r4, #12]
     e38:	7e23      	ldrb	r3, [r4, #24]
     e3a:	2b00      	cmp	r3, #0
     e3c:	d103      	bne.n	e46 <run+0x2a>
     e3e:	4bf6      	ldr	r3, [pc, #984]	; (1218 <run+0x3fc>)
     e40:	6223      	str	r3, [r4, #32]
     e42:	2301      	movs	r3, #1
     e44:	7623      	strb	r3, [r4, #24]
     e46:	2200      	movs	r2, #0
     e48:	48f4      	ldr	r0, [pc, #976]	; (121c <run+0x400>)
     e4a:	f7ff fffe 	bl	0 <do_test>
     e4e:	2201      	movs	r2, #1
     e50:	68a1      	ldr	r1, [r4, #8]
     e52:	48f3      	ldr	r0, [pc, #972]	; (1220 <run+0x404>)
     e54:	f7ff fffe 	bl	0 <do_test>
     e58:	2202      	movs	r2, #2
     e5a:	68a1      	ldr	r1, [r4, #8]
     e5c:	48f1      	ldr	r0, [pc, #964]	; (1224 <run+0x408>)
     e5e:	f7ff fffe 	bl	0 <do_test>
     e62:	2203      	movs	r2, #3
     e64:	68a1      	ldr	r1, [r4, #8]
     e66:	48f0      	ldr	r0, [pc, #960]	; (1228 <run+0x40c>)
     e68:	f7ff fffe 	bl	0 <do_test>
     e6c:	2204      	movs	r2, #4
     e6e:	68a1      	ldr	r1, [r4, #8]
     e70:	48ee      	ldr	r0, [pc, #952]	; (122c <run+0x410>)
     e72:	f7ff fffe 	bl	0 <do_test>
     e76:	2205      	movs	r2, #5
     e78:	68a1      	ldr	r1, [r4, #8]
     e7a:	48ed      	ldr	r0, [pc, #948]	; (1230 <run+0x414>)
     e7c:	f7ff fffe 	bl	0 <do_test>
     e80:	2206      	movs	r2, #6
     e82:	68a1      	ldr	r1, [r4, #8]
     e84:	48eb      	ldr	r0, [pc, #940]	; (1234 <run+0x418>)
     e86:	f7ff fffe 	bl	0 <do_test>
     e8a:	2207      	movs	r2, #7
     e8c:	68a1      	ldr	r1, [r4, #8]
     e8e:	48ea      	ldr	r0, [pc, #936]	; (1238 <run+0x41c>)
     e90:	f7ff fffe 	bl	0 <do_test>
     e94:	2208      	movs	r2, #8
     e96:	68a1      	ldr	r1, [r4, #8]
     e98:	48e8      	ldr	r0, [pc, #928]	; (123c <run+0x420>)
     e9a:	f7ff fffe 	bl	0 <do_test>
     e9e:	2209      	movs	r2, #9
     ea0:	68a1      	ldr	r1, [r4, #8]
     ea2:	48e7      	ldr	r0, [pc, #924]	; (1240 <run+0x424>)
     ea4:	f7ff fffe 	bl	0 <do_test>
     ea8:	220a      	movs	r2, #10
     eaa:	68a1      	ldr	r1, [r4, #8]
     eac:	48e5      	ldr	r0, [pc, #916]	; (1244 <run+0x428>)
     eae:	f7ff fffe 	bl	0 <do_test>
     eb2:	220b      	movs	r2, #11
     eb4:	68a1      	ldr	r1, [r4, #8]
     eb6:	48e4      	ldr	r0, [pc, #912]	; (1248 <run+0x42c>)
     eb8:	f7ff fffe 	bl	0 <do_test>
     ebc:	220c      	movs	r2, #12
     ebe:	68a1      	ldr	r1, [r4, #8]
     ec0:	48e2      	ldr	r0, [pc, #904]	; (124c <run+0x430>)
     ec2:	f7ff fffe 	bl	0 <do_test>
     ec6:	220d      	movs	r2, #13
     ec8:	68a1      	ldr	r1, [r4, #8]
     eca:	48e1      	ldr	r0, [pc, #900]	; (1250 <run+0x434>)
     ecc:	f7ff fffe 	bl	0 <do_test>
     ed0:	220e      	movs	r2, #14
     ed2:	68a1      	ldr	r1, [r4, #8]
     ed4:	48df      	ldr	r0, [pc, #892]	; (1254 <run+0x438>)
     ed6:	f7ff fffe 	bl	0 <do_test>
     eda:	220f      	movs	r2, #15
     edc:	68a1      	ldr	r1, [r4, #8]
     ede:	48de      	ldr	r0, [pc, #888]	; (1258 <run+0x43c>)
     ee0:	f7ff fffe 	bl	0 <do_test>
     ee4:	2210      	movs	r2, #16
     ee6:	68a1      	ldr	r1, [r4, #8]
     ee8:	48dc      	ldr	r0, [pc, #880]	; (125c <run+0x440>)
     eea:	f7ff fffe 	bl	0 <do_test>
     eee:	2211      	movs	r2, #17
     ef0:	68a1      	ldr	r1, [r4, #8]
     ef2:	48db      	ldr	r0, [pc, #876]	; (1260 <run+0x444>)
     ef4:	f7ff fffe 	bl	0 <do_test>
     ef8:	2212      	movs	r2, #18
     efa:	68a1      	ldr	r1, [r4, #8]
     efc:	48d9      	ldr	r0, [pc, #868]	; (1264 <run+0x448>)
     efe:	f7ff fffe 	bl	0 <do_test>
     f02:	2213      	movs	r2, #19
     f04:	68a1      	ldr	r1, [r4, #8]
     f06:	48d8      	ldr	r0, [pc, #864]	; (1268 <run+0x44c>)
     f08:	f7ff fffe 	bl	0 <do_test>
     f0c:	2214      	movs	r2, #20
     f0e:	68a1      	ldr	r1, [r4, #8]
     f10:	48d6      	ldr	r0, [pc, #856]	; (126c <run+0x450>)
     f12:	f7ff fffe 	bl	0 <do_test>
     f16:	2215      	movs	r2, #21
     f18:	68a1      	ldr	r1, [r4, #8]
     f1a:	48d5      	ldr	r0, [pc, #852]	; (1270 <run+0x454>)
     f1c:	f7ff fffe 	bl	0 <do_test>
     f20:	2216      	movs	r2, #22
     f22:	68a1      	ldr	r1, [r4, #8]
     f24:	48d3      	ldr	r0, [pc, #844]	; (1274 <run+0x458>)
     f26:	f7ff fffe 	bl	0 <do_test>
     f2a:	2217      	movs	r2, #23
     f2c:	68a1      	ldr	r1, [r4, #8]
     f2e:	48d2      	ldr	r0, [pc, #840]	; (1278 <run+0x45c>)
     f30:	f7ff fffe 	bl	0 <do_test>
     f34:	2218      	movs	r2, #24
     f36:	68a1      	ldr	r1, [r4, #8]
     f38:	48d0      	ldr	r0, [pc, #832]	; (127c <run+0x460>)
     f3a:	f7ff fffe 	bl	0 <do_test>
     f3e:	2219      	movs	r2, #25
     f40:	68a1      	ldr	r1, [r4, #8]
     f42:	48cf      	ldr	r0, [pc, #828]	; (1280 <run+0x464>)
     f44:	f7ff fffe 	bl	0 <do_test>
     f48:	221a      	movs	r2, #26
     f4a:	68a1      	ldr	r1, [r4, #8]
     f4c:	48cd      	ldr	r0, [pc, #820]	; (1284 <run+0x468>)
     f4e:	f7ff fffe 	bl	0 <do_test>
     f52:	221b      	movs	r2, #27
     f54:	68a1      	ldr	r1, [r4, #8]
     f56:	48cc      	ldr	r0, [pc, #816]	; (1288 <run+0x46c>)
     f58:	f7ff fffe 	bl	0 <do_test>
     f5c:	221c      	movs	r2, #28
     f5e:	68a1      	ldr	r1, [r4, #8]
     f60:	48ca      	ldr	r0, [pc, #808]	; (128c <run+0x470>)
     f62:	f7ff fffe 	bl	0 <do_test>
     f66:	221d      	movs	r2, #29
     f68:	68a1      	ldr	r1, [r4, #8]
     f6a:	48c9      	ldr	r0, [pc, #804]	; (1290 <run+0x474>)
     f6c:	f7ff fffe 	bl	0 <do_test>
     f70:	221e      	movs	r2, #30
     f72:	68a1      	ldr	r1, [r4, #8]
     f74:	48c7      	ldr	r0, [pc, #796]	; (1294 <run+0x478>)
     f76:	f7ff fffe 	bl	0 <do_test>
     f7a:	221f      	movs	r2, #31
     f7c:	68a1      	ldr	r1, [r4, #8]
     f7e:	48c6      	ldr	r0, [pc, #792]	; (1298 <run+0x47c>)
     f80:	f7ff fffe 	bl	0 <do_test>
     f84:	2220      	movs	r2, #32
     f86:	68a1      	ldr	r1, [r4, #8]
     f88:	48c4      	ldr	r0, [pc, #784]	; (129c <run+0x480>)
     f8a:	f7ff fffe 	bl	0 <do_test>
     f8e:	2221      	movs	r2, #33	; 0x21
     f90:	68a1      	ldr	r1, [r4, #8]
     f92:	48c3      	ldr	r0, [pc, #780]	; (12a0 <run+0x484>)
     f94:	f7ff fffe 	bl	0 <do_test>
     f98:	2222      	movs	r2, #34	; 0x22
     f9a:	68a1      	ldr	r1, [r4, #8]
     f9c:	48c1      	ldr	r0, [pc, #772]	; (12a4 <run+0x488>)
     f9e:	f7ff fffe 	bl	0 <do_test>
     fa2:	2223      	movs	r2, #35	; 0x23
     fa4:	68a1      	ldr	r1, [r4, #8]
     fa6:	48c0      	ldr	r0, [pc, #768]	; (12a8 <run+0x48c>)
     fa8:	f7ff fffe 	bl	0 <do_test>
     fac:	2224      	movs	r2, #36	; 0x24
     fae:	68a1      	ldr	r1, [r4, #8]
     fb0:	48be      	ldr	r0, [pc, #760]	; (12ac <run+0x490>)
     fb2:	f7ff fffe 	bl	0 <do_test>
     fb6:	2225      	movs	r2, #37	; 0x25
     fb8:	6961      	ldr	r1, [r4, #20]
     fba:	48bd      	ldr	r0, [pc, #756]	; (12b0 <run+0x494>)
     fbc:	f7ff fffe 	bl	0 <do_test>
     fc0:	2226      	movs	r2, #38	; 0x26
     fc2:	6961      	ldr	r1, [r4, #20]
     fc4:	48bb      	ldr	r0, [pc, #748]	; (12b4 <run+0x498>)
     fc6:	f7ff fffe 	bl	0 <do_test>
     fca:	2227      	movs	r2, #39	; 0x27
     fcc:	6961      	ldr	r1, [r4, #20]
     fce:	48ba      	ldr	r0, [pc, #744]	; (12b8 <run+0x49c>)
     fd0:	f7ff fffe 	bl	0 <do_test>
     fd4:	2228      	movs	r2, #40	; 0x28
     fd6:	68a1      	ldr	r1, [r4, #8]
     fd8:	48b8      	ldr	r0, [pc, #736]	; (12bc <run+0x4a0>)
     fda:	f7ff fffe 	bl	0 <do_test>
     fde:	2229      	movs	r2, #41	; 0x29
     fe0:	68a1      	ldr	r1, [r4, #8]
     fe2:	48b7      	ldr	r0, [pc, #732]	; (12c0 <run+0x4a4>)
     fe4:	f7ff fffe 	bl	0 <do_test>
     fe8:	222a      	movs	r2, #42	; 0x2a
     fea:	68a1      	ldr	r1, [r4, #8]
     fec:	48b5      	ldr	r0, [pc, #724]	; (12c4 <run+0x4a8>)
     fee:	f7ff fffe 	bl	0 <do_test>
     ff2:	222b      	movs	r2, #43	; 0x2b
     ff4:	68a1      	ldr	r1, [r4, #8]
     ff6:	48b4      	ldr	r0, [pc, #720]	; (12c8 <run+0x4ac>)
     ff8:	f7ff fffe 	bl	0 <do_test>
     ffc:	222c      	movs	r2, #44	; 0x2c
     ffe:	68a1      	ldr	r1, [r4, #8]
    1000:	48b2      	ldr	r0, [pc, #712]	; (12cc <run+0x4b0>)
    1002:	f7ff fffe 	bl	0 <do_test>
    1006:	222d      	movs	r2, #45	; 0x2d
    1008:	6a21      	ldr	r1, [r4, #32]
    100a:	48b1      	ldr	r0, [pc, #708]	; (12d0 <run+0x4b4>)
    100c:	f7ff fffe 	bl	0 <do_test>
    1010:	222e      	movs	r2, #46	; 0x2e
    1012:	68a1      	ldr	r1, [r4, #8]
    1014:	48af      	ldr	r0, [pc, #700]	; (12d4 <run+0x4b8>)
    1016:	f7ff fffe 	bl	0 <do_test>
    101a:	222f      	movs	r2, #47	; 0x2f
    101c:	68a1      	ldr	r1, [r4, #8]
    101e:	48ae      	ldr	r0, [pc, #696]	; (12d8 <run+0x4bc>)
    1020:	f7ff fffe 	bl	0 <do_test>
    1024:	2230      	movs	r2, #48	; 0x30
    1026:	68a1      	ldr	r1, [r4, #8]
    1028:	48ac      	ldr	r0, [pc, #688]	; (12dc <run+0x4c0>)
    102a:	f7ff fffe 	bl	0 <do_test>
    102e:	2231      	movs	r2, #49	; 0x31
    1030:	68a1      	ldr	r1, [r4, #8]
    1032:	48ab      	ldr	r0, [pc, #684]	; (12e0 <run+0x4c4>)
    1034:	f7ff fffe 	bl	0 <do_test>
    1038:	2232      	movs	r2, #50	; 0x32
    103a:	68a1      	ldr	r1, [r4, #8]
    103c:	48a9      	ldr	r0, [pc, #676]	; (12e4 <run+0x4c8>)
    103e:	f7ff fffe 	bl	0 <do_test>
    1042:	2233      	movs	r2, #51	; 0x33
    1044:	68a1      	ldr	r1, [r4, #8]
    1046:	48a8      	ldr	r0, [pc, #672]	; (12e8 <run+0x4cc>)
    1048:	f7ff fffe 	bl	0 <do_test>
    104c:	2234      	movs	r2, #52	; 0x34
    104e:	68a1      	ldr	r1, [r4, #8]
    1050:	48a6      	ldr	r0, [pc, #664]	; (12ec <run+0x4d0>)
    1052:	f7ff fffe 	bl	0 <do_test>
    1056:	2235      	movs	r2, #53	; 0x35
    1058:	68a1      	ldr	r1, [r4, #8]
    105a:	48a5      	ldr	r0, [pc, #660]	; (12f0 <run+0x4d4>)
    105c:	f7ff fffe 	bl	0 <do_test>
    1060:	2236      	movs	r2, #54	; 0x36
    1062:	68a1      	ldr	r1, [r4, #8]
    1064:	48a3      	ldr	r0, [pc, #652]	; (12f4 <run+0x4d8>)
    1066:	f7ff fffe 	bl	0 <do_test>
    106a:	2237      	movs	r2, #55	; 0x37
    106c:	68a1      	ldr	r1, [r4, #8]
    106e:	48a2      	ldr	r0, [pc, #648]	; (12f8 <run+0x4dc>)
    1070:	f7ff fffe 	bl	0 <do_test>
    1074:	2238      	movs	r2, #56	; 0x38
    1076:	68a1      	ldr	r1, [r4, #8]
    1078:	48a0      	ldr	r0, [pc, #640]	; (12fc <run+0x4e0>)
    107a:	f7ff fffe 	bl	0 <do_test>
    107e:	2239      	movs	r2, #57	; 0x39
    1080:	68a1      	ldr	r1, [r4, #8]
    1082:	489f      	ldr	r0, [pc, #636]	; (1300 <run+0x4e4>)
    1084:	f7ff fffe 	bl	0 <do_test>
    1088:	223a      	movs	r2, #58	; 0x3a
    108a:	68a1      	ldr	r1, [r4, #8]
    108c:	489d      	ldr	r0, [pc, #628]	; (1304 <run+0x4e8>)
    108e:	f7ff fffe 	bl	0 <do_test>
    1092:	223b      	movs	r2, #59	; 0x3b
    1094:	68a1      	ldr	r1, [r4, #8]
    1096:	489c      	ldr	r0, [pc, #624]	; (1308 <run+0x4ec>)
    1098:	f7ff fffe 	bl	0 <do_test>
    109c:	223c      	movs	r2, #60	; 0x3c
    109e:	68a1      	ldr	r1, [r4, #8]
    10a0:	489a      	ldr	r0, [pc, #616]	; (130c <run+0x4f0>)
    10a2:	f7ff fffe 	bl	0 <do_test>
    10a6:	223d      	movs	r2, #61	; 0x3d
    10a8:	68a1      	ldr	r1, [r4, #8]
    10aa:	4899      	ldr	r0, [pc, #612]	; (1310 <run+0x4f4>)
    10ac:	f7ff fffe 	bl	0 <do_test>
    10b0:	223e      	movs	r2, #62	; 0x3e
    10b2:	68a1      	ldr	r1, [r4, #8]
    10b4:	4897      	ldr	r0, [pc, #604]	; (1314 <run+0x4f8>)
    10b6:	f7ff fffe 	bl	0 <do_test>
    10ba:	223f      	movs	r2, #63	; 0x3f
    10bc:	68a1      	ldr	r1, [r4, #8]
    10be:	4896      	ldr	r0, [pc, #600]	; (1318 <run+0x4fc>)
    10c0:	f7ff fffe 	bl	0 <do_test>
    10c4:	2240      	movs	r2, #64	; 0x40
    10c6:	68a1      	ldr	r1, [r4, #8]
    10c8:	4894      	ldr	r0, [pc, #592]	; (131c <run+0x500>)
    10ca:	f7ff fffe 	bl	0 <do_test>
    10ce:	2241      	movs	r2, #65	; 0x41
    10d0:	68a1      	ldr	r1, [r4, #8]
    10d2:	4893      	ldr	r0, [pc, #588]	; (1320 <run+0x504>)
    10d4:	f7ff fffe 	bl	0 <do_test>
    10d8:	2242      	movs	r2, #66	; 0x42
    10da:	6961      	ldr	r1, [r4, #20]
    10dc:	4891      	ldr	r0, [pc, #580]	; (1324 <run+0x508>)
    10de:	f7ff fffe 	bl	0 <do_test>
    10e2:	2243      	movs	r2, #67	; 0x43
    10e4:	6961      	ldr	r1, [r4, #20]
    10e6:	4890      	ldr	r0, [pc, #576]	; (1328 <run+0x50c>)
    10e8:	f7ff fffe 	bl	0 <do_test>
    10ec:	2244      	movs	r2, #68	; 0x44
    10ee:	6961      	ldr	r1, [r4, #20]
    10f0:	488e      	ldr	r0, [pc, #568]	; (132c <run+0x510>)
    10f2:	f7ff fffe 	bl	0 <do_test>
    10f6:	2245      	movs	r2, #69	; 0x45
    10f8:	68a1      	ldr	r1, [r4, #8]
    10fa:	488d      	ldr	r0, [pc, #564]	; (1330 <run+0x514>)
    10fc:	f7ff fffe 	bl	0 <do_test>
    1100:	2246      	movs	r2, #70	; 0x46
    1102:	6a21      	ldr	r1, [r4, #32]
    1104:	488b      	ldr	r0, [pc, #556]	; (1334 <run+0x518>)
    1106:	f7ff fffe 	bl	0 <do_test>
    110a:	2247      	movs	r2, #71	; 0x47
    110c:	6a21      	ldr	r1, [r4, #32]
    110e:	488a      	ldr	r0, [pc, #552]	; (1338 <run+0x51c>)
    1110:	f7ff fffe 	bl	0 <do_test>
    1114:	2248      	movs	r2, #72	; 0x48
    1116:	68a1      	ldr	r1, [r4, #8]
    1118:	4888      	ldr	r0, [pc, #544]	; (133c <run+0x520>)
    111a:	f7ff fffe 	bl	0 <do_test>
    111e:	2249      	movs	r2, #73	; 0x49
    1120:	68a1      	ldr	r1, [r4, #8]
    1122:	4887      	ldr	r0, [pc, #540]	; (1340 <run+0x524>)
    1124:	f7ff fffe 	bl	0 <do_test>
    1128:	224a      	movs	r2, #74	; 0x4a
    112a:	6a21      	ldr	r1, [r4, #32]
    112c:	4885      	ldr	r0, [pc, #532]	; (1344 <run+0x528>)
    112e:	f7ff fffe 	bl	0 <do_test>
    1132:	224b      	movs	r2, #75	; 0x4b
    1134:	6a21      	ldr	r1, [r4, #32]
    1136:	4884      	ldr	r0, [pc, #528]	; (1348 <run+0x52c>)
    1138:	f7ff fffe 	bl	0 <do_test>
    113c:	224c      	movs	r2, #76	; 0x4c
    113e:	68a1      	ldr	r1, [r4, #8]
    1140:	4882      	ldr	r0, [pc, #520]	; (134c <run+0x530>)
    1142:	f7ff fffe 	bl	0 <do_test>
    1146:	224d      	movs	r2, #77	; 0x4d
    1148:	68a1      	ldr	r1, [r4, #8]
    114a:	4881      	ldr	r0, [pc, #516]	; (1350 <run+0x534>)
    114c:	f7ff fffe 	bl	0 <do_test>
    1150:	224e      	movs	r2, #78	; 0x4e
    1152:	68a1      	ldr	r1, [r4, #8]
    1154:	487f      	ldr	r0, [pc, #508]	; (1354 <run+0x538>)
    1156:	f7ff fffe 	bl	0 <do_test>
    115a:	224f      	movs	r2, #79	; 0x4f
    115c:	68a1      	ldr	r1, [r4, #8]
    115e:	487e      	ldr	r0, [pc, #504]	; (1358 <run+0x53c>)
    1160:	f7ff fffe 	bl	0 <do_test>
    1164:	2250      	movs	r2, #80	; 0x50
    1166:	68a1      	ldr	r1, [r4, #8]
    1168:	487c      	ldr	r0, [pc, #496]	; (135c <run+0x540>)
    116a:	f7ff fffe 	bl	0 <do_test>
    116e:	2251      	movs	r2, #81	; 0x51
    1170:	68a1      	ldr	r1, [r4, #8]
    1172:	487b      	ldr	r0, [pc, #492]	; (1360 <run+0x544>)
    1174:	f7ff fffe 	bl	0 <do_test>
    1178:	4d7a      	ldr	r5, [pc, #488]	; (1364 <run+0x548>)
    117a:	2252      	movs	r2, #82	; 0x52
    117c:	0028      	movs	r0, r5
    117e:	68a1      	ldr	r1, [r4, #8]
    1180:	f7ff fffe 	bl	0 <do_test>
    1184:	0028      	movs	r0, r5
    1186:	2253      	movs	r2, #83	; 0x53
    1188:	68a1      	ldr	r1, [r4, #8]
    118a:	f7ff fffe 	bl	0 <do_test>
    118e:	2254      	movs	r2, #84	; 0x54
    1190:	68a1      	ldr	r1, [r4, #8]
    1192:	4875      	ldr	r0, [pc, #468]	; (1368 <run+0x54c>)
    1194:	f7ff fffe 	bl	0 <do_test>
    1198:	2255      	movs	r2, #85	; 0x55
    119a:	68a1      	ldr	r1, [r4, #8]
    119c:	4873      	ldr	r0, [pc, #460]	; (136c <run+0x550>)
    119e:	f7ff fffe 	bl	0 <do_test>
    11a2:	2256      	movs	r2, #86	; 0x56
    11a4:	68a1      	ldr	r1, [r4, #8]
    11a6:	4872      	ldr	r0, [pc, #456]	; (1370 <run+0x554>)
    11a8:	f7ff fffe 	bl	0 <do_test>
    11ac:	4d71      	ldr	r5, [pc, #452]	; (1374 <run+0x558>)
    11ae:	2257      	movs	r2, #87	; 0x57
    11b0:	0028      	movs	r0, r5
    11b2:	68a1      	ldr	r1, [r4, #8]
    11b4:	f7ff fffe 	bl	0 <do_test>
    11b8:	2258      	movs	r2, #88	; 0x58
    11ba:	68a1      	ldr	r1, [r4, #8]
    11bc:	486e      	ldr	r0, [pc, #440]	; (1378 <run+0x55c>)
    11be:	f7ff fffe 	bl	0 <do_test>
    11c2:	0028      	movs	r0, r5
    11c4:	2259      	movs	r2, #89	; 0x59
    11c6:	68a1      	ldr	r1, [r4, #8]
    11c8:	f7ff fffe 	bl	0 <do_test>
    11cc:	225a      	movs	r2, #90	; 0x5a
    11ce:	68a1      	ldr	r1, [r4, #8]
    11d0:	486a      	ldr	r0, [pc, #424]	; (137c <run+0x560>)
    11d2:	f7ff fffe 	bl	0 <do_test>
    11d6:	225b      	movs	r2, #91	; 0x5b
    11d8:	68a1      	ldr	r1, [r4, #8]
    11da:	4869      	ldr	r0, [pc, #420]	; (1380 <run+0x564>)
    11dc:	f7ff fffe 	bl	0 <do_test>
    11e0:	225c      	movs	r2, #92	; 0x5c
    11e2:	6a21      	ldr	r1, [r4, #32]
    11e4:	4867      	ldr	r0, [pc, #412]	; (1384 <run+0x568>)
    11e6:	f7ff fffe 	bl	0 <do_test>
    11ea:	225d      	movs	r2, #93	; 0x5d
    11ec:	6a21      	ldr	r1, [r4, #32]
    11ee:	4866      	ldr	r0, [pc, #408]	; (1388 <run+0x56c>)
    11f0:	f7ff fffe 	bl	0 <do_test>
    11f4:	225e      	movs	r2, #94	; 0x5e
    11f6:	68a1      	ldr	r1, [r4, #8]
    11f8:	4864      	ldr	r0, [pc, #400]	; (138c <run+0x570>)
    11fa:	f7ff fffe 	bl	0 <do_test>
    11fe:	225f      	movs	r2, #95	; 0x5f
    1200:	6a21      	ldr	r1, [r4, #32]
    1202:	4863      	ldr	r0, [pc, #396]	; (1390 <run+0x574>)
    1204:	f7ff fffe 	bl	0 <do_test>
    1208:	2260      	movs	r2, #96	; 0x60
    120a:	6a21      	ldr	r1, [r4, #32]
    120c:	e0c2      	b.n	1394 <run+0x578>
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	00000000 	.word	0x00000000
    1214:	10001d24 	.word	0x10001d24
    1218:	10001c2c 	.word	0x10001c2c
	...
    1394:	4838      	ldr	r0, [pc, #224]	; (e4 <do_test+0xe4>)
    1396:	f7ff fffe 	bl	0 <do_test>
    139a:	2261      	movs	r2, #97	; 0x61
    139c:	68a1      	ldr	r1, [r4, #8]
    139e:	4837      	ldr	r0, [pc, #220]	; (147c <run+0x660>)
    13a0:	f7ff fffe 	bl	0 <do_test>
    13a4:	2262      	movs	r2, #98	; 0x62
    13a6:	68a1      	ldr	r1, [r4, #8]
    13a8:	4835      	ldr	r0, [pc, #212]	; (1480 <run+0x664>)
    13aa:	f7ff fffe 	bl	0 <do_test>
    13ae:	2263      	movs	r2, #99	; 0x63
    13b0:	68a1      	ldr	r1, [r4, #8]
    13b2:	4834      	ldr	r0, [pc, #208]	; (1484 <run+0x668>)
    13b4:	f7ff fffe 	bl	0 <do_test>
    13b8:	2264      	movs	r2, #100	; 0x64
    13ba:	68a1      	ldr	r1, [r4, #8]
    13bc:	4832      	ldr	r0, [pc, #200]	; (1488 <run+0x66c>)
    13be:	f7ff fffe 	bl	0 <do_test>
    13c2:	2265      	movs	r2, #101	; 0x65
    13c4:	6a21      	ldr	r1, [r4, #32]
    13c6:	4831      	ldr	r0, [pc, #196]	; (148c <run+0x670>)
    13c8:	f7ff fffe 	bl	0 <do_test>
    13cc:	2266      	movs	r2, #102	; 0x66
    13ce:	6a21      	ldr	r1, [r4, #32]
    13d0:	482f      	ldr	r0, [pc, #188]	; (1490 <run+0x674>)
    13d2:	f7ff fffe 	bl	0 <do_test>
    13d6:	2267      	movs	r2, #103	; 0x67
    13d8:	6a21      	ldr	r1, [r4, #32]
    13da:	482e      	ldr	r0, [pc, #184]	; (1494 <run+0x678>)
    13dc:	f7ff fffe 	bl	0 <do_test>
    13e0:	2268      	movs	r2, #104	; 0x68
    13e2:	6a21      	ldr	r1, [r4, #32]
    13e4:	482c      	ldr	r0, [pc, #176]	; (1498 <run+0x67c>)
    13e6:	f7ff fffe 	bl	0 <do_test>
    13ea:	2269      	movs	r2, #105	; 0x69
    13ec:	6a21      	ldr	r1, [r4, #32]
    13ee:	482b      	ldr	r0, [pc, #172]	; (149c <run+0x680>)
    13f0:	f7ff fffe 	bl	0 <do_test>
    13f4:	226a      	movs	r2, #106	; 0x6a
    13f6:	6a21      	ldr	r1, [r4, #32]
    13f8:	4829      	ldr	r0, [pc, #164]	; (14a0 <run+0x684>)
    13fa:	f7ff fffe 	bl	0 <do_test>
    13fe:	226b      	movs	r2, #107	; 0x6b
    1400:	68a1      	ldr	r1, [r4, #8]
    1402:	4828      	ldr	r0, [pc, #160]	; (14a4 <run+0x688>)
    1404:	f7ff fffe 	bl	0 <do_test>
    1408:	226c      	movs	r2, #108	; 0x6c
    140a:	68a1      	ldr	r1, [r4, #8]
    140c:	4826      	ldr	r0, [pc, #152]	; (14a8 <run+0x68c>)
    140e:	f7ff fffe 	bl	0 <do_test>
    1412:	226d      	movs	r2, #109	; 0x6d
    1414:	68a1      	ldr	r1, [r4, #8]
    1416:	4825      	ldr	r0, [pc, #148]	; (14ac <run+0x690>)
    1418:	f7ff fffe 	bl	0 <do_test>
    141c:	226e      	movs	r2, #110	; 0x6e
    141e:	68a1      	ldr	r1, [r4, #8]
    1420:	4823      	ldr	r0, [pc, #140]	; (14b0 <run+0x694>)
    1422:	f7ff fffe 	bl	0 <do_test>
    1426:	226f      	movs	r2, #111	; 0x6f
    1428:	68a1      	ldr	r1, [r4, #8]
    142a:	4822      	ldr	r0, [pc, #136]	; (14b4 <run+0x698>)
    142c:	f7ff fffe 	bl	0 <do_test>
    1430:	2270      	movs	r2, #112	; 0x70
    1432:	68a1      	ldr	r1, [r4, #8]
    1434:	4820      	ldr	r0, [pc, #128]	; (14b8 <run+0x69c>)
    1436:	f7ff fffe 	bl	0 <do_test>
    143a:	2271      	movs	r2, #113	; 0x71
    143c:	68a1      	ldr	r1, [r4, #8]
    143e:	481f      	ldr	r0, [pc, #124]	; (14bc <run+0x6a0>)
    1440:	f7ff fffe 	bl	0 <do_test>
    1444:	2272      	movs	r2, #114	; 0x72
    1446:	68a1      	ldr	r1, [r4, #8]
    1448:	481d      	ldr	r0, [pc, #116]	; (14c0 <run+0x6a4>)
    144a:	f7ff fffe 	bl	0 <do_test>
    144e:	2273      	movs	r2, #115	; 0x73
    1450:	68a1      	ldr	r1, [r4, #8]
    1452:	481c      	ldr	r0, [pc, #112]	; (14c4 <run+0x6a8>)
    1454:	f7ff fffe 	bl	0 <do_test>
    1458:	2274      	movs	r2, #116	; 0x74
    145a:	68a1      	ldr	r1, [r4, #8]
    145c:	481a      	ldr	r0, [pc, #104]	; (14c8 <run+0x6ac>)
    145e:	f7ff fffe 	bl	0 <do_test>
    1462:	68a1      	ldr	r1, [r4, #8]
    1464:	2275      	movs	r2, #117	; 0x75
    1466:	4819      	ldr	r0, [pc, #100]	; (14cc <run+0x6b0>)
    1468:	f7ff fffe 	bl	0 <do_test>
    146c:	bd30      	pop	{r4, r5, pc}
    146e:	2301      	movs	r3, #1
    1470:	4917      	ldr	r1, [pc, #92]	; (14d0 <run+0x6b4>)
    1472:	7023      	strb	r3, [r4, #0]
    1474:	60a1      	str	r1, [r4, #8]
    1476:	e4d8      	b.n	e2a <run+0xe>
	...
    14d0:	10001dc4 	.word	0x10001dc4

Disassembly of section .bss:

00000000 <guard variable for run::serial2_config>:
	...

00000008 <run::serial2_config>:
   8:	00000000                                ....

0000000c <guard variable for run::timer1_prescale>:
	...

00000014 <run::timer1_prescale>:
  14:	00000000                                ....

00000018 <guard variable for run::gpio1_words_3>:
	...

00000020 <run::gpio1_words_3>:
  20:	00000000                                ....

Disassembly of section .rodata:

00000000 <.rodata>:
   0:	00000006 	.word	0x00000006
   4:	00000002 	.word	0x00000002
   8:	3e000000 	.word	0x3e000000
   c:	00000019 	.word	0x00000019
  10:	3e000000 	.word	0x3e000000
  14:	00000019 	.word	0x00000019
