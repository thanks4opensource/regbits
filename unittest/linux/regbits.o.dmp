
regbits.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <zero_reg()>:
       0:	c7 04 25 c4 02 70 00 	movl   $0x0,0x7002c4
       7:	00 00 00 00 
       b:	c3                   	retq   

000000000000000c <zero_array()>:
       c:	c7 04 25 2c 01 70 00 	movl   $0x0,0x70012c
      13:	00 00 00 00 
      17:	c3                   	retq   

0000000000000018 <set_singl_bits_operator()>:
      18:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      1f:	83 c8 40             	or     $0x40,%eax
      22:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      29:	c3                   	retq   

000000000000002a <set_singl_bits_method()>:
      2a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      31:	83 c8 40             	or     $0x40,%eax
      34:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      3b:	c3                   	retq   

000000000000003c <clr_singl_bits_operator()>:
      3c:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      43:	83 e0 bf             	and    $0xffffffbf,%eax
      46:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      4d:	c3                   	retq   

000000000000004e <clr_singl_bits_method()>:
      4e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      55:	83 e0 bf             	and    $0xffffffbf,%eax
      58:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      5f:	c3                   	retq   

0000000000000060 <set_singl_mskd_operator()>:
      60:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      67:	83 c8 02             	or     $0x2,%eax
      6a:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      71:	c3                   	retq   

0000000000000072 <set_singl_mskd_method()>:
      72:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      79:	83 c8 02             	or     $0x2,%eax
      7c:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      83:	c3                   	retq   

0000000000000084 <clr_singl_mskd_operator()>:
      84:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      8b:	83 e0 fd             	and    $0xfffffffd,%eax
      8e:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      95:	c3                   	retq   

0000000000000096 <clr_singl_mskd_method()>:
      96:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      9d:	83 e0 fd             	and    $0xfffffffd,%eax
      a0:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      a7:	c3                   	retq   

00000000000000a8 <equ_singl_bits_operator()>:
      a8:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
      af:	40 00 00 00 
      b3:	c3                   	retq   

00000000000000b4 <equ_singl_bits_method()>:
      b4:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
      bb:	40 00 00 00 
      bf:	c3                   	retq   

00000000000000c0 <equ_singl_mskd_operator()>:
      c0:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
      c7:	02 00 00 00 
      cb:	c3                   	retq   

00000000000000cc <equ_singl_mskd_method()>:
      cc:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
      d3:	02 00 00 00 
      d7:	c3                   	retq   

00000000000000d8 <flp_singl_bits_operator()>:
      d8:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      df:	83 f0 40             	xor    $0x40,%eax
      e2:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      e9:	c3                   	retq   

00000000000000ea <flp_singl_bits_method()>:
      ea:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
      f1:	83 f0 40             	xor    $0x40,%eax
      f4:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
      fb:	c3                   	retq   

00000000000000fc <flp_singl_mskd_operator()>:
      fc:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     103:	83 f0 02             	xor    $0x2,%eax
     106:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     10d:	c3                   	retq   

000000000000010e <flp_singl_mskd_method()>:
     10e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     115:	83 f0 02             	xor    $0x2,%eax
     118:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     11f:	c3                   	retq   

0000000000000120 <ins_singl_mskd_operator()>:
     120:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     127:	83 e0 f9             	and    $0xfffffff9,%eax
     12a:	83 c8 04             	or     $0x4,%eax
     12d:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     134:	c3                   	retq   

0000000000000135 <ins_singl_mskd_method()>:
     135:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     13c:	83 e0 f9             	and    $0xfffffff9,%eax
     13f:	83 c8 04             	or     $0x4,%eax
     142:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     149:	c3                   	retq   

000000000000014a <set_multi_bits_operator()>:
     14a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     151:	83 c8 21             	or     $0x21,%eax
     154:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     15b:	c3                   	retq   

000000000000015c <set_multi_bits_method()>:
     15c:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     163:	83 c8 21             	or     $0x21,%eax
     166:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     16d:	c3                   	retq   

000000000000016e <ins_multi_mskd_operator()>:
     16e:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     175:	25 79 f0 ff ff       	and    $0xfffff079,%eax
     17a:	0d 82 01 00 00       	or     $0x182,%eax
     17f:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     186:	c3                   	retq   

0000000000000187 <ins_multi_mskd_method()>:
     187:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     18e:	25 79 f0 ff ff       	and    $0xfffff079,%eax
     193:	0d 82 01 00 00       	or     $0x182,%eax
     198:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     19f:	c3                   	retq   

00000000000001a0 <equ_multi_bits_operator()>:
     1a0:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     1a7:	60 00 00 00 
     1ab:	c3                   	retq   

00000000000001ac <equ_multi_bits_method()>:
     1ac:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     1b3:	60 00 00 00 
     1b7:	c3                   	retq   

00000000000001b8 <equ_multi_mskd_operator()>:
     1b8:	c7 04 25 c4 02 70 00 	movl   $0x308,0x7002c4
     1bf:	08 03 00 00 
     1c3:	c3                   	retq   

00000000000001c4 <equ_multi_mskd_method()>:
     1c4:	c7 04 25 c4 02 70 00 	movl   $0x308,0x7002c4
     1cb:	08 03 00 00 
     1cf:	c3                   	retq   

00000000000001d0 <equ_bits_mskd_operator()>:
     1d0:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     1d7:	22 00 00 00 
     1db:	c3                   	retq   

00000000000001dc <equ_bits_mskd_method()>:
     1dc:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     1e3:	22 00 00 00 
     1e7:	c3                   	retq   

00000000000001e8 <equ_mskd_bits_operator()>:
     1e8:	c7 04 25 c4 02 70 00 	movl   $0x44,0x7002c4
     1ef:	44 00 00 00 
     1f3:	c3                   	retq   

00000000000001f4 <equ_mskd_bits_method()>:
     1f4:	c7 04 25 c4 02 70 00 	movl   $0x44,0x7002c4
     1fb:	44 00 00 00 
     1ff:	c3                   	retq   

0000000000000200 <equ_bits_var()>:
     200:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     207:	40 00 00 00 
     20b:	c7 04 25 c4 02 70 00 	movl   $0x1,0x7002c4
     212:	01 00 00 00 
     216:	c3                   	retq   

0000000000000217 <equ_mskd_var()>:
     217:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     21e:	02 00 00 00 
     222:	c7 04 25 c4 02 70 00 	movl   $0x180,0x7002c4
     229:	80 01 00 00 
     22d:	c3                   	retq   

000000000000022e <cmp_equ_zero()>:
     22e:	c7 04 25 c4 02 70 00 	movl   $0x0,0x7002c4
     235:	00 00 00 00 
     239:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     240:	85 c0                	test   %eax,%eax
     242:	74 0c                	je     250 <cmp_equ_zero()+0x22>
     244:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     24b:	00 00 00 22 
     24f:	c3                   	retq   
     250:	c7 04 25 24 02 70 00 	movl   $0x3a000000,0x700224
     257:	00 00 00 3a 
     25b:	c3                   	retq   

000000000000025c <cmp_neq_zero()>:
     25c:	c7 04 25 c4 02 70 00 	movl   $0x0,0x7002c4
     263:	00 00 00 00 
     267:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     26e:	85 c0                	test   %eax,%eax
     270:	75 0c                	jne    27e <cmp_neq_zero()+0x22>
     272:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     279:	20 00 00 00 
     27d:	c3                   	retq   
     27e:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     285:	04 00 00 00 
     289:	c3                   	retq   

000000000000028a <cmp_equ_bits()>:
     28a:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     291:	40 00 00 00 
     295:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     29c:	a8 40                	test   $0x40,%al
     29e:	75 0c                	jne    2ac <cmp_equ_bits()+0x22>
     2a0:	c7 04 25 24 02 70 00 	movl   $0x1a000000,0x700224
     2a7:	00 00 00 1a 
     2ab:	c3                   	retq   
     2ac:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     2b3:	00 00 00 16 
     2b7:	c3                   	retq   

00000000000002b8 <cmp_neq_bits()>:
     2b8:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     2bf:	40 00 00 00 
     2c3:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     2ca:	a8 40                	test   $0x40,%al
     2cc:	75 0c                	jne    2da <cmp_neq_bits()+0x22>
     2ce:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     2d5:	02 00 00 00 
     2d9:	c3                   	retq   
     2da:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     2e1:	20 00 00 00 
     2e5:	c3                   	retq   

00000000000002e6 <cmp_equ_multi_bits()>:
     2e6:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     2ed:	60 00 00 00 
     2f1:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     2f8:	83 e0 60             	and    $0x60,%eax
     2fb:	83 f8 60             	cmp    $0x60,%eax
     2fe:	74 0c                	je     30c <cmp_equ_multi_bits()+0x26>
     300:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     307:	00 00 00 2e 
     30b:	c3                   	retq   
     30c:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     313:	00 00 00 22 
     317:	c3                   	retq   

0000000000000318 <cmp_neq_multi_bits()>:
     318:	c7 04 25 c4 02 70 00 	movl   $0x60,0x7002c4
     31f:	60 00 00 00 
     323:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     32a:	83 e0 60             	and    $0x60,%eax
     32d:	83 f8 60             	cmp    $0x60,%eax
     330:	74 0c                	je     33e <cmp_neq_multi_bits()+0x26>
     332:	c7 04 25 24 02 70 00 	movl   $0x3a000000,0x700224
     339:	00 00 00 3a 
     33d:	c3                   	retq   
     33e:	c7 04 25 24 02 70 00 	movl   $0x3e000000,0x700224
     345:	00 00 00 3e 
     349:	c3                   	retq   

000000000000034a <cmp_equ_mskd()>:
     34a:	c7 04 25 c4 02 70 00 	movl   $0x1d000,0x7002c4
     351:	00 d0 01 00 
     355:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     35c:	25 00 f0 01 00       	and    $0x1f000,%eax
     361:	3d 00 10 01 00       	cmp    $0x11000,%eax
     366:	74 19                	je     381 <cmp_equ_mskd()+0x37>
     368:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     36f:	25 ff ff ff c1       	and    $0xc1ffffff,%eax
     374:	0d 00 00 00 22       	or     $0x22000000,%eax
     379:	89 04 25 24 02 70 00 	mov    %eax,0x700224
     380:	c3                   	retq   
     381:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     388:	25 ff ff ff c1       	and    $0xc1ffffff,%eax
     38d:	0d 00 00 00 0e       	or     $0xe000000,%eax
     392:	89 04 25 24 02 70 00 	mov    %eax,0x700224
     399:	c3                   	retq   

000000000000039a <cmp_neq_mskd()>:
     39a:	c7 04 25 c4 02 70 00 	movl   $0x1d000,0x7002c4
     3a1:	00 d0 01 00 
     3a5:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3ac:	25 00 f0 01 00       	and    $0x1f000,%eax
     3b1:	3d 00 10 01 00       	cmp    $0x11000,%eax
     3b6:	74 15                	je     3cd <cmp_neq_mskd()+0x33>
     3b8:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3bf:	83 e0 f9             	and    $0xfffffff9,%eax
     3c2:	83 c8 04             	or     $0x4,%eax
     3c5:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     3cc:	c3                   	retq   
     3cd:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3d4:	83 c8 40             	or     $0x40,%eax
     3d7:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     3de:	c3                   	retq   

00000000000003df <cmp_equ_reg()>:
     3df:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     3e6:	22 00 00 00 
     3ea:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     3f1:	83 f8 22             	cmp    $0x22,%eax
     3f4:	74 0c                	je     402 <cmp_equ_reg()+0x23>
     3f6:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     3fd:	00 00 00 2e 
     401:	c3                   	retq   
     402:	c7 04 25 24 02 70 00 	movl   $0x2a000000,0x700224
     409:	00 00 00 2a 
     40d:	c3                   	retq   

000000000000040e <cmp_neq_reg()>:
     40e:	c7 04 25 c4 02 70 00 	movl   $0x22,0x7002c4
     415:	22 00 00 00 
     419:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     420:	83 f8 22             	cmp    $0x22,%eax
     423:	74 0c                	je     431 <cmp_neq_reg()+0x23>
     425:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     42c:	02 00 00 00 
     430:	c3                   	retq   
     431:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     438:	20 00 00 00 
     43c:	c3                   	retq   

000000000000043d <constexpr_bits_array()>:
     43d:	c7 04 25 2c 01 70 00 	movl   $0x6,0x70012c
     444:	06 00 00 00 
     448:	c7 04 25 a0 01 70 00 	movl   $0x2000,0x7001a0
     44f:	00 20 00 00 
     453:	c3                   	retq   

0000000000000454 <runtime_bits_array()>:
     454:	c7 44 24 fc 03 00 00 	movl   $0x3,-0x4(%rsp)
     45b:	00 
     45c:	8b 44 24 fc          	mov    -0x4(%rsp),%eax
     460:	89 c0                	mov    %eax,%eax
     462:	c7 04 85 20 01 70 00 	movl   $0x21,0x700120(,%rax,4)
     469:	21 00 00 00 
     46d:	c3                   	retq   

000000000000046e <prescaler_low()>:
     46e:	c7 04 25 24 02 70 00 	movl   $0x77,0x700224
     475:	77 00 00 00 
     479:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     480:	83 e0 7f             	and    $0x7f,%eax
     483:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     48a:	c3                   	retq   

000000000000048b <prescaler_high()>:
     48b:	c7 04 25 24 02 70 00 	movl   $0x3a000000,0x700224
     492:	00 00 00 3a 
     496:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     49d:	c1 e8 19             	shr    $0x19,%eax
     4a0:	83 e0 1f             	and    $0x1f,%eax
     4a3:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     4aa:	c3                   	retq   

00000000000004ab <reg_mskd_lss()>:
     4ab:	c7 04 25 24 02 70 00 	movl   $0x36000000,0x700224
     4b2:	00 00 00 36 
     4b6:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     4bd:	25 00 00 00 3e       	and    $0x3e000000,%eax
     4c2:	3d ff ff ff 37       	cmp    $0x37ffffff,%eax
     4c7:	76 0c                	jbe    4d5 <reg_mskd_lss()+0x2a>
     4c9:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     4d0:	04 00 00 00 
     4d4:	c3                   	retq   
     4d5:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     4dc:	02 00 00 00 
     4e0:	c3                   	retq   

00000000000004e1 <reg_mskd_leq()>:
     4e1:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     4e8:	00 00 00 2e 
     4ec:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     4f3:	25 00 00 00 3e       	and    $0x3e000000,%eax
     4f8:	3d 00 00 00 2e       	cmp    $0x2e000000,%eax
     4fd:	77 13                	ja     512 <reg_mskd_leq()+0x31>
     4ff:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     506:	25 00 00 00 3e       	and    $0x3e000000,%eax
     50b:	3d 00 00 00 30       	cmp    $0x30000000,%eax
     510:	76 0c                	jbe    51e <reg_mskd_leq()+0x3d>
     512:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     519:	04 00 00 00 
     51d:	c3                   	retq   
     51e:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     525:	02 00 00 00 
     529:	c3                   	retq   

000000000000052a <reg_mskd_gtr()>:
     52a:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     531:	00 00 00 26 
     535:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     53c:	25 00 00 00 3e       	and    $0x3e000000,%eax
     541:	3d 00 00 00 24       	cmp    $0x24000000,%eax
     546:	77 0c                	ja     554 <reg_mskd_gtr()+0x2a>
     548:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     54f:	04 00 00 00 
     553:	c3                   	retq   
     554:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     55b:	02 00 00 00 
     55f:	c3                   	retq   

0000000000000560 <reg_mskd_geq()>:
     560:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     567:	00 00 00 22 
     56b:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     572:	25 00 00 00 3e       	and    $0x3e000000,%eax
     577:	3d ff ff ff 1f       	cmp    $0x1fffffff,%eax
     57c:	76 13                	jbe    591 <reg_mskd_geq()+0x31>
     57e:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     585:	25 00 00 00 3e       	and    $0x3e000000,%eax
     58a:	3d ff ff ff 21       	cmp    $0x21ffffff,%eax
     58f:	77 0c                	ja     59d <reg_mskd_geq()+0x3d>
     591:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     598:	04 00 00 00 
     59c:	c3                   	retq   
     59d:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5a4:	02 00 00 00 
     5a8:	c3                   	retq   

00000000000005a9 <pos_cmp_eq()>:
     5a9:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5b0:	02 00 00 00 
     5b4:	c3                   	retq   

00000000000005b5 <pos_cmp_ne()>:
     5b5:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5bc:	02 00 00 00 
     5c0:	c3                   	retq   

00000000000005c1 <bits_extract_eq()>:
     5c1:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     5c8:	40 00 00 00 
     5cc:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     5d3:	83 f8 40             	cmp    $0x40,%eax
     5d6:	74 0c                	je     5e4 <bits_extract_eq()+0x23>
     5d8:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     5df:	04 00 00 00 
     5e3:	c3                   	retq   
     5e4:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5eb:	02 00 00 00 
     5ef:	c3                   	retq   

00000000000005f0 <mskd_extract_eq()>:
     5f0:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     5f7:	02 00 00 00 
     5fb:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     602:	83 f8 02             	cmp    $0x2,%eax
     605:	74 0c                	je     613 <mskd_extract_eq()+0x23>
     607:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     60e:	40 00 00 00 
     612:	c3                   	retq   
     613:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     61a:	20 00 00 00 
     61e:	c3                   	retq   

000000000000061f <mskd_extract_ne()>:
     61f:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     626:	04 00 00 00 
     62a:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     631:	83 f8 04             	cmp    $0x4,%eax
     634:	74 0c                	je     642 <mskd_extract_ne()+0x23>
     636:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     63d:	20 00 00 00 
     641:	c3                   	retq   
     642:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     649:	40 00 00 00 
     64d:	c3                   	retq   

000000000000064e <mskd_extract_lss()>:
     64e:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     655:	00 00 00 16 
     659:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     660:	3d ff ff ff 17       	cmp    $0x17ffffff,%eax
     665:	76 0c                	jbe    673 <mskd_extract_lss()+0x25>
     667:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     66e:	40 00 00 00 
     672:	c3                   	retq   
     673:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     67a:	20 00 00 00 
     67e:	c3                   	retq   

000000000000067f <mskd_extract_leq()>:
     67f:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     686:	00 00 00 2e 
     68a:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     691:	3d 00 00 00 2e       	cmp    $0x2e000000,%eax
     696:	76 0c                	jbe    6a4 <mskd_extract_leq()+0x25>
     698:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     69f:	40 00 00 00 
     6a3:	c3                   	retq   
     6a4:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     6ab:	20 00 00 00 
     6af:	c3                   	retq   

00000000000006b0 <mskd_extract_gtr()>:
     6b0:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     6b7:	00 00 00 26 
     6bb:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     6c2:	3d 00 00 00 24       	cmp    $0x24000000,%eax
     6c7:	77 0c                	ja     6d5 <mskd_extract_gtr()+0x25>
     6c9:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     6d0:	40 00 00 00 
     6d4:	c3                   	retq   
     6d5:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     6dc:	20 00 00 00 
     6e0:	c3                   	retq   

00000000000006e1 <set_bits_global()>:
     6e1:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     6e8:	83 c8 40             	or     $0x40,%eax
     6eb:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     6f2:	c3                   	retq   

00000000000006f3 <ins_mskd_global()>:
     6f3:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     6fa:	83 e0 f9             	and    $0xfffffff9,%eax
     6fd:	83 c8 02             	or     $0x2,%eax
     700:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     707:	c3                   	retq   

0000000000000708 <assign_array_global()>:
     708:	c7 04 25 2c 01 70 00 	movl   $0xbd,0x70012c
     70f:	bd 00 00 00 
     713:	c3                   	retq   

0000000000000714 <shifted_global()>:
     714:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     71b:	00 00 00 2e 
     71f:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     726:	c1 e8 19             	shr    $0x19,%eax
     729:	83 e0 1f             	and    $0x1f,%eax
     72c:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     733:	c3                   	retq   

0000000000000734 <assign_register_global()>:
     734:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     73b:	04 00 00 00 
     73f:	c3                   	retq   

0000000000000740 <copy_bits_equ()>:
     740:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     747:	40 00 00 00 
     74b:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     752:	a8 40                	test   $0x40,%al
     754:	75 0c                	jne    762 <copy_bits_equ()+0x22>
     756:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     75d:	04 00 00 00 
     761:	c3                   	retq   
     762:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     769:	02 00 00 00 
     76d:	c3                   	retq   

000000000000076e <copy_bits_neq()>:
     76e:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     775:	40 00 00 00 
     779:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     780:	a8 40                	test   $0x40,%al
     782:	74 0c                	je     790 <copy_bits_neq()+0x22>
     784:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     78b:	04 00 00 00 
     78f:	c3                   	retq   
     790:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     797:	02 00 00 00 
     79b:	c3                   	retq   

000000000000079c <copy_mskd_equ()>:
     79c:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     7a3:	00 00 00 16 
     7a7:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     7ae:	25 00 00 00 3e       	and    $0x3e000000,%eax
     7b3:	3d 00 00 00 16       	cmp    $0x16000000,%eax
     7b8:	74 0c                	je     7c6 <copy_mskd_equ()+0x2a>
     7ba:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     7c1:	04 00 00 00 
     7c5:	c3                   	retq   
     7c6:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     7cd:	02 00 00 00 
     7d1:	c3                   	retq   

00000000000007d2 <copy_mskd_neq()>:
     7d2:	c7 04 25 24 02 70 00 	movl   $0x1a000000,0x700224
     7d9:	00 00 00 1a 
     7dd:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     7e4:	25 00 00 00 3e       	and    $0x3e000000,%eax
     7e9:	3d 00 00 00 1a       	cmp    $0x1a000000,%eax
     7ee:	74 0c                	je     7fc <copy_mskd_neq()+0x2a>
     7f0:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     7f7:	02 00 00 00 
     7fb:	c3                   	retq   
     7fc:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     803:	04 00 00 00 
     807:	c3                   	retq   

0000000000000808 <copy_mskd_lss()>:
     808:	c7 04 25 24 02 70 00 	movl   $0x36000000,0x700224
     80f:	00 00 00 36 
     813:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     81a:	25 00 00 00 3e       	and    $0x3e000000,%eax
     81f:	3d ff ff ff 37       	cmp    $0x37ffffff,%eax
     824:	76 0c                	jbe    832 <copy_mskd_lss()+0x2a>
     826:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     82d:	04 00 00 00 
     831:	c3                   	retq   
     832:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     839:	02 00 00 00 
     83d:	c3                   	retq   

000000000000083e <copy_mskd_leq()>:
     83e:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     845:	00 00 00 2e 
     849:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     850:	25 00 00 00 3e       	and    $0x3e000000,%eax
     855:	3d 00 00 00 2e       	cmp    $0x2e000000,%eax
     85a:	76 0c                	jbe    868 <copy_mskd_leq()+0x2a>
     85c:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     863:	04 00 00 00 
     867:	c3                   	retq   
     868:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     86f:	02 00 00 00 
     873:	c3                   	retq   

0000000000000874 <copy_mskd_gtr()>:
     874:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     87b:	00 00 00 26 
     87f:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     886:	25 00 00 00 3e       	and    $0x3e000000,%eax
     88b:	3d 00 00 00 24       	cmp    $0x24000000,%eax
     890:	77 0c                	ja     89e <copy_mskd_gtr()+0x2a>
     892:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     899:	04 00 00 00 
     89d:	c3                   	retq   
     89e:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     8a5:	02 00 00 00 
     8a9:	c3                   	retq   

00000000000008aa <copy_mskd_geq()>:
     8aa:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     8b1:	00 00 00 22 
     8b5:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     8bc:	25 00 00 00 3e       	and    $0x3e000000,%eax
     8c1:	3d ff ff ff 21       	cmp    $0x21ffffff,%eax
     8c6:	77 0c                	ja     8d4 <copy_mskd_geq()+0x2a>
     8c8:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     8cf:	04 00 00 00 
     8d3:	c3                   	retq   
     8d4:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     8db:	02 00 00 00 
     8df:	c3                   	retq   

00000000000008e0 <copy_shifted()>:
     8e0:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     8e7:	00 00 00 16 
     8eb:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     8f2:	c1 e8 19             	shr    $0x19,%eax
     8f5:	83 e0 1f             	and    $0x1f,%eax
     8f8:	83 f8 0b             	cmp    $0xb,%eax
     8fb:	74 0c                	je     909 <copy_shifted()+0x29>
     8fd:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     904:	04 00 00 00 
     908:	c3                   	retq   
     909:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     910:	02 00 00 00 
     914:	c3                   	retq   

0000000000000915 <bits_val(regbits::Bits<unsigned int, mcu::Serial::Config>)>:
     915:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     91c:	c3                   	retq   

000000000000091d <call_bits_val_var()>:
     91d:	bf 40 00 00 00       	mov    $0x40,%edi
     922:	e8 00 00 00 00       	callq  927 <call_bits_val_var()+0xa>
     927:	f3 c3                	repz retq 

0000000000000929 <call_bits_val_zero()>:
     929:	bf 00 00 00 00       	mov    $0x0,%edi
     92e:	e8 00 00 00 00       	callq  933 <call_bits_val_zero()+0xa>
     933:	f3 c3                	repz retq 

0000000000000935 <call_bits_val_const()>:
     935:	bf 40 00 00 00       	mov    $0x40,%edi
     93a:	e8 00 00 00 00       	callq  93f <call_bits_val_const()+0xa>
     93f:	f3 c3                	repz retq 

0000000000000941 <call_bits_val_global()>:
     941:	bf 40 00 00 00       	mov    $0x40,%edi
     946:	e8 00 00 00 00       	callq  94b <call_bits_val_global()+0xa>
     94b:	f3 c3                	repz retq 

000000000000094d <bits_ref(regbits::Bits<unsigned int, mcu::Serial::Config> const&)>:
     94d:	8b 07                	mov    (%rdi),%eax
     94f:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     956:	c3                   	retq   

0000000000000957 <call_bits_ref_var()>:
     957:	48 83 ec 10          	sub    $0x10,%rsp
     95b:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%rsp)
     962:	00 
     963:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
     968:	e8 00 00 00 00       	callq  96d <call_bits_ref_var()+0x16>
     96d:	48 83 c4 10          	add    $0x10,%rsp
     971:	c3                   	retq   

0000000000000972 <call_bits_ref_zero()>:
     972:	48 83 ec 10          	sub    $0x10,%rsp
     976:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
     97d:	00 
     97e:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
     983:	e8 00 00 00 00       	callq  988 <call_bits_ref_zero()+0x16>
     988:	48 83 c4 10          	add    $0x10,%rsp
     98c:	c3                   	retq   

000000000000098d <call_bits_ref_const()>:
     98d:	48 83 ec 10          	sub    $0x10,%rsp
     991:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%rsp)
     998:	00 
     999:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
     99e:	e8 00 00 00 00       	callq  9a3 <call_bits_ref_const()+0x16>
     9a3:	48 83 c4 10          	add    $0x10,%rsp
     9a7:	c3                   	retq   

00000000000009a8 <call_bits_ref_global()>:
     9a8:	48 83 ec 10          	sub    $0x10,%rsp
     9ac:	c7 44 24 0c 40 00 00 	movl   $0x40,0xc(%rsp)
     9b3:	00 
     9b4:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
     9b9:	e8 00 00 00 00       	callq  9be <call_bits_ref_global()+0x16>
     9be:	48 83 c4 10          	add    $0x10,%rsp
     9c2:	c3                   	retq   

00000000000009c3 <mskd_val(regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     9c3:	8b 14 25 c4 02 70 00 	mov    0x7002c4,%edx
     9ca:	89 f8                	mov    %edi,%eax
     9cc:	f7 d0                	not    %eax
     9ce:	21 d0                	and    %edx,%eax
     9d0:	48 c1 ef 20          	shr    $0x20,%rdi
     9d4:	09 c7                	or     %eax,%edi
     9d6:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     9dd:	c3                   	retq   

00000000000009de <call_mskd_val_var()>:
     9de:	48 bf 06 00 00 00 02 	movabs $0x200000006,%rdi
     9e5:	00 00 00 
     9e8:	e8 00 00 00 00       	callq  9ed <call_mskd_val_var()+0xf>
     9ed:	f3 c3                	repz retq 

00000000000009ef <call_mskd_val_const()>:
     9ef:	48 bf 06 00 00 00 02 	movabs $0x200000006,%rdi
     9f6:	00 00 00 
     9f9:	e8 00 00 00 00       	callq  9fe <call_mskd_val_const()+0xf>
     9fe:	f3 c3                	repz retq 

0000000000000a00 <call_mskd_val_global()>:
     a00:	48 bf 06 00 00 00 02 	movabs $0x200000006,%rdi
     a07:	00 00 00 
     a0a:	e8 00 00 00 00       	callq  a0f <call_mskd_val_global()+0xf>
     a0f:	f3 c3                	repz retq 

0000000000000a11 <mskd_ref(regbits::Mskd<unsigned int, mcu::Serial::Config> const&)>:
     a11:	8b 14 25 c4 02 70 00 	mov    0x7002c4,%edx
     a18:	8b 07                	mov    (%rdi),%eax
     a1a:	f7 d0                	not    %eax
     a1c:	21 d0                	and    %edx,%eax
     a1e:	0b 47 04             	or     0x4(%rdi),%eax
     a21:	89 04 25 c4 02 70 00 	mov    %eax,0x7002c4
     a28:	c3                   	retq   

0000000000000a29 <call_mskd_ref_var()>:
     a29:	48 83 ec 10          	sub    $0x10,%rsp
     a2d:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%rsp)
     a34:	00 
     a35:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%rsp)
     a3c:	00 
     a3d:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     a42:	e8 00 00 00 00       	callq  a47 <call_mskd_ref_var()+0x1e>
     a47:	48 83 c4 10          	add    $0x10,%rsp
     a4b:	c3                   	retq   

0000000000000a4c <call_mskd_ref_const()>:
     a4c:	48 83 ec 10          	sub    $0x10,%rsp
     a50:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%rsp)
     a57:	00 
     a58:	c7 44 24 0c 04 00 00 	movl   $0x4,0xc(%rsp)
     a5f:	00 
     a60:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     a65:	e8 00 00 00 00       	callq  a6a <call_mskd_ref_const()+0x1e>
     a6a:	48 83 c4 10          	add    $0x10,%rsp
     a6e:	c3                   	retq   

0000000000000a6f <call_mskd_ref_global()>:
     a6f:	48 83 ec 10          	sub    $0x10,%rsp
     a73:	c7 44 24 08 06 00 00 	movl   $0x6,0x8(%rsp)
     a7a:	00 
     a7b:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%rsp)
     a82:	00 
     a83:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     a88:	e8 00 00 00 00       	callq  a8d <call_mskd_ref_global()+0x1e>
     a8d:	48 83 c4 10          	add    $0x10,%rsp
     a91:	c3                   	retq   

0000000000000a92 <periph_bits(mcu::Serial volatile*)>:
     a92:	8b 47 04             	mov    0x4(%rdi),%eax
     a95:	83 c8 40             	or     $0x40,%eax
     a98:	89 47 04             	mov    %eax,0x4(%rdi)
     a9b:	c3                   	retq   

0000000000000a9c <call_periph_bits()>:
     a9c:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     aa1:	e8 00 00 00 00       	callq  aa6 <call_periph_bits()+0xa>
     aa6:	f3 c3                	repz retq 

0000000000000aa8 <periph_bits_val(mcu::Serial volatile*, regbits::Bits<unsigned int, mcu::Serial::Config>)>:
     aa8:	8b 47 04             	mov    0x4(%rdi),%eax
     aab:	09 c6                	or     %eax,%esi
     aad:	89 77 04             	mov    %esi,0x4(%rdi)
     ab0:	c3                   	retq   

0000000000000ab1 <call_periph_bits_val()>:
     ab1:	be 40 00 00 00       	mov    $0x40,%esi
     ab6:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     abb:	e8 00 00 00 00       	callq  ac0 <call_periph_bits_val()+0xf>
     ac0:	f3 c3                	repz retq 

0000000000000ac2 <reg_bits_val(regbits::Reg<unsigned int, mcu::Serial::Config> volatile&, regbits::Bits<unsigned int, mcu::Serial::Config>)>:
     ac2:	8b 07                	mov    (%rdi),%eax
     ac4:	09 c6                	or     %eax,%esi
     ac6:	89 37                	mov    %esi,(%rdi)
     ac8:	c3                   	retq   

0000000000000ac9 <call_reg_bits_val()>:
     ac9:	be 40 00 00 00       	mov    $0x40,%esi
     ace:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     ad3:	e8 00 00 00 00       	callq  ad8 <call_reg_bits_val()+0xf>
     ad8:	f3 c3                	repz retq 

0000000000000ada <periph_bits_ref(mcu::Serial volatile*, regbits::Bits<unsigned int, mcu::Serial::Config> const&)>:
     ada:	8b 47 04             	mov    0x4(%rdi),%eax
     add:	0b 06                	or     (%rsi),%eax
     adf:	89 47 04             	mov    %eax,0x4(%rdi)
     ae2:	c3                   	retq   

0000000000000ae3 <call_periph_bits_ref()>:
     ae3:	48 83 ec 10          	sub    $0x10,%rsp
     ae7:	c7 44 24 0c 40 00 00 	movl   $0x40,0xc(%rsp)
     aee:	00 
     aef:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
     af4:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     af9:	e8 00 00 00 00       	callq  afe <call_periph_bits_ref()+0x1b>
     afe:	48 83 c4 10          	add    $0x10,%rsp
     b02:	c3                   	retq   

0000000000000b03 <reg_bits_ref(regbits::Reg<unsigned int, mcu::Serial::Config> volatile&, regbits::Bits<unsigned int, mcu::Serial::Config> const&)>:
     b03:	8b 07                	mov    (%rdi),%eax
     b05:	0b 06                	or     (%rsi),%eax
     b07:	89 07                	mov    %eax,(%rdi)
     b09:	c3                   	retq   

0000000000000b0a <call_reg_bits_ref()>:
     b0a:	48 83 ec 10          	sub    $0x10,%rsp
     b0e:	c7 44 24 0c 40 00 00 	movl   $0x40,0xc(%rsp)
     b15:	00 
     b16:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
     b1b:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     b20:	e8 00 00 00 00       	callq  b25 <call_reg_bits_ref()+0x1b>
     b25:	48 83 c4 10          	add    $0x10,%rsp
     b29:	c3                   	retq   

0000000000000b2a <periph_mskd(mcu::Serial volatile*)>:
     b2a:	8b 47 04             	mov    0x4(%rdi),%eax
     b2d:	83 e0 f9             	and    $0xfffffff9,%eax
     b30:	83 c8 02             	or     $0x2,%eax
     b33:	89 47 04             	mov    %eax,0x4(%rdi)
     b36:	c3                   	retq   

0000000000000b37 <call_periph_mskd()>:
     b37:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     b3c:	e8 00 00 00 00       	callq  b41 <call_periph_mskd()+0xa>
     b41:	f3 c3                	repz retq 

0000000000000b43 <periph_mskd_val(mcu::Serial volatile*, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     b43:	8b 57 04             	mov    0x4(%rdi),%edx
     b46:	89 f0                	mov    %esi,%eax
     b48:	f7 d0                	not    %eax
     b4a:	21 d0                	and    %edx,%eax
     b4c:	48 c1 ee 20          	shr    $0x20,%rsi
     b50:	09 c6                	or     %eax,%esi
     b52:	89 77 04             	mov    %esi,0x4(%rdi)
     b55:	c3                   	retq   

0000000000000b56 <call_periph_mskd_val()>:
     b56:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     b5d:	00 00 00 
     b60:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     b65:	e8 00 00 00 00       	callq  b6a <call_periph_mskd_val()+0x14>
     b6a:	f3 c3                	repz retq 

0000000000000b6c <reg_mskd_val(regbits::Reg<unsigned int, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     b6c:	8b 17                	mov    (%rdi),%edx
     b6e:	89 f0                	mov    %esi,%eax
     b70:	f7 d0                	not    %eax
     b72:	21 d0                	and    %edx,%eax
     b74:	48 c1 ee 20          	shr    $0x20,%rsi
     b78:	09 c6                	or     %eax,%esi
     b7a:	89 37                	mov    %esi,(%rdi)
     b7c:	c3                   	retq   

0000000000000b7d <call_reg_mskd_val()>:
     b7d:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     b84:	00 00 00 
     b87:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     b8c:	e8 00 00 00 00       	callq  b91 <call_reg_mskd_val()+0x14>
     b91:	f3 c3                	repz retq 

0000000000000b93 <periph_mskd_ref(mcu::Serial volatile*, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     b93:	8b 57 04             	mov    0x4(%rdi),%edx
     b96:	89 f0                	mov    %esi,%eax
     b98:	f7 d0                	not    %eax
     b9a:	21 d0                	and    %edx,%eax
     b9c:	48 c1 ee 20          	shr    $0x20,%rsi
     ba0:	09 c6                	or     %eax,%esi
     ba2:	89 77 04             	mov    %esi,0x4(%rdi)
     ba5:	c3                   	retq   

0000000000000ba6 <call_periph_mskd_ref()>:
     ba6:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     bad:	00 00 00 
     bb0:	bf c0 02 70 00       	mov    $0x7002c0,%edi
     bb5:	e8 00 00 00 00       	callq  bba <call_periph_mskd_ref()+0x14>
     bba:	f3 c3                	repz retq 

0000000000000bbc <reg_mskd_ref(regbits::Reg<unsigned int, mcu::Serial::Config> volatile&, regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     bbc:	8b 17                	mov    (%rdi),%edx
     bbe:	89 f0                	mov    %esi,%eax
     bc0:	f7 d0                	not    %eax
     bc2:	21 d0                	and    %edx,%eax
     bc4:	48 c1 ee 20          	shr    $0x20,%rsi
     bc8:	09 c6                	or     %eax,%esi
     bca:	89 37                	mov    %esi,(%rdi)
     bcc:	c3                   	retq   

0000000000000bcd <call_reg_mskd_ref()>:
     bcd:	48 be 06 00 00 00 02 	movabs $0x200000006,%rsi
     bd4:	00 00 00 
     bd7:	bf c4 02 70 00       	mov    $0x7002c4,%edi
     bdc:	e8 00 00 00 00       	callq  be1 <call_reg_mskd_ref()+0x14>
     be1:	f3 c3                	repz retq 

0000000000000be3 <return_bits()>:
     be3:	b8 20 00 00 00       	mov    $0x20,%eax
     be8:	c3                   	retq   

0000000000000be9 <call_return_bits()>:
     be9:	e8 00 00 00 00       	callq  bee <call_return_bits()+0x5>
     bee:	83 f8 20             	cmp    $0x20,%eax
     bf1:	74 0c                	je     bff <call_return_bits()+0x16>
     bf3:	c7 04 25 24 02 70 00 	movl   $0x6000000,0x700224
     bfa:	00 00 00 06 
     bfe:	c3                   	retq   
     bff:	c7 04 25 24 02 70 00 	movl   $0x2a000000,0x700224
     c06:	00 00 00 2a 
     c0a:	c3                   	retq   

0000000000000c0b <return_mskd()>:
     c0b:	48 b8 18 00 00 00 08 	movabs $0x800000018,%rax
     c12:	00 00 00 
     c15:	c3                   	retq   

0000000000000c16 <call_return_mskd()>:
     c16:	e8 00 00 00 00       	callq  c1b <call_return_mskd()+0x5>
     c1b:	83 f8 18             	cmp    $0x18,%eax
     c1e:	74 0c                	je     c2c <call_return_mskd()+0x16>
     c20:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     c27:	00 00 00 26 
     c2b:	c3                   	retq   
     c2c:	48 c1 e8 20          	shr    $0x20,%rax
     c30:	83 f8 08             	cmp    $0x8,%eax
     c33:	75 eb                	jne    c20 <call_return_mskd()+0xa>
     c35:	c7 04 25 24 02 70 00 	movl   $0x22000000,0x700224
     c3c:	00 00 00 22 
     c40:	c3                   	retq   

0000000000000c41 <return_reg()>:
     c41:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     c48:	40 00 00 00 
     c4c:	b8 c4 02 70 00       	mov    $0x7002c4,%eax
     c51:	c3                   	retq   

0000000000000c52 <call_return_reg()>:
     c52:	e8 00 00 00 00       	callq  c57 <call_return_reg()+0x5>
     c57:	8b 00                	mov    (%rax),%eax
     c59:	83 f8 40             	cmp    $0x40,%eax
     c5c:	74 0c                	je     c6a <call_return_reg()+0x18>
     c5e:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     c65:	00 00 00 2e 
     c69:	c3                   	retq   
     c6a:	c7 04 25 24 02 70 00 	movl   $0x1e000000,0x700224
     c71:	00 00 00 1e 
     c75:	c3                   	retq   

0000000000000c76 <return_periph()>:
     c76:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     c7d:	40 00 00 00 
     c81:	b8 c0 02 70 00       	mov    $0x7002c0,%eax
     c86:	c3                   	retq   

0000000000000c87 <call_return_periph()>:
     c87:	e8 00 00 00 00       	callq  c8c <call_return_periph()+0x5>
     c8c:	8b 40 04             	mov    0x4(%rax),%eax
     c8f:	83 f8 40             	cmp    $0x40,%eax
     c92:	74 0c                	je     ca0 <call_return_periph()+0x19>
     c94:	c7 04 25 24 02 70 00 	movl   $0x2a000000,0x700224
     c9b:	00 00 00 2a 
     c9f:	c3                   	retq   
     ca0:	c7 04 25 24 02 70 00 	movl   $0x26000000,0x700224
     ca7:	00 00 00 26 
     cab:	c3                   	retq   

0000000000000cac <pos_val(regbits::Pos<unsigned int, mcu::Serial::Config>)>:
     cac:	83 ff 05             	cmp    $0x5,%edi
     caf:	74 11                	je     cc2 <pos_val(regbits::Pos<unsigned int, mcu::Serial::Config>)+0x16>
     cb1:	83 ff 06             	cmp    $0x6,%edi
     cb4:	74 18                	je     cce <pos_val(regbits::Pos<unsigned int, mcu::Serial::Config>)+0x22>
     cb6:	c7 04 25 2c 01 70 00 	movl   $0x55,0x70012c
     cbd:	55 00 00 00 
     cc1:	c3                   	retq   
     cc2:	c7 04 25 2c 01 70 00 	movl   $0x33,0x70012c
     cc9:	33 00 00 00 
     ccd:	c3                   	retq   
     cce:	c7 04 25 2c 01 70 00 	movl   $0x44,0x70012c
     cd5:	44 00 00 00 
     cd9:	c3                   	retq   

0000000000000cda <call_pos_val()>:
     cda:	bf 05 00 00 00       	mov    $0x5,%edi
     cdf:	e8 00 00 00 00       	callq  ce4 <call_pos_val()+0xa>
     ce4:	bf 06 00 00 00       	mov    $0x6,%edi
     ce9:	e8 00 00 00 00       	callq  cee <call_pos_val()+0x14>
     cee:	f3 c3                	repz retq 

0000000000000cf0 <call_pos_val_global()>:
     cf0:	bf 06 00 00 00       	mov    $0x6,%edi
     cf5:	e8 00 00 00 00       	callq  cfa <call_pos_val_global()+0xa>
     cfa:	f3 c3                	repz retq 

0000000000000cfc <pos_ref(regbits::Pos<unsigned int, mcu::Serial::Config> const&)>:
     cfc:	8b 07                	mov    (%rdi),%eax
     cfe:	83 f8 05             	cmp    $0x5,%eax
     d01:	74 11                	je     d14 <pos_ref(regbits::Pos<unsigned int, mcu::Serial::Config> const&)+0x18>
     d03:	83 f8 06             	cmp    $0x6,%eax
     d06:	74 18                	je     d20 <pos_ref(regbits::Pos<unsigned int, mcu::Serial::Config> const&)+0x24>
     d08:	c7 04 25 2c 01 70 00 	movl   $0x88,0x70012c
     d0f:	88 00 00 00 
     d13:	c3                   	retq   
     d14:	c7 04 25 2c 01 70 00 	movl   $0x66,0x70012c
     d1b:	66 00 00 00 
     d1f:	c3                   	retq   
     d20:	c7 04 25 2c 01 70 00 	movl   $0x77,0x70012c
     d27:	77 00 00 00 
     d2b:	c3                   	retq   

0000000000000d2c <call_pos_ref()>:
     d2c:	48 83 ec 10          	sub    $0x10,%rsp
     d30:	c7 44 24 0c 05 00 00 	movl   $0x5,0xc(%rsp)
     d37:	00 
     d38:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
     d3d:	e8 00 00 00 00       	callq  d42 <call_pos_ref()+0x16>
     d42:	c7 44 24 08 05 00 00 	movl   $0x5,0x8(%rsp)
     d49:	00 
     d4a:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     d4f:	e8 00 00 00 00       	callq  d54 <call_pos_ref()+0x28>
     d54:	48 83 c4 10          	add    $0x10,%rsp
     d58:	c3                   	retq   

0000000000000d59 <call_pos_ref_global()>:
     d59:	48 83 ec 10          	sub    $0x10,%rsp
     d5d:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%rsp)
     d64:	00 
     d65:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
     d6a:	e8 00 00 00 00       	callq  d6f <call_pos_ref_global()+0x16>
     d6f:	48 83 c4 10          	add    $0x10,%rsp
     d73:	c3                   	retq   

0000000000000d74 <runtime_range_val(regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     d74:	8b 14 25 c4 02 70 00 	mov    0x7002c4,%edx
     d7b:	89 f8                	mov    %edi,%eax
     d7d:	f7 d0                	not    %eax
     d7f:	21 d0                	and    %edx,%eax
     d81:	48 c1 ef 20          	shr    $0x20,%rdi
     d85:	09 c7                	or     %eax,%edi
     d87:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     d8e:	c3                   	retq   

0000000000000d8f <call_range_val(unsigned int)>:
     d8f:	c1 e7 0c             	shl    $0xc,%edi
     d92:	48 c1 e7 20          	shl    $0x20,%rdi
     d96:	48 81 cf 00 f0 01 00 	or     $0x1f000,%rdi
     d9d:	e8 00 00 00 00       	callq  da2 <call_range_val(unsigned int)+0x13>
     da2:	f3 c3                	repz retq 

0000000000000da4 <call_range_val_port()>:
     da4:	bf 1f 00 00 00       	mov    $0x1f,%edi
     da9:	e8 00 00 00 00       	callq  dae <call_range_val_port()+0xa>
     dae:	f3 c3                	repz retq 

0000000000000db0 <runtime_range_ref(regbits::Mskd<unsigned int, mcu::Serial::Config>)>:
     db0:	8b 14 25 c4 02 70 00 	mov    0x7002c4,%edx
     db7:	89 f8                	mov    %edi,%eax
     db9:	f7 d0                	not    %eax
     dbb:	21 d0                	and    %edx,%eax
     dbd:	48 c1 ef 20          	shr    $0x20,%rdi
     dc1:	09 c7                	or     %eax,%edi
     dc3:	89 3c 25 c4 02 70 00 	mov    %edi,0x7002c4
     dca:	c3                   	retq   

0000000000000dcb <call_range_ref(unsigned int)>:
     dcb:	c1 e7 0c             	shl    $0xc,%edi
     dce:	48 c1 e7 20          	shl    $0x20,%rdi
     dd2:	48 81 cf 00 f0 01 00 	or     $0x1f000,%rdi
     dd9:	e8 00 00 00 00       	callq  dde <call_range_ref(unsigned int)+0x13>
     dde:	f3 c3                	repz retq 

0000000000000de0 <call_range_ref_port()>:
     de0:	bf 0c 00 00 00       	mov    $0xc,%edi
     de5:	e8 00 00 00 00       	callq  dea <call_range_ref_port()+0xa>
     dea:	f3 c3                	repz retq 

0000000000000dec <check_array_range_pass(unsigned int)>:
     dec:	83 ff 16             	cmp    $0x16,%edi
     def:	76 0c                	jbe    dfd <check_array_range_pass(unsigned int)+0x11>
     df1:	c7 04 25 2c 01 70 00 	movl   $0x83,0x70012c
     df8:	83 00 00 00 
     dfc:	c3                   	retq   
     dfd:	c7 04 25 2c 01 70 00 	movl   $0x7f,0x70012c
     e04:	7f 00 00 00 
     e08:	c3                   	retq   

0000000000000e09 <check_array_range_fail(unsigned int)>:
     e09:	83 ff 16             	cmp    $0x16,%edi
     e0c:	76 0c                	jbe    e1a <check_array_range_fail(unsigned int)+0x11>
     e0e:	c7 04 25 2c 01 70 00 	movl   $0x97,0x70012c
     e15:	97 00 00 00 
     e19:	c3                   	retq   
     e1a:	c7 04 25 2c 01 70 00 	movl   $0x95,0x70012c
     e21:	95 00 00 00 
     e25:	c3                   	retq   

0000000000000e26 <check_bits_range_pass(unsigned int)>:
     e26:	83 ff 0f             	cmp    $0xf,%edi
     e29:	76 0c                	jbe    e37 <check_bits_range_pass(unsigned int)+0x11>
     e2b:	c7 04 25 2c 01 70 00 	movl   $0xa3,0x70012c
     e32:	a3 00 00 00 
     e36:	c3                   	retq   
     e37:	c7 04 25 2c 01 70 00 	movl   $0x9d,0x70012c
     e3e:	9d 00 00 00 
     e42:	c3                   	retq   

0000000000000e43 <check_bits_range_fail(unsigned int)>:
     e43:	83 ff 0f             	cmp    $0xf,%edi
     e46:	76 0c                	jbe    e54 <check_bits_range_fail(unsigned int)+0x11>
     e48:	c7 04 25 2c 01 70 00 	movl   $0xad,0x70012c
     e4f:	ad 00 00 00 
     e53:	c3                   	retq   
     e54:	c7 04 25 2c 01 70 00 	movl   $0xa7,0x70012c
     e5b:	a7 00 00 00 
     e5f:	c3                   	retq   

0000000000000e60 <check_mskd_range_pass(unsigned int)>:
     e60:	83 ff 1f             	cmp    $0x1f,%edi
     e63:	76 0c                	jbe    e71 <check_mskd_range_pass(unsigned int)+0x11>
     e65:	c7 04 25 2c 01 70 00 	movl   $0xb5,0x70012c
     e6c:	b5 00 00 00 
     e70:	c3                   	retq   
     e71:	c7 04 25 2c 01 70 00 	movl   $0xb3,0x70012c
     e78:	b3 00 00 00 
     e7c:	c3                   	retq   

0000000000000e7d <check_mskd_range_fail(unsigned int)>:
     e7d:	83 ff 1f             	cmp    $0x1f,%edi
     e80:	76 0c                	jbe    e8e <check_mskd_range_fail(unsigned int)+0x11>
     e82:	c7 04 25 2c 01 70 00 	movl   $0xc1,0x70012c
     e89:	c1 00 00 00 
     e8d:	c3                   	retq   
     e8e:	c7 04 25 2c 01 70 00 	movl   $0xbf,0x70012c
     e95:	bf 00 00 00 
     e99:	c3                   	retq   

0000000000000e9a <bits_extract_ne()>:
     e9a:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     ea1:	20 00 00 00 
     ea5:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
     eac:	83 f8 20             	cmp    $0x20,%eax
     eaf:	74 0c                	je     ebd <bits_extract_ne()+0x23>
     eb1:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     eb8:	02 00 00 00 
     ebc:	c3                   	retq   
     ebd:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     ec4:	04 00 00 00 
     ec8:	c3                   	retq   

0000000000000ec9 <mskd_extract_geq()>:
     ec9:	c7 04 25 24 02 70 00 	movl   $0x16000000,0x700224
     ed0:	00 00 00 16 
     ed4:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     edb:	3d ff ff ff 15       	cmp    $0x15ffffff,%eax
     ee0:	77 0c                	ja     eee <mskd_extract_geq()+0x25>
     ee2:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
     ee9:	40 00 00 00 
     eed:	c3                   	retq   
     eee:	c7 04 25 c4 02 70 00 	movl   $0x20,0x7002c4
     ef5:	20 00 00 00 
     ef9:	c3                   	retq   

0000000000000efa <shifted_val(regbits::Shft<unsigned int, mcu::Timer::Prescale>)>:
     efa:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     f01:	00 00 00 2e 
     f05:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     f0c:	21 f8                	and    %edi,%eax
     f0e:	48 89 f9             	mov    %rdi,%rcx
     f11:	48 c1 e9 20          	shr    $0x20,%rcx
     f15:	d3 e8                	shr    %cl,%eax
     f17:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     f1e:	c3                   	retq   

0000000000000f1f <call_shifted_const_val()>:
     f1f:	48 bf 00 00 00 3e 19 	movabs $0x193e000000,%rdi
     f26:	00 00 00 
     f29:	e8 00 00 00 00       	callq  f2e <call_shifted_const_val()+0xf>
     f2e:	f3 c3                	repz retq 

0000000000000f30 <call_shifted_var_val()>:
     f30:	48 bf 00 00 00 3e 19 	movabs $0x193e000000,%rdi
     f37:	00 00 00 
     f3a:	e8 00 00 00 00       	callq  f3f <call_shifted_var_val()+0xf>
     f3f:	f3 c3                	repz retq 

0000000000000f41 <call_shifted_global_val()>:
     f41:	48 bf 00 00 00 3e 19 	movabs $0x193e000000,%rdi
     f48:	00 00 00 
     f4b:	e8 00 00 00 00       	callq  f50 <call_shifted_global_val()+0xf>
     f50:	f3 c3                	repz retq 

0000000000000f52 <shifted_ref(regbits::Shft<unsigned int, mcu::Timer::Prescale> const&)>:
     f52:	c7 04 25 24 02 70 00 	movl   $0x2e000000,0x700224
     f59:	00 00 00 2e 
     f5d:	8b 04 25 24 02 70 00 	mov    0x700224,%eax
     f64:	23 07                	and    (%rdi),%eax
     f66:	8b 4f 04             	mov    0x4(%rdi),%ecx
     f69:	d3 e8                	shr    %cl,%eax
     f6b:	89 04 25 2c 01 70 00 	mov    %eax,0x70012c
     f72:	c3                   	retq   

0000000000000f73 <call_shifted_const_ref()>:
     f73:	48 83 ec 10          	sub    $0x10,%rsp
     f77:	c7 44 24 08 00 00 00 	movl   $0x3e000000,0x8(%rsp)
     f7e:	3e 
     f7f:	c7 44 24 0c 19 00 00 	movl   $0x19,0xc(%rsp)
     f86:	00 
     f87:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     f8c:	e8 00 00 00 00       	callq  f91 <call_shifted_const_ref()+0x1e>
     f91:	48 83 c4 10          	add    $0x10,%rsp
     f95:	c3                   	retq   

0000000000000f96 <call_shifted_var_ref()>:
     f96:	48 83 ec 10          	sub    $0x10,%rsp
     f9a:	c7 44 24 08 00 00 00 	movl   $0x3e000000,0x8(%rsp)
     fa1:	3e 
     fa2:	c7 44 24 0c 19 00 00 	movl   $0x19,0xc(%rsp)
     fa9:	00 
     faa:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     faf:	e8 00 00 00 00       	callq  fb4 <call_shifted_var_ref()+0x1e>
     fb4:	48 83 c4 10          	add    $0x10,%rsp
     fb8:	c3                   	retq   

0000000000000fb9 <call_shifted_global_ref()>:
     fb9:	48 83 ec 10          	sub    $0x10,%rsp
     fbd:	c7 44 24 08 00 00 00 	movl   $0x3e000000,0x8(%rsp)
     fc4:	3e 
     fc5:	c7 44 24 0c 19 00 00 	movl   $0x19,0xc(%rsp)
     fcc:	00 
     fcd:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
     fd2:	e8 00 00 00 00       	callq  fd7 <call_shifted_global_ref()+0x1e>
     fd7:	48 83 c4 10          	add    $0x10,%rsp
     fdb:	c3                   	retq   

0000000000000fdc <copy_bits_val(regbits::Reg<unsigned int, mcu::Serial::Config>)>:
     fdc:	40 f6 c7 40          	test   $0x40,%dil
     fe0:	75 0c                	jne    fee <copy_bits_val(regbits::Reg<unsigned int, mcu::Serial::Config>)+0x12>
     fe2:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
     fe9:	04 00 00 00 
     fed:	c3                   	retq   
     fee:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
     ff5:	02 00 00 00 
     ff9:	c3                   	retq   

0000000000000ffa <call_copy_bits_val()>:
     ffa:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
    1001:	40 00 00 00 
    1005:	8b 3c 25 c4 02 70 00 	mov    0x7002c4,%edi
    100c:	e8 00 00 00 00       	callq  1011 <call_copy_bits_val()+0x17>
    1011:	f3 c3                	repz retq 

0000000000001013 <copy_bits_ref(regbits::Reg<unsigned int, mcu::Serial::Config> const&)>:
    1013:	f6 07 40             	testb  $0x40,(%rdi)
    1016:	75 0c                	jne    1024 <copy_bits_ref(regbits::Reg<unsigned int, mcu::Serial::Config> const&)+0x11>
    1018:	c7 04 25 c4 02 70 00 	movl   $0x4,0x7002c4
    101f:	04 00 00 00 
    1023:	c3                   	retq   
    1024:	c7 04 25 c4 02 70 00 	movl   $0x2,0x7002c4
    102b:	02 00 00 00 
    102f:	c3                   	retq   

0000000000001030 <call_copy_bits_ref()>:
    1030:	48 83 ec 10          	sub    $0x10,%rsp
    1034:	c7 04 25 c4 02 70 00 	movl   $0x40,0x7002c4
    103b:	40 00 00 00 
    103f:	8b 04 25 c4 02 70 00 	mov    0x7002c4,%eax
    1046:	89 44 24 0c          	mov    %eax,0xc(%rsp)
    104a:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
    104f:	e8 00 00 00 00       	callq  1054 <call_copy_bits_ref()+0x24>
    1054:	48 83 c4 10          	add    $0x10,%rsp
    1058:	c3                   	retq   

0000000000001059 <run>:
    1059:	48 83 ec 08          	sub    $0x8,%rsp
    105d:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 1064 <run+0xb>
    1064:	84 c0                	test   %al,%al
    1066:	0f 84 47 0a 00 00    	je     1ab3 <run+0xa5a>
    106c:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 1073 <run+0x1a>
    1073:	84 c0                	test   %al,%al
    1075:	0f 84 64 0a 00 00    	je     1adf <run+0xa86>
    107b:	0f b6 05 00 00 00 00 	movzbl 0x0(%rip),%eax        # 1082 <run+0x29>
    1082:	84 c0                	test   %al,%al
    1084:	0f 84 81 0a 00 00    	je     1b0b <run+0xab2>
    108a:	ba 00 00 00 00       	mov    $0x0,%edx
    108f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1096 <run+0x3d>
    1096:	bf 00 00 00 00       	mov    $0x0,%edi
    109b:	e8 00 00 00 00       	callq  10a0 <run+0x47>
    10a0:	ba 01 00 00 00       	mov    $0x1,%edx
    10a5:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 10ac <run+0x53>
    10ac:	bf 00 00 00 00       	mov    $0x0,%edi
    10b1:	e8 00 00 00 00       	callq  10b6 <run+0x5d>
    10b6:	ba 02 00 00 00       	mov    $0x2,%edx
    10bb:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 10c2 <run+0x69>
    10c2:	bf 00 00 00 00       	mov    $0x0,%edi
    10c7:	e8 00 00 00 00       	callq  10cc <run+0x73>
    10cc:	ba 03 00 00 00       	mov    $0x3,%edx
    10d1:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 10d8 <run+0x7f>
    10d8:	bf 00 00 00 00       	mov    $0x0,%edi
    10dd:	e8 00 00 00 00       	callq  10e2 <run+0x89>
    10e2:	ba 04 00 00 00       	mov    $0x4,%edx
    10e7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 10ee <run+0x95>
    10ee:	bf 00 00 00 00       	mov    $0x0,%edi
    10f3:	e8 00 00 00 00       	callq  10f8 <run+0x9f>
    10f8:	ba 05 00 00 00       	mov    $0x5,%edx
    10fd:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1104 <run+0xab>
    1104:	bf 00 00 00 00       	mov    $0x0,%edi
    1109:	e8 00 00 00 00       	callq  110e <run+0xb5>
    110e:	ba 06 00 00 00       	mov    $0x6,%edx
    1113:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 111a <run+0xc1>
    111a:	bf 00 00 00 00       	mov    $0x0,%edi
    111f:	e8 00 00 00 00       	callq  1124 <run+0xcb>
    1124:	ba 07 00 00 00       	mov    $0x7,%edx
    1129:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1130 <run+0xd7>
    1130:	bf 00 00 00 00       	mov    $0x0,%edi
    1135:	e8 00 00 00 00       	callq  113a <run+0xe1>
    113a:	ba 08 00 00 00       	mov    $0x8,%edx
    113f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1146 <run+0xed>
    1146:	bf 00 00 00 00       	mov    $0x0,%edi
    114b:	e8 00 00 00 00       	callq  1150 <run+0xf7>
    1150:	ba 09 00 00 00       	mov    $0x9,%edx
    1155:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 115c <run+0x103>
    115c:	bf 00 00 00 00       	mov    $0x0,%edi
    1161:	e8 00 00 00 00       	callq  1166 <run+0x10d>
    1166:	ba 0a 00 00 00       	mov    $0xa,%edx
    116b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1172 <run+0x119>
    1172:	bf 00 00 00 00       	mov    $0x0,%edi
    1177:	e8 00 00 00 00       	callq  117c <run+0x123>
    117c:	ba 0b 00 00 00       	mov    $0xb,%edx
    1181:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1188 <run+0x12f>
    1188:	bf 00 00 00 00       	mov    $0x0,%edi
    118d:	e8 00 00 00 00       	callq  1192 <run+0x139>
    1192:	ba 0c 00 00 00       	mov    $0xc,%edx
    1197:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 119e <run+0x145>
    119e:	bf 00 00 00 00       	mov    $0x0,%edi
    11a3:	e8 00 00 00 00       	callq  11a8 <run+0x14f>
    11a8:	ba 0d 00 00 00       	mov    $0xd,%edx
    11ad:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 11b4 <run+0x15b>
    11b4:	bf 00 00 00 00       	mov    $0x0,%edi
    11b9:	e8 00 00 00 00       	callq  11be <run+0x165>
    11be:	ba 0e 00 00 00       	mov    $0xe,%edx
    11c3:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 11ca <run+0x171>
    11ca:	bf 00 00 00 00       	mov    $0x0,%edi
    11cf:	e8 00 00 00 00       	callq  11d4 <run+0x17b>
    11d4:	ba 0f 00 00 00       	mov    $0xf,%edx
    11d9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 11e0 <run+0x187>
    11e0:	bf 00 00 00 00       	mov    $0x0,%edi
    11e5:	e8 00 00 00 00       	callq  11ea <run+0x191>
    11ea:	ba 10 00 00 00       	mov    $0x10,%edx
    11ef:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 11f6 <run+0x19d>
    11f6:	bf 00 00 00 00       	mov    $0x0,%edi
    11fb:	e8 00 00 00 00       	callq  1200 <run+0x1a7>
    1200:	ba 11 00 00 00       	mov    $0x11,%edx
    1205:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 120c <run+0x1b3>
    120c:	bf 00 00 00 00       	mov    $0x0,%edi
    1211:	e8 00 00 00 00       	callq  1216 <run+0x1bd>
    1216:	ba 12 00 00 00       	mov    $0x12,%edx
    121b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1222 <run+0x1c9>
    1222:	bf 00 00 00 00       	mov    $0x0,%edi
    1227:	e8 00 00 00 00       	callq  122c <run+0x1d3>
    122c:	ba 13 00 00 00       	mov    $0x13,%edx
    1231:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1238 <run+0x1df>
    1238:	bf 00 00 00 00       	mov    $0x0,%edi
    123d:	e8 00 00 00 00       	callq  1242 <run+0x1e9>
    1242:	ba 14 00 00 00       	mov    $0x14,%edx
    1247:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 124e <run+0x1f5>
    124e:	bf 00 00 00 00       	mov    $0x0,%edi
    1253:	e8 00 00 00 00       	callq  1258 <run+0x1ff>
    1258:	ba 15 00 00 00       	mov    $0x15,%edx
    125d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1264 <run+0x20b>
    1264:	bf 00 00 00 00       	mov    $0x0,%edi
    1269:	e8 00 00 00 00       	callq  126e <run+0x215>
    126e:	ba 16 00 00 00       	mov    $0x16,%edx
    1273:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 127a <run+0x221>
    127a:	bf 00 00 00 00       	mov    $0x0,%edi
    127f:	e8 00 00 00 00       	callq  1284 <run+0x22b>
    1284:	ba 17 00 00 00       	mov    $0x17,%edx
    1289:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1290 <run+0x237>
    1290:	bf 00 00 00 00       	mov    $0x0,%edi
    1295:	e8 00 00 00 00       	callq  129a <run+0x241>
    129a:	ba 18 00 00 00       	mov    $0x18,%edx
    129f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 12a6 <run+0x24d>
    12a6:	bf 00 00 00 00       	mov    $0x0,%edi
    12ab:	e8 00 00 00 00       	callq  12b0 <run+0x257>
    12b0:	ba 19 00 00 00       	mov    $0x19,%edx
    12b5:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 12bc <run+0x263>
    12bc:	bf 00 00 00 00       	mov    $0x0,%edi
    12c1:	e8 00 00 00 00       	callq  12c6 <run+0x26d>
    12c6:	ba 1a 00 00 00       	mov    $0x1a,%edx
    12cb:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 12d2 <run+0x279>
    12d2:	bf 00 00 00 00       	mov    $0x0,%edi
    12d7:	e8 00 00 00 00       	callq  12dc <run+0x283>
    12dc:	ba 1b 00 00 00       	mov    $0x1b,%edx
    12e1:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 12e8 <run+0x28f>
    12e8:	bf 00 00 00 00       	mov    $0x0,%edi
    12ed:	e8 00 00 00 00       	callq  12f2 <run+0x299>
    12f2:	ba 1c 00 00 00       	mov    $0x1c,%edx
    12f7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 12fe <run+0x2a5>
    12fe:	bf 00 00 00 00       	mov    $0x0,%edi
    1303:	e8 00 00 00 00       	callq  1308 <run+0x2af>
    1308:	ba 1d 00 00 00       	mov    $0x1d,%edx
    130d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1314 <run+0x2bb>
    1314:	bf 00 00 00 00       	mov    $0x0,%edi
    1319:	e8 00 00 00 00       	callq  131e <run+0x2c5>
    131e:	ba 1e 00 00 00       	mov    $0x1e,%edx
    1323:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 132a <run+0x2d1>
    132a:	bf 00 00 00 00       	mov    $0x0,%edi
    132f:	e8 00 00 00 00       	callq  1334 <run+0x2db>
    1334:	ba 1f 00 00 00       	mov    $0x1f,%edx
    1339:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1340 <run+0x2e7>
    1340:	bf 00 00 00 00       	mov    $0x0,%edi
    1345:	e8 00 00 00 00       	callq  134a <run+0x2f1>
    134a:	ba 20 00 00 00       	mov    $0x20,%edx
    134f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1356 <run+0x2fd>
    1356:	bf 00 00 00 00       	mov    $0x0,%edi
    135b:	e8 00 00 00 00       	callq  1360 <run+0x307>
    1360:	ba 21 00 00 00       	mov    $0x21,%edx
    1365:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 136c <run+0x313>
    136c:	bf 00 00 00 00       	mov    $0x0,%edi
    1371:	e8 00 00 00 00       	callq  1376 <run+0x31d>
    1376:	ba 22 00 00 00       	mov    $0x22,%edx
    137b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1382 <run+0x329>
    1382:	bf 00 00 00 00       	mov    $0x0,%edi
    1387:	e8 00 00 00 00       	callq  138c <run+0x333>
    138c:	ba 23 00 00 00       	mov    $0x23,%edx
    1391:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1398 <run+0x33f>
    1398:	bf 00 00 00 00       	mov    $0x0,%edi
    139d:	e8 00 00 00 00       	callq  13a2 <run+0x349>
    13a2:	ba 24 00 00 00       	mov    $0x24,%edx
    13a7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 13ae <run+0x355>
    13ae:	bf 00 00 00 00       	mov    $0x0,%edi
    13b3:	e8 00 00 00 00       	callq  13b8 <run+0x35f>
    13b8:	ba 25 00 00 00       	mov    $0x25,%edx
    13bd:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 13c4 <run+0x36b>
    13c4:	bf 00 00 00 00       	mov    $0x0,%edi
    13c9:	e8 00 00 00 00       	callq  13ce <run+0x375>
    13ce:	ba 26 00 00 00       	mov    $0x26,%edx
    13d3:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 13da <run+0x381>
    13da:	bf 00 00 00 00       	mov    $0x0,%edi
    13df:	e8 00 00 00 00       	callq  13e4 <run+0x38b>
    13e4:	ba 27 00 00 00       	mov    $0x27,%edx
    13e9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 13f0 <run+0x397>
    13f0:	bf 00 00 00 00       	mov    $0x0,%edi
    13f5:	e8 00 00 00 00       	callq  13fa <run+0x3a1>
    13fa:	ba 28 00 00 00       	mov    $0x28,%edx
    13ff:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1406 <run+0x3ad>
    1406:	bf 00 00 00 00       	mov    $0x0,%edi
    140b:	e8 00 00 00 00       	callq  1410 <run+0x3b7>
    1410:	ba 29 00 00 00       	mov    $0x29,%edx
    1415:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 141c <run+0x3c3>
    141c:	bf 00 00 00 00       	mov    $0x0,%edi
    1421:	e8 00 00 00 00       	callq  1426 <run+0x3cd>
    1426:	ba 2a 00 00 00       	mov    $0x2a,%edx
    142b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1432 <run+0x3d9>
    1432:	bf 00 00 00 00       	mov    $0x0,%edi
    1437:	e8 00 00 00 00       	callq  143c <run+0x3e3>
    143c:	ba 2b 00 00 00       	mov    $0x2b,%edx
    1441:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1448 <run+0x3ef>
    1448:	bf 00 00 00 00       	mov    $0x0,%edi
    144d:	e8 00 00 00 00       	callq  1452 <run+0x3f9>
    1452:	ba 2c 00 00 00       	mov    $0x2c,%edx
    1457:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 145e <run+0x405>
    145e:	bf 00 00 00 00       	mov    $0x0,%edi
    1463:	e8 00 00 00 00       	callq  1468 <run+0x40f>
    1468:	ba 2d 00 00 00       	mov    $0x2d,%edx
    146d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1474 <run+0x41b>
    1474:	bf 00 00 00 00       	mov    $0x0,%edi
    1479:	e8 00 00 00 00       	callq  147e <run+0x425>
    147e:	ba 2e 00 00 00       	mov    $0x2e,%edx
    1483:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 148a <run+0x431>
    148a:	bf 00 00 00 00       	mov    $0x0,%edi
    148f:	e8 00 00 00 00       	callq  1494 <run+0x43b>
    1494:	ba 2f 00 00 00       	mov    $0x2f,%edx
    1499:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 14a0 <run+0x447>
    14a0:	bf 00 00 00 00       	mov    $0x0,%edi
    14a5:	e8 00 00 00 00       	callq  14aa <run+0x451>
    14aa:	ba 30 00 00 00       	mov    $0x30,%edx
    14af:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 14b6 <run+0x45d>
    14b6:	bf 00 00 00 00       	mov    $0x0,%edi
    14bb:	e8 00 00 00 00       	callq  14c0 <run+0x467>
    14c0:	ba 31 00 00 00       	mov    $0x31,%edx
    14c5:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 14cc <run+0x473>
    14cc:	bf 00 00 00 00       	mov    $0x0,%edi
    14d1:	e8 00 00 00 00       	callq  14d6 <run+0x47d>
    14d6:	ba 32 00 00 00       	mov    $0x32,%edx
    14db:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 14e2 <run+0x489>
    14e2:	bf 00 00 00 00       	mov    $0x0,%edi
    14e7:	e8 00 00 00 00       	callq  14ec <run+0x493>
    14ec:	ba 33 00 00 00       	mov    $0x33,%edx
    14f1:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 14f8 <run+0x49f>
    14f8:	bf 00 00 00 00       	mov    $0x0,%edi
    14fd:	e8 00 00 00 00       	callq  1502 <run+0x4a9>
    1502:	ba 34 00 00 00       	mov    $0x34,%edx
    1507:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 150e <run+0x4b5>
    150e:	bf 00 00 00 00       	mov    $0x0,%edi
    1513:	e8 00 00 00 00       	callq  1518 <run+0x4bf>
    1518:	ba 35 00 00 00       	mov    $0x35,%edx
    151d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1524 <run+0x4cb>
    1524:	bf 00 00 00 00       	mov    $0x0,%edi
    1529:	e8 00 00 00 00       	callq  152e <run+0x4d5>
    152e:	ba 36 00 00 00       	mov    $0x36,%edx
    1533:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 153a <run+0x4e1>
    153a:	bf 00 00 00 00       	mov    $0x0,%edi
    153f:	e8 00 00 00 00       	callq  1544 <run+0x4eb>
    1544:	ba 37 00 00 00       	mov    $0x37,%edx
    1549:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1550 <run+0x4f7>
    1550:	bf 00 00 00 00       	mov    $0x0,%edi
    1555:	e8 00 00 00 00       	callq  155a <run+0x501>
    155a:	ba 38 00 00 00       	mov    $0x38,%edx
    155f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1566 <run+0x50d>
    1566:	bf 00 00 00 00       	mov    $0x0,%edi
    156b:	e8 00 00 00 00       	callq  1570 <run+0x517>
    1570:	ba 39 00 00 00       	mov    $0x39,%edx
    1575:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 157c <run+0x523>
    157c:	bf 00 00 00 00       	mov    $0x0,%edi
    1581:	e8 00 00 00 00       	callq  1586 <run+0x52d>
    1586:	ba 3a 00 00 00       	mov    $0x3a,%edx
    158b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1592 <run+0x539>
    1592:	bf 00 00 00 00       	mov    $0x0,%edi
    1597:	e8 00 00 00 00       	callq  159c <run+0x543>
    159c:	ba 3b 00 00 00       	mov    $0x3b,%edx
    15a1:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 15a8 <run+0x54f>
    15a8:	bf 00 00 00 00       	mov    $0x0,%edi
    15ad:	e8 00 00 00 00       	callq  15b2 <run+0x559>
    15b2:	ba 3c 00 00 00       	mov    $0x3c,%edx
    15b7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 15be <run+0x565>
    15be:	bf 00 00 00 00       	mov    $0x0,%edi
    15c3:	e8 00 00 00 00       	callq  15c8 <run+0x56f>
    15c8:	ba 3d 00 00 00       	mov    $0x3d,%edx
    15cd:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 15d4 <run+0x57b>
    15d4:	bf 00 00 00 00       	mov    $0x0,%edi
    15d9:	e8 00 00 00 00       	callq  15de <run+0x585>
    15de:	ba 3e 00 00 00       	mov    $0x3e,%edx
    15e3:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 15ea <run+0x591>
    15ea:	bf 00 00 00 00       	mov    $0x0,%edi
    15ef:	e8 00 00 00 00       	callq  15f4 <run+0x59b>
    15f4:	ba 3f 00 00 00       	mov    $0x3f,%edx
    15f9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1600 <run+0x5a7>
    1600:	bf 00 00 00 00       	mov    $0x0,%edi
    1605:	e8 00 00 00 00       	callq  160a <run+0x5b1>
    160a:	ba 40 00 00 00       	mov    $0x40,%edx
    160f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1616 <run+0x5bd>
    1616:	bf 00 00 00 00       	mov    $0x0,%edi
    161b:	e8 00 00 00 00       	callq  1620 <run+0x5c7>
    1620:	ba 41 00 00 00       	mov    $0x41,%edx
    1625:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 162c <run+0x5d3>
    162c:	bf 00 00 00 00       	mov    $0x0,%edi
    1631:	e8 00 00 00 00       	callq  1636 <run+0x5dd>
    1636:	ba 42 00 00 00       	mov    $0x42,%edx
    163b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1642 <run+0x5e9>
    1642:	bf 00 00 00 00       	mov    $0x0,%edi
    1647:	e8 00 00 00 00       	callq  164c <run+0x5f3>
    164c:	ba 43 00 00 00       	mov    $0x43,%edx
    1651:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1658 <run+0x5ff>
    1658:	bf 00 00 00 00       	mov    $0x0,%edi
    165d:	e8 00 00 00 00       	callq  1662 <run+0x609>
    1662:	ba 44 00 00 00       	mov    $0x44,%edx
    1667:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 166e <run+0x615>
    166e:	bf 00 00 00 00       	mov    $0x0,%edi
    1673:	e8 00 00 00 00       	callq  1678 <run+0x61f>
    1678:	ba 45 00 00 00       	mov    $0x45,%edx
    167d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1684 <run+0x62b>
    1684:	bf 00 00 00 00       	mov    $0x0,%edi
    1689:	e8 00 00 00 00       	callq  168e <run+0x635>
    168e:	ba 46 00 00 00       	mov    $0x46,%edx
    1693:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 169a <run+0x641>
    169a:	bf 00 00 00 00       	mov    $0x0,%edi
    169f:	e8 00 00 00 00       	callq  16a4 <run+0x64b>
    16a4:	ba 47 00 00 00       	mov    $0x47,%edx
    16a9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 16b0 <run+0x657>
    16b0:	bf 00 00 00 00       	mov    $0x0,%edi
    16b5:	e8 00 00 00 00       	callq  16ba <run+0x661>
    16ba:	ba 48 00 00 00       	mov    $0x48,%edx
    16bf:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 16c6 <run+0x66d>
    16c6:	bf 00 00 00 00       	mov    $0x0,%edi
    16cb:	e8 00 00 00 00       	callq  16d0 <run+0x677>
    16d0:	ba 49 00 00 00       	mov    $0x49,%edx
    16d5:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 16dc <run+0x683>
    16dc:	bf 00 00 00 00       	mov    $0x0,%edi
    16e1:	e8 00 00 00 00       	callq  16e6 <run+0x68d>
    16e6:	ba 4a 00 00 00       	mov    $0x4a,%edx
    16eb:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 16f2 <run+0x699>
    16f2:	bf 00 00 00 00       	mov    $0x0,%edi
    16f7:	e8 00 00 00 00       	callq  16fc <run+0x6a3>
    16fc:	ba 4b 00 00 00       	mov    $0x4b,%edx
    1701:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1708 <run+0x6af>
    1708:	bf 00 00 00 00       	mov    $0x0,%edi
    170d:	e8 00 00 00 00       	callq  1712 <run+0x6b9>
    1712:	ba 4c 00 00 00       	mov    $0x4c,%edx
    1717:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 171e <run+0x6c5>
    171e:	bf 00 00 00 00       	mov    $0x0,%edi
    1723:	e8 00 00 00 00       	callq  1728 <run+0x6cf>
    1728:	ba 4d 00 00 00       	mov    $0x4d,%edx
    172d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1734 <run+0x6db>
    1734:	bf 00 00 00 00       	mov    $0x0,%edi
    1739:	e8 00 00 00 00       	callq  173e <run+0x6e5>
    173e:	ba 4e 00 00 00       	mov    $0x4e,%edx
    1743:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 174a <run+0x6f1>
    174a:	bf 00 00 00 00       	mov    $0x0,%edi
    174f:	e8 00 00 00 00       	callq  1754 <run+0x6fb>
    1754:	ba 4f 00 00 00       	mov    $0x4f,%edx
    1759:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1760 <run+0x707>
    1760:	bf 00 00 00 00       	mov    $0x0,%edi
    1765:	e8 00 00 00 00       	callq  176a <run+0x711>
    176a:	ba 50 00 00 00       	mov    $0x50,%edx
    176f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1776 <run+0x71d>
    1776:	bf 00 00 00 00       	mov    $0x0,%edi
    177b:	e8 00 00 00 00       	callq  1780 <run+0x727>
    1780:	ba 51 00 00 00       	mov    $0x51,%edx
    1785:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 178c <run+0x733>
    178c:	bf 00 00 00 00       	mov    $0x0,%edi
    1791:	e8 00 00 00 00       	callq  1796 <run+0x73d>
    1796:	ba 52 00 00 00       	mov    $0x52,%edx
    179b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17a2 <run+0x749>
    17a2:	bf 00 00 00 00       	mov    $0x0,%edi
    17a7:	e8 00 00 00 00       	callq  17ac <run+0x753>
    17ac:	ba 53 00 00 00       	mov    $0x53,%edx
    17b1:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17b8 <run+0x75f>
    17b8:	bf 00 00 00 00       	mov    $0x0,%edi
    17bd:	e8 00 00 00 00       	callq  17c2 <run+0x769>
    17c2:	ba 54 00 00 00       	mov    $0x54,%edx
    17c7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17ce <run+0x775>
    17ce:	bf 00 00 00 00       	mov    $0x0,%edi
    17d3:	e8 00 00 00 00       	callq  17d8 <run+0x77f>
    17d8:	ba 55 00 00 00       	mov    $0x55,%edx
    17dd:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17e4 <run+0x78b>
    17e4:	bf 00 00 00 00       	mov    $0x0,%edi
    17e9:	e8 00 00 00 00       	callq  17ee <run+0x795>
    17ee:	ba 56 00 00 00       	mov    $0x56,%edx
    17f3:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 17fa <run+0x7a1>
    17fa:	bf 00 00 00 00       	mov    $0x0,%edi
    17ff:	e8 00 00 00 00       	callq  1804 <run+0x7ab>
    1804:	ba 57 00 00 00       	mov    $0x57,%edx
    1809:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1810 <run+0x7b7>
    1810:	bf 00 00 00 00       	mov    $0x0,%edi
    1815:	e8 00 00 00 00       	callq  181a <run+0x7c1>
    181a:	ba 58 00 00 00       	mov    $0x58,%edx
    181f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1826 <run+0x7cd>
    1826:	bf 00 00 00 00       	mov    $0x0,%edi
    182b:	e8 00 00 00 00       	callq  1830 <run+0x7d7>
    1830:	ba 59 00 00 00       	mov    $0x59,%edx
    1835:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 183c <run+0x7e3>
    183c:	bf 00 00 00 00       	mov    $0x0,%edi
    1841:	e8 00 00 00 00       	callq  1846 <run+0x7ed>
    1846:	ba 5a 00 00 00       	mov    $0x5a,%edx
    184b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1852 <run+0x7f9>
    1852:	bf 00 00 00 00       	mov    $0x0,%edi
    1857:	e8 00 00 00 00       	callq  185c <run+0x803>
    185c:	ba 5b 00 00 00       	mov    $0x5b,%edx
    1861:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1868 <run+0x80f>
    1868:	bf 00 00 00 00       	mov    $0x0,%edi
    186d:	e8 00 00 00 00       	callq  1872 <run+0x819>
    1872:	ba 5c 00 00 00       	mov    $0x5c,%edx
    1877:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 187e <run+0x825>
    187e:	bf 00 00 00 00       	mov    $0x0,%edi
    1883:	e8 00 00 00 00       	callq  1888 <run+0x82f>
    1888:	ba 5d 00 00 00       	mov    $0x5d,%edx
    188d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1894 <run+0x83b>
    1894:	bf 00 00 00 00       	mov    $0x0,%edi
    1899:	e8 00 00 00 00       	callq  189e <run+0x845>
    189e:	ba 5e 00 00 00       	mov    $0x5e,%edx
    18a3:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 18aa <run+0x851>
    18aa:	bf 00 00 00 00       	mov    $0x0,%edi
    18af:	e8 00 00 00 00       	callq  18b4 <run+0x85b>
    18b4:	ba 5f 00 00 00       	mov    $0x5f,%edx
    18b9:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 18c0 <run+0x867>
    18c0:	bf 00 00 00 00       	mov    $0x0,%edi
    18c5:	e8 00 00 00 00       	callq  18ca <run+0x871>
    18ca:	ba 60 00 00 00       	mov    $0x60,%edx
    18cf:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 18d6 <run+0x87d>
    18d6:	bf 00 00 00 00       	mov    $0x0,%edi
    18db:	e8 00 00 00 00       	callq  18e0 <run+0x887>
    18e0:	ba 61 00 00 00       	mov    $0x61,%edx
    18e5:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 18ec <run+0x893>
    18ec:	bf 00 00 00 00       	mov    $0x0,%edi
    18f1:	e8 00 00 00 00       	callq  18f6 <run+0x89d>
    18f6:	ba 62 00 00 00       	mov    $0x62,%edx
    18fb:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1902 <run+0x8a9>
    1902:	bf 00 00 00 00       	mov    $0x0,%edi
    1907:	e8 00 00 00 00       	callq  190c <run+0x8b3>
    190c:	ba 63 00 00 00       	mov    $0x63,%edx
    1911:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1918 <run+0x8bf>
    1918:	bf 00 00 00 00       	mov    $0x0,%edi
    191d:	e8 00 00 00 00       	callq  1922 <run+0x8c9>
    1922:	ba 64 00 00 00       	mov    $0x64,%edx
    1927:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 192e <run+0x8d5>
    192e:	bf 00 00 00 00       	mov    $0x0,%edi
    1933:	e8 00 00 00 00       	callq  1938 <run+0x8df>
    1938:	ba 65 00 00 00       	mov    $0x65,%edx
    193d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1944 <run+0x8eb>
    1944:	bf 00 00 00 00       	mov    $0x0,%edi
    1949:	e8 00 00 00 00       	callq  194e <run+0x8f5>
    194e:	ba 66 00 00 00       	mov    $0x66,%edx
    1953:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 195a <run+0x901>
    195a:	bf 00 00 00 00       	mov    $0x0,%edi
    195f:	e8 00 00 00 00       	callq  1964 <run+0x90b>
    1964:	ba 67 00 00 00       	mov    $0x67,%edx
    1969:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1970 <run+0x917>
    1970:	bf 00 00 00 00       	mov    $0x0,%edi
    1975:	e8 00 00 00 00       	callq  197a <run+0x921>
    197a:	ba 68 00 00 00       	mov    $0x68,%edx
    197f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1986 <run+0x92d>
    1986:	bf 00 00 00 00       	mov    $0x0,%edi
    198b:	e8 00 00 00 00       	callq  1990 <run+0x937>
    1990:	ba 69 00 00 00       	mov    $0x69,%edx
    1995:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 199c <run+0x943>
    199c:	bf 00 00 00 00       	mov    $0x0,%edi
    19a1:	e8 00 00 00 00       	callq  19a6 <run+0x94d>
    19a6:	ba 6a 00 00 00       	mov    $0x6a,%edx
    19ab:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 19b2 <run+0x959>
    19b2:	bf 00 00 00 00       	mov    $0x0,%edi
    19b7:	e8 00 00 00 00       	callq  19bc <run+0x963>
    19bc:	ba 6b 00 00 00       	mov    $0x6b,%edx
    19c1:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 19c8 <run+0x96f>
    19c8:	bf 00 00 00 00       	mov    $0x0,%edi
    19cd:	e8 00 00 00 00       	callq  19d2 <run+0x979>
    19d2:	ba 6c 00 00 00       	mov    $0x6c,%edx
    19d7:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 19de <run+0x985>
    19de:	bf 00 00 00 00       	mov    $0x0,%edi
    19e3:	e8 00 00 00 00       	callq  19e8 <run+0x98f>
    19e8:	ba 6d 00 00 00       	mov    $0x6d,%edx
    19ed:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 19f4 <run+0x99b>
    19f4:	bf 00 00 00 00       	mov    $0x0,%edi
    19f9:	e8 00 00 00 00       	callq  19fe <run+0x9a5>
    19fe:	ba 6e 00 00 00       	mov    $0x6e,%edx
    1a03:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a0a <run+0x9b1>
    1a0a:	bf 00 00 00 00       	mov    $0x0,%edi
    1a0f:	e8 00 00 00 00       	callq  1a14 <run+0x9bb>
    1a14:	ba 6f 00 00 00       	mov    $0x6f,%edx
    1a19:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a20 <run+0x9c7>
    1a20:	bf 00 00 00 00       	mov    $0x0,%edi
    1a25:	e8 00 00 00 00       	callq  1a2a <run+0x9d1>
    1a2a:	ba 70 00 00 00       	mov    $0x70,%edx
    1a2f:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a36 <run+0x9dd>
    1a36:	bf 00 00 00 00       	mov    $0x0,%edi
    1a3b:	e8 00 00 00 00       	callq  1a40 <run+0x9e7>
    1a40:	ba 71 00 00 00       	mov    $0x71,%edx
    1a45:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a4c <run+0x9f3>
    1a4c:	bf 00 00 00 00       	mov    $0x0,%edi
    1a51:	e8 00 00 00 00       	callq  1a56 <run+0x9fd>
    1a56:	ba 72 00 00 00       	mov    $0x72,%edx
    1a5b:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a62 <run+0xa09>
    1a62:	bf 00 00 00 00       	mov    $0x0,%edi
    1a67:	e8 00 00 00 00       	callq  1a6c <run+0xa13>
    1a6c:	ba 73 00 00 00       	mov    $0x73,%edx
    1a71:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a78 <run+0xa1f>
    1a78:	bf 00 00 00 00       	mov    $0x0,%edi
    1a7d:	e8 00 00 00 00       	callq  1a82 <run+0xa29>
    1a82:	ba 74 00 00 00       	mov    $0x74,%edx
    1a87:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1a8e <run+0xa35>
    1a8e:	bf 00 00 00 00       	mov    $0x0,%edi
    1a93:	e8 00 00 00 00       	callq  1a98 <run+0xa3f>
    1a98:	ba 75 00 00 00       	mov    $0x75,%edx
    1a9d:	48 8b 35 00 00 00 00 	mov    0x0(%rip),%rsi        # 1aa4 <run+0xa4b>
    1aa4:	bf 00 00 00 00       	mov    $0x0,%edi
    1aa9:	e8 00 00 00 00       	callq  1aae <run+0xa55>
    1aae:	48 83 c4 08          	add    $0x8,%rsp
    1ab2:	c3                   	retq   
    1ab3:	bf 00 00 00 00       	mov    $0x0,%edi
    1ab8:	e8 00 00 00 00       	callq  1abd <run+0xa64>
    1abd:	85 c0                	test   %eax,%eax
    1abf:	0f 84 a7 f5 ff ff    	je     106c <run+0x13>
    1ac5:	48 c7 05 00 00 00 00 	movq   $0x7002c4,0x0(%rip)        # 1ad0 <run+0xa77>
    1acc:	c4 02 70 00 
    1ad0:	bf 00 00 00 00       	mov    $0x0,%edi
    1ad5:	e8 00 00 00 00       	callq  1ada <run+0xa81>
    1ada:	e9 8d f5 ff ff       	jmpq   106c <run+0x13>
    1adf:	bf 00 00 00 00       	mov    $0x0,%edi
    1ae4:	e8 00 00 00 00       	callq  1ae9 <run+0xa90>
    1ae9:	85 c0                	test   %eax,%eax
    1aeb:	0f 84 8a f5 ff ff    	je     107b <run+0x22>
    1af1:	48 c7 05 00 00 00 00 	movq   $0x700224,0x0(%rip)        # 1afc <run+0xaa3>
    1af8:	24 02 70 00 
    1afc:	bf 00 00 00 00       	mov    $0x0,%edi
    1b01:	e8 00 00 00 00       	callq  1b06 <run+0xaad>
    1b06:	e9 70 f5 ff ff       	jmpq   107b <run+0x22>
    1b0b:	bf 00 00 00 00       	mov    $0x0,%edi
    1b10:	e8 00 00 00 00       	callq  1b15 <run+0xabc>
    1b15:	85 c0                	test   %eax,%eax
    1b17:	0f 84 6d f5 ff ff    	je     108a <run+0x31>
    1b1d:	48 c7 05 00 00 00 00 	movq   $0x70012c,0x0(%rip)        # 1b28 <run+0xacf>
    1b24:	2c 01 70 00 
    1b28:	bf 00 00 00 00       	mov    $0x0,%edi
    1b2d:	e8 00 00 00 00       	callq  1b32 <run+0xad9>
    1b32:	e9 53 f5 ff ff       	jmpq   108a <run+0x31>
